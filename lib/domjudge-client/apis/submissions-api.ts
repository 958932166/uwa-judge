/* tslint:disable */
/* eslint-disable */
/**
 * DOMjudge
 * DOMjudge API v4
 *
 * OpenAPI spec version: 8.2.2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { CidSubmissionsBody1 } from '../models';
import { InlineResponse20012 } from '../models';
import { InlineResponse400 } from '../models';
import { SourceCodeList } from '../models';
import { Submission &amp; Files } from '../models';
import { SubmissionsIdBody1 } from '../models';
/**
 * SubmissionsApi - axios parameter creator
 * @export
 */
export const SubmissionsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get the source code of all the files for the given submission.
         * @param {string} id The ID of the entity
         * @param {string} cid The contest ID
         * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getV4AppApiSubmissionGetsubmissionsourcecode: async (id: string, cid: string, strict?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getV4AppApiSubmissionGetsubmissionsourcecode.');
            }
            // verify required parameter 'cid' is not null or undefined
            if (cid === null || cid === undefined) {
                throw new RequiredError('cid','Required parameter cid was null or undefined when calling getV4AppApiSubmissionGetsubmissionsourcecode.');
            }
            const localVarPath = `/api/v4/contests/{cid}/submissions/{id}/source-code`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"cid"}}`, encodeURIComponent(String(cid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }

            if (strict !== undefined) {
                localVarQueryParameter['strict'] = strict;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all the submissions for this contest.
         * @param {string} cid The contest ID
         * @param {Array<string>} [ids] Filter the objects to get on this list of ID&#x27;s
         * @param {string} [language_id] Only show submissions for the given language
         * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getV4AppApiSubmissionList: async (cid: string, ids?: Array<string>, language_id?: string, strict?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cid' is not null or undefined
            if (cid === null || cid === undefined) {
                throw new RequiredError('cid','Required parameter cid was null or undefined when calling getV4AppApiSubmissionList.');
            }
            const localVarPath = `/api/v4/submissions`
                .replace(`{${"cid"}}`, encodeURIComponent(String(cid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }

            if (ids) {
                localVarQueryParameter['ids[]'] = ids;
            }

            if (language_id !== undefined) {
                localVarQueryParameter['language_id'] = language_id;
            }

            if (strict !== undefined) {
                localVarQueryParameter['strict'] = strict;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all the submissions for this contest.
         * @param {string} cid The contest ID
         * @param {Array<string>} [ids] Filter the objects to get on this list of ID&#x27;s
         * @param {string} [language_id] Only show submissions for the given language
         * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getV4AppApiSubmissionList1: async (cid: string, ids?: Array<string>, language_id?: string, strict?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cid' is not null or undefined
            if (cid === null || cid === undefined) {
                throw new RequiredError('cid','Required parameter cid was null or undefined when calling getV4AppApiSubmissionList1.');
            }
            const localVarPath = `/api/v4/contests/{cid}/submissions`
                .replace(`{${"cid"}}`, encodeURIComponent(String(cid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }

            if (ids) {
                localVarQueryParameter['ids[]'] = ids;
            }

            if (language_id !== undefined) {
                localVarQueryParameter['language_id'] = language_id;
            }

            if (strict !== undefined) {
                localVarQueryParameter['strict'] = strict;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get the given submission for this contest.
         * @param {string} id The ID of the entity
         * @param {string} cid The contest ID
         * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getV4AppApiSubmissionSingle: async (id: string, cid: string, strict?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getV4AppApiSubmissionSingle.');
            }
            // verify required parameter 'cid' is not null or undefined
            if (cid === null || cid === undefined) {
                throw new RequiredError('cid','Required parameter cid was null or undefined when calling getV4AppApiSubmissionSingle.');
            }
            const localVarPath = `/api/v4/submissions/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"cid"}}`, encodeURIComponent(String(cid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }

            if (strict !== undefined) {
                localVarQueryParameter['strict'] = strict;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get the given submission for this contest.
         * @param {string} id The ID of the entity
         * @param {string} cid The contest ID
         * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getV4AppApiSubmissionSingle1: async (id: string, cid: string, strict?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getV4AppApiSubmissionSingle1.');
            }
            // verify required parameter 'cid' is not null or undefined
            if (cid === null || cid === undefined) {
                throw new RequiredError('cid','Required parameter cid was null or undefined when calling getV4AppApiSubmissionSingle1.');
            }
            const localVarPath = `/api/v4/contests/{cid}/submissions/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"cid"}}`, encodeURIComponent(String(cid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }

            if (strict !== undefined) {
                localVarQueryParameter['strict'] = strict;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get the files for the given submission as a ZIP archive.
         * @param {string} id The ID of the entity
         * @param {string} cid The contest ID
         * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getV4SubmissionFiles: async (id: string, cid: string, strict?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getV4SubmissionFiles.');
            }
            // verify required parameter 'cid' is not null or undefined
            if (cid === null || cid === undefined) {
                throw new RequiredError('cid','Required parameter cid was null or undefined when calling getV4SubmissionFiles.');
            }
            const localVarPath = `/api/v4/contests/{cid}/submissions/{id}/files`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"cid"}}`, encodeURIComponent(String(cid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }

            if (strict !== undefined) {
                localVarQueryParameter['strict'] = strict;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get the files for the given submission as a ZIP archive.
         * @param {string} id The ID of the entity
         * @param {string} cid The contest ID
         * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getV4SubmissionFilesRoot: async (id: string, cid: string, strict?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getV4SubmissionFilesRoot.');
            }
            // verify required parameter 'cid' is not null or undefined
            if (cid === null || cid === undefined) {
                throw new RequiredError('cid','Required parameter cid was null or undefined when calling getV4SubmissionFilesRoot.');
            }
            const localVarPath = `/api/v4/submissions/{id}/files`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"cid"}}`, encodeURIComponent(String(cid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }

            if (strict !== undefined) {
                localVarQueryParameter['strict'] = strict;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Add a submission to this contest.
         * @param {string} problem 
         * @param {string} language 
         * @param {Array<Blob>} code 
         * @param {string} entry_point 
         * @param {string} cid The contest ID
         * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postV4AppApiSubmissionAddsubmissionForm: async (problem: string, language: string, code: Array<Blob>, entry_point: string, cid: string, strict?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'problem' is not null or undefined
            if (problem === null || problem === undefined) {
                throw new RequiredError('problem','Required parameter problem was null or undefined when calling postV4AppApiSubmissionAddsubmissionForm.');
            }
            // verify required parameter 'language' is not null or undefined
            if (language === null || language === undefined) {
                throw new RequiredError('language','Required parameter language was null or undefined when calling postV4AppApiSubmissionAddsubmissionForm.');
            }
            // verify required parameter 'code' is not null or undefined
            if (code === null || code === undefined) {
                throw new RequiredError('code','Required parameter code was null or undefined when calling postV4AppApiSubmissionAddsubmissionForm.');
            }
            // verify required parameter 'entry_point' is not null or undefined
            if (entry_point === null || entry_point === undefined) {
                throw new RequiredError('entry_point','Required parameter entry_point was null or undefined when calling postV4AppApiSubmissionAddsubmissionForm.');
            }
            // verify required parameter 'cid' is not null or undefined
            if (cid === null || cid === undefined) {
                throw new RequiredError('cid','Required parameter cid was null or undefined when calling postV4AppApiSubmissionAddsubmissionForm.');
            }
            const localVarPath = `/api/v4/contests/{cid}/submissions`
                .replace(`{${"cid"}}`, encodeURIComponent(String(cid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new FormData();

            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }

            if (strict !== undefined) {
                localVarQueryParameter['strict'] = strict;
            }


            if (problem !== undefined) { 
                localVarFormParams.append('problem', problem as any);
            }

            if (language !== undefined) { 
                localVarFormParams.append('language', language as any);
            }
            if (code) {
                code.forEach((element) => {
                    localVarFormParams.append('code', element as any);
                })
            }

            if (entry_point !== undefined) { 
                localVarFormParams.append('entry_point', entry_point as any);
            }

            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Add a submission to this contest.
         * @param {CidSubmissionsBody1} body 
         * @param {string} cid The contest ID
         * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postV4AppApiSubmissionAddsubmission: async (body: CidSubmissionsBody1, cid: string, strict?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling postV4AppApiSubmissionAddsubmission.');
            }
            // verify required parameter 'cid' is not null or undefined
            if (cid === null || cid === undefined) {
                throw new RequiredError('cid','Required parameter cid was null or undefined when calling postV4AppApiSubmissionAddsubmission.');
            }
            const localVarPath = `/api/v4/contests/{cid}/submissions`
                .replace(`{${"cid"}}`, encodeURIComponent(String(cid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new FormData();

            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }

            if (strict !== undefined) {
                localVarQueryParameter['strict'] = strict;
            }

            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Add a submission to this contest.
         * @param {string} problem 
         * @param {string} language 
         * @param {Array<Blob>} code 
         * @param {string} entry_point 
         * @param {string} cid The contest ID
         * @param {string} id 
         * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putV4AppApiSubmissionAddsubmission1Form: async (problem: string, language: string, code: Array<Blob>, entry_point: string, cid: string, id: string, strict?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'problem' is not null or undefined
            if (problem === null || problem === undefined) {
                throw new RequiredError('problem','Required parameter problem was null or undefined when calling putV4AppApiSubmissionAddsubmission1Form.');
            }
            // verify required parameter 'language' is not null or undefined
            if (language === null || language === undefined) {
                throw new RequiredError('language','Required parameter language was null or undefined when calling putV4AppApiSubmissionAddsubmission1Form.');
            }
            // verify required parameter 'code' is not null or undefined
            if (code === null || code === undefined) {
                throw new RequiredError('code','Required parameter code was null or undefined when calling putV4AppApiSubmissionAddsubmission1Form.');
            }
            // verify required parameter 'entry_point' is not null or undefined
            if (entry_point === null || entry_point === undefined) {
                throw new RequiredError('entry_point','Required parameter entry_point was null or undefined when calling putV4AppApiSubmissionAddsubmission1Form.');
            }
            // verify required parameter 'cid' is not null or undefined
            if (cid === null || cid === undefined) {
                throw new RequiredError('cid','Required parameter cid was null or undefined when calling putV4AppApiSubmissionAddsubmission1Form.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling putV4AppApiSubmissionAddsubmission1Form.');
            }
            const localVarPath = `/api/v4/contests/{cid}/submissions/{id}`
                .replace(`{${"cid"}}`, encodeURIComponent(String(cid)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new FormData();

            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }

            if (strict !== undefined) {
                localVarQueryParameter['strict'] = strict;
            }


            if (problem !== undefined) { 
                localVarFormParams.append('problem', problem as any);
            }

            if (language !== undefined) { 
                localVarFormParams.append('language', language as any);
            }
            if (code) {
                code.forEach((element) => {
                    localVarFormParams.append('code', element as any);
                })
            }

            if (entry_point !== undefined) { 
                localVarFormParams.append('entry_point', entry_point as any);
            }

            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Add a submission to this contest.
         * @param {SubmissionsIdBody1} body 
         * @param {string} cid The contest ID
         * @param {string} id 
         * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putV4AppApiSubmissionAddsubmission1: async (body: SubmissionsIdBody1, cid: string, id: string, strict?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling putV4AppApiSubmissionAddsubmission1.');
            }
            // verify required parameter 'cid' is not null or undefined
            if (cid === null || cid === undefined) {
                throw new RequiredError('cid','Required parameter cid was null or undefined when calling putV4AppApiSubmissionAddsubmission1.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling putV4AppApiSubmissionAddsubmission1.');
            }
            const localVarPath = `/api/v4/contests/{cid}/submissions/{id}`
                .replace(`{${"cid"}}`, encodeURIComponent(String(cid)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new FormData();

            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }

            if (strict !== undefined) {
                localVarQueryParameter['strict'] = strict;
            }

            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SubmissionsApi - functional programming interface
 * @export
 */
export const SubmissionsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get the source code of all the files for the given submission.
         * @param {string} id The ID of the entity
         * @param {string} cid The contest ID
         * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getV4AppApiSubmissionGetsubmissionsourcecode(id: string, cid: string, strict?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<SourceCodeList>>> {
            const localVarAxiosArgs = await SubmissionsApiAxiosParamCreator(configuration).getV4AppApiSubmissionGetsubmissionsourcecode(id, cid, strict, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get all the submissions for this contest.
         * @param {string} cid The contest ID
         * @param {Array<string>} [ids] Filter the objects to get on this list of ID&#x27;s
         * @param {string} [language_id] Only show submissions for the given language
         * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getV4AppApiSubmissionList(cid: string, ids?: Array<string>, language_id?: string, strict?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<Submission & Files>>>> {
            const localVarAxiosArgs = await SubmissionsApiAxiosParamCreator(configuration).getV4AppApiSubmissionList(cid, ids, language_id, strict, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get all the submissions for this contest.
         * @param {string} cid The contest ID
         * @param {Array<string>} [ids] Filter the objects to get on this list of ID&#x27;s
         * @param {string} [language_id] Only show submissions for the given language
         * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getV4AppApiSubmissionList1(cid: string, ids?: Array<string>, language_id?: string, strict?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<Submission & Files>>>> {
            const localVarAxiosArgs = await SubmissionsApiAxiosParamCreator(configuration).getV4AppApiSubmissionList1(cid, ids, language_id, strict, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get the given submission for this contest.
         * @param {string} id The ID of the entity
         * @param {string} cid The contest ID
         * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getV4AppApiSubmissionSingle(id: string, cid: string, strict?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20012>>> {
            const localVarAxiosArgs = await SubmissionsApiAxiosParamCreator(configuration).getV4AppApiSubmissionSingle(id, cid, strict, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get the given submission for this contest.
         * @param {string} id The ID of the entity
         * @param {string} cid The contest ID
         * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getV4AppApiSubmissionSingle1(id: string, cid: string, strict?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20012>>> {
            const localVarAxiosArgs = await SubmissionsApiAxiosParamCreator(configuration).getV4AppApiSubmissionSingle1(id, cid, strict, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get the files for the given submission as a ZIP archive.
         * @param {string} id The ID of the entity
         * @param {string} cid The contest ID
         * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getV4SubmissionFiles(id: string, cid: string, strict?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await SubmissionsApiAxiosParamCreator(configuration).getV4SubmissionFiles(id, cid, strict, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get the files for the given submission as a ZIP archive.
         * @param {string} id The ID of the entity
         * @param {string} cid The contest ID
         * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getV4SubmissionFilesRoot(id: string, cid: string, strict?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await SubmissionsApiAxiosParamCreator(configuration).getV4SubmissionFilesRoot(id, cid, strict, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Add a submission to this contest.
         * @param {string} problem 
         * @param {string} language 
         * @param {Array<Blob>} code 
         * @param {string} entry_point 
         * @param {string} cid The contest ID
         * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postV4AppApiSubmissionAddsubmissionForm(problem: string, language: string, code: Array<Blob>, entry_point: string, cid: string, strict?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20012>>> {
            const localVarAxiosArgs = await SubmissionsApiAxiosParamCreator(configuration).postV4AppApiSubmissionAddsubmissionForm(problem, language, code, entry_point, cid, strict, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Add a submission to this contest.
         * @param {CidSubmissionsBody1} body 
         * @param {string} cid The contest ID
         * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postV4AppApiSubmissionAddsubmission(body: CidSubmissionsBody1, cid: string, strict?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20012>>> {
            const localVarAxiosArgs = await SubmissionsApiAxiosParamCreator(configuration).postV4AppApiSubmissionAddsubmission(body, cid, strict, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Add a submission to this contest.
         * @param {string} problem 
         * @param {string} language 
         * @param {Array<Blob>} code 
         * @param {string} entry_point 
         * @param {string} cid The contest ID
         * @param {string} id 
         * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putV4AppApiSubmissionAddsubmission1Form(problem: string, language: string, code: Array<Blob>, entry_point: string, cid: string, id: string, strict?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20012>>> {
            const localVarAxiosArgs = await SubmissionsApiAxiosParamCreator(configuration).putV4AppApiSubmissionAddsubmission1Form(problem, language, code, entry_point, cid, id, strict, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Add a submission to this contest.
         * @param {SubmissionsIdBody1} body 
         * @param {string} cid The contest ID
         * @param {string} id 
         * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putV4AppApiSubmissionAddsubmission1(body: SubmissionsIdBody1, cid: string, id: string, strict?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20012>>> {
            const localVarAxiosArgs = await SubmissionsApiAxiosParamCreator(configuration).putV4AppApiSubmissionAddsubmission1(body, cid, id, strict, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * SubmissionsApi - factory interface
 * @export
 */
export const SubmissionsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary Get the source code of all the files for the given submission.
         * @param {string} id The ID of the entity
         * @param {string} cid The contest ID
         * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getV4AppApiSubmissionGetsubmissionsourcecode(id: string, cid: string, strict?: boolean, options?: AxiosRequestConfig): Promise<AxiosResponse<SourceCodeList>> {
            return SubmissionsApiFp(configuration).getV4AppApiSubmissionGetsubmissionsourcecode(id, cid, strict, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all the submissions for this contest.
         * @param {string} cid The contest ID
         * @param {Array<string>} [ids] Filter the objects to get on this list of ID&#x27;s
         * @param {string} [language_id] Only show submissions for the given language
         * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getV4AppApiSubmissionList(cid: string, ids?: Array<string>, language_id?: string, strict?: boolean, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<Submission & Files>>> {
            return SubmissionsApiFp(configuration).getV4AppApiSubmissionList(cid, ids, language_id, strict, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all the submissions for this contest.
         * @param {string} cid The contest ID
         * @param {Array<string>} [ids] Filter the objects to get on this list of ID&#x27;s
         * @param {string} [language_id] Only show submissions for the given language
         * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getV4AppApiSubmissionList1(cid: string, ids?: Array<string>, language_id?: string, strict?: boolean, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<Submission & Files>>> {
            return SubmissionsApiFp(configuration).getV4AppApiSubmissionList1(cid, ids, language_id, strict, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get the given submission for this contest.
         * @param {string} id The ID of the entity
         * @param {string} cid The contest ID
         * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getV4AppApiSubmissionSingle(id: string, cid: string, strict?: boolean, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20012>> {
            return SubmissionsApiFp(configuration).getV4AppApiSubmissionSingle(id, cid, strict, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get the given submission for this contest.
         * @param {string} id The ID of the entity
         * @param {string} cid The contest ID
         * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getV4AppApiSubmissionSingle1(id: string, cid: string, strict?: boolean, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20012>> {
            return SubmissionsApiFp(configuration).getV4AppApiSubmissionSingle1(id, cid, strict, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get the files for the given submission as a ZIP archive.
         * @param {string} id The ID of the entity
         * @param {string} cid The contest ID
         * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getV4SubmissionFiles(id: string, cid: string, strict?: boolean, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return SubmissionsApiFp(configuration).getV4SubmissionFiles(id, cid, strict, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get the files for the given submission as a ZIP archive.
         * @param {string} id The ID of the entity
         * @param {string} cid The contest ID
         * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getV4SubmissionFilesRoot(id: string, cid: string, strict?: boolean, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return SubmissionsApiFp(configuration).getV4SubmissionFilesRoot(id, cid, strict, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Add a submission to this contest.
         * @param {string} problem 
         * @param {string} language 
         * @param {Array<Blob>} code 
         * @param {string} entry_point 
         * @param {string} cid The contest ID
         * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postV4AppApiSubmissionAddsubmissionForm(problem: string, language: string, code: Array<Blob>, entry_point: string, cid: string, strict?: boolean, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20012>> {
            return SubmissionsApiFp(configuration).postV4AppApiSubmissionAddsubmissionForm(problem, language, code, entry_point, cid, strict, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Add a submission to this contest.
         * @param {CidSubmissionsBody1} body 
         * @param {string} cid The contest ID
         * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postV4AppApiSubmissionAddsubmission(body: CidSubmissionsBody1, cid: string, strict?: boolean, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20012>> {
            return SubmissionsApiFp(configuration).postV4AppApiSubmissionAddsubmission(body, cid, strict, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Add a submission to this contest.
         * @param {string} problem 
         * @param {string} language 
         * @param {Array<Blob>} code 
         * @param {string} entry_point 
         * @param {string} cid The contest ID
         * @param {string} id 
         * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putV4AppApiSubmissionAddsubmission1Form(problem: string, language: string, code: Array<Blob>, entry_point: string, cid: string, id: string, strict?: boolean, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20012>> {
            return SubmissionsApiFp(configuration).putV4AppApiSubmissionAddsubmission1Form(problem, language, code, entry_point, cid, id, strict, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Add a submission to this contest.
         * @param {SubmissionsIdBody1} body 
         * @param {string} cid The contest ID
         * @param {string} id 
         * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putV4AppApiSubmissionAddsubmission1(body: SubmissionsIdBody1, cid: string, id: string, strict?: boolean, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20012>> {
            return SubmissionsApiFp(configuration).putV4AppApiSubmissionAddsubmission1(body, cid, id, strict, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SubmissionsApi - object-oriented interface
 * @export
 * @class SubmissionsApi
 * @extends {BaseAPI}
 */
export class SubmissionsApi extends BaseAPI {
    /**
     * 
     * @summary Get the source code of all the files for the given submission.
     * @param {string} id The ID of the entity
     * @param {string} cid The contest ID
     * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubmissionsApi
     */
    public async getV4AppApiSubmissionGetsubmissionsourcecode(id: string, cid: string, strict?: boolean, options?: AxiosRequestConfig) : Promise<AxiosResponse<SourceCodeList>> {
        return SubmissionsApiFp(this.configuration).getV4AppApiSubmissionGetsubmissionsourcecode(id, cid, strict, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Get all the submissions for this contest.
     * @param {string} cid The contest ID
     * @param {Array<string>} [ids] Filter the objects to get on this list of ID&#x27;s
     * @param {string} [language_id] Only show submissions for the given language
     * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubmissionsApi
     */
    public async getV4AppApiSubmissionList(cid: string, ids?: Array<string>, language_id?: string, strict?: boolean, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<Submission & Files>>> {
        return SubmissionsApiFp(this.configuration).getV4AppApiSubmissionList(cid, ids, language_id, strict, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Get all the submissions for this contest.
     * @param {string} cid The contest ID
     * @param {Array<string>} [ids] Filter the objects to get on this list of ID&#x27;s
     * @param {string} [language_id] Only show submissions for the given language
     * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubmissionsApi
     */
    public async getV4AppApiSubmissionList1(cid: string, ids?: Array<string>, language_id?: string, strict?: boolean, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<Submission & Files>>> {
        return SubmissionsApiFp(this.configuration).getV4AppApiSubmissionList1(cid, ids, language_id, strict, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Get the given submission for this contest.
     * @param {string} id The ID of the entity
     * @param {string} cid The contest ID
     * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubmissionsApi
     */
    public async getV4AppApiSubmissionSingle(id: string, cid: string, strict?: boolean, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20012>> {
        return SubmissionsApiFp(this.configuration).getV4AppApiSubmissionSingle(id, cid, strict, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Get the given submission for this contest.
     * @param {string} id The ID of the entity
     * @param {string} cid The contest ID
     * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubmissionsApi
     */
    public async getV4AppApiSubmissionSingle1(id: string, cid: string, strict?: boolean, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20012>> {
        return SubmissionsApiFp(this.configuration).getV4AppApiSubmissionSingle1(id, cid, strict, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Get the files for the given submission as a ZIP archive.
     * @param {string} id The ID of the entity
     * @param {string} cid The contest ID
     * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubmissionsApi
     */
    public async getV4SubmissionFiles(id: string, cid: string, strict?: boolean, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return SubmissionsApiFp(this.configuration).getV4SubmissionFiles(id, cid, strict, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Get the files for the given submission as a ZIP archive.
     * @param {string} id The ID of the entity
     * @param {string} cid The contest ID
     * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubmissionsApi
     */
    public async getV4SubmissionFilesRoot(id: string, cid: string, strict?: boolean, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return SubmissionsApiFp(this.configuration).getV4SubmissionFilesRoot(id, cid, strict, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Add a submission to this contest.
     * @param {string} problem 
     * @param {string} language 
     * @param {Array<Blob>} code 
     * @param {string} entry_point 
     * @param {string} cid The contest ID
     * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubmissionsApi
     */
    public async postV4AppApiSubmissionAddsubmissionForm(problem: string, language: string, code: Array<Blob>, entry_point: string, cid: string, strict?: boolean, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20012>> {
        return SubmissionsApiFp(this.configuration).postV4AppApiSubmissionAddsubmissionForm(problem, language, code, entry_point, cid, strict, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Add a submission to this contest.
     * @param {CidSubmissionsBody1} body 
     * @param {string} cid The contest ID
     * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubmissionsApi
     */
    public async postV4AppApiSubmissionAddsubmission(body: CidSubmissionsBody1, cid: string, strict?: boolean, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20012>> {
        return SubmissionsApiFp(this.configuration).postV4AppApiSubmissionAddsubmission(body, cid, strict, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Add a submission to this contest.
     * @param {string} problem 
     * @param {string} language 
     * @param {Array<Blob>} code 
     * @param {string} entry_point 
     * @param {string} cid The contest ID
     * @param {string} id 
     * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubmissionsApi
     */
    public async putV4AppApiSubmissionAddsubmission1Form(problem: string, language: string, code: Array<Blob>, entry_point: string, cid: string, id: string, strict?: boolean, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20012>> {
        return SubmissionsApiFp(this.configuration).putV4AppApiSubmissionAddsubmission1Form(problem, language, code, entry_point, cid, id, strict, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Add a submission to this contest.
     * @param {SubmissionsIdBody1} body 
     * @param {string} cid The contest ID
     * @param {string} id 
     * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubmissionsApi
     */
    public async putV4AppApiSubmissionAddsubmission1(body: SubmissionsIdBody1, cid: string, id: string, strict?: boolean, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20012>> {
        return SubmissionsApiFp(this.configuration).putV4AppApiSubmissionAddsubmission1(body, cid, id, strict, options).then((request) => request(this.axios, this.basePath));
    }
}
