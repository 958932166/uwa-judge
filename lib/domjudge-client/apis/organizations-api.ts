/* tslint:disable */
/* eslint-disable */
/**
 * DOMjudge
 * DOMjudge API v4
 *
 * OpenAPI spec version: 8.2.2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { InlineResponse20010 } from '../models';
import { InlineResponse400 } from '../models';
import { TeamAffiliation } from '../models';
import { TeamAffiliation &amp; Logo } from '../models';
/**
 * OrganizationsApi - axios parameter creator
 * @export
 */
export const OrganizationsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Delete the logo for the given organization.
         * @param {string} id The ID of the entity
         * @param {string} cid The contest ID
         * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteV4AppApiOrganizationDeletelogo: async (id: string, cid: string, strict?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteV4AppApiOrganizationDeletelogo.');
            }
            // verify required parameter 'cid' is not null or undefined
            if (cid === null || cid === undefined) {
                throw new RequiredError('cid','Required parameter cid was null or undefined when calling deleteV4AppApiOrganizationDeletelogo.');
            }
            const localVarPath = `/api/v4/organizations/{id}/logo`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"cid"}}`, encodeURIComponent(String(cid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }

            if (strict !== undefined) {
                localVarQueryParameter['strict'] = strict;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete the logo for the given organization.
         * @param {string} id The ID of the entity
         * @param {string} cid The contest ID
         * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteV4DeleteOrganizationLogo: async (id: string, cid: string, strict?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteV4DeleteOrganizationLogo.');
            }
            // verify required parameter 'cid' is not null or undefined
            if (cid === null || cid === undefined) {
                throw new RequiredError('cid','Required parameter cid was null or undefined when calling deleteV4DeleteOrganizationLogo.');
            }
            const localVarPath = `/api/v4/contests/{cid}/organizations/{id}/logo`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"cid"}}`, encodeURIComponent(String(cid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }

            if (strict !== undefined) {
                localVarQueryParameter['strict'] = strict;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all the organizations for this contest.
         * @param {string} cid The contest ID
         * @param {Array<string>} [ids] Filter the objects to get on this list of ID&#x27;s
         * @param {string} [country] Only show organizations for the given country
         * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getV4AppApiOrganizationList: async (cid: string, ids?: Array<string>, country?: string, strict?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cid' is not null or undefined
            if (cid === null || cid === undefined) {
                throw new RequiredError('cid','Required parameter cid was null or undefined when calling getV4AppApiOrganizationList.');
            }
            const localVarPath = `/api/v4/contests/{cid}/organizations`
                .replace(`{${"cid"}}`, encodeURIComponent(String(cid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }

            if (ids) {
                localVarQueryParameter['ids[]'] = ids;
            }

            if (country !== undefined) {
                localVarQueryParameter['country'] = country;
            }

            if (strict !== undefined) {
                localVarQueryParameter['strict'] = strict;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all the organizations for this contest.
         * @param {string} cid The contest ID
         * @param {Array<string>} [ids] Filter the objects to get on this list of ID&#x27;s
         * @param {string} [country] Only show organizations for the given country
         * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getV4AppApiOrganizationList1: async (cid: string, ids?: Array<string>, country?: string, strict?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cid' is not null or undefined
            if (cid === null || cid === undefined) {
                throw new RequiredError('cid','Required parameter cid was null or undefined when calling getV4AppApiOrganizationList1.');
            }
            const localVarPath = `/api/v4/organizations`
                .replace(`{${"cid"}}`, encodeURIComponent(String(cid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }

            if (ids) {
                localVarQueryParameter['ids[]'] = ids;
            }

            if (country !== undefined) {
                localVarQueryParameter['country'] = country;
            }

            if (strict !== undefined) {
                localVarQueryParameter['strict'] = strict;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get the logo for the given organization.
         * @param {string} id The ID of the entity
         * @param {string} cid The contest ID
         * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getV4AppApiOrganizationLogo: async (id: string, cid: string, strict?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getV4AppApiOrganizationLogo.');
            }
            // verify required parameter 'cid' is not null or undefined
            if (cid === null || cid === undefined) {
                throw new RequiredError('cid','Required parameter cid was null or undefined when calling getV4AppApiOrganizationLogo.');
            }
            const localVarPath = `/api/v4/organizations/{id}/logo`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"cid"}}`, encodeURIComponent(String(cid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }

            if (strict !== undefined) {
                localVarQueryParameter['strict'] = strict;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get the given organization for this contest.
         * @param {string} id The ID of the entity
         * @param {string} cid The contest ID
         * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getV4AppApiOrganizationSingle: async (id: string, cid: string, strict?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getV4AppApiOrganizationSingle.');
            }
            // verify required parameter 'cid' is not null or undefined
            if (cid === null || cid === undefined) {
                throw new RequiredError('cid','Required parameter cid was null or undefined when calling getV4AppApiOrganizationSingle.');
            }
            const localVarPath = `/api/v4/contests/{cid}/organizations/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"cid"}}`, encodeURIComponent(String(cid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }

            if (strict !== undefined) {
                localVarQueryParameter['strict'] = strict;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get the given organization for this contest.
         * @param {string} id The ID of the entity
         * @param {string} cid The contest ID
         * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getV4AppApiOrganizationSingle1: async (id: string, cid: string, strict?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getV4AppApiOrganizationSingle1.');
            }
            // verify required parameter 'cid' is not null or undefined
            if (cid === null || cid === undefined) {
                throw new RequiredError('cid','Required parameter cid was null or undefined when calling getV4AppApiOrganizationSingle1.');
            }
            const localVarPath = `/api/v4/organizations/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"cid"}}`, encodeURIComponent(String(cid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }

            if (strict !== undefined) {
                localVarQueryParameter['strict'] = strict;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get the logo for the given organization.
         * @param {string} id The ID of the entity
         * @param {string} cid The contest ID
         * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getV4OrganizationLogo: async (id: string, cid: string, strict?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getV4OrganizationLogo.');
            }
            // verify required parameter 'cid' is not null or undefined
            if (cid === null || cid === undefined) {
                throw new RequiredError('cid','Required parameter cid was null or undefined when calling getV4OrganizationLogo.');
            }
            const localVarPath = `/api/v4/contests/{cid}/organizations/{id}/logo`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"cid"}}`, encodeURIComponent(String(cid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }

            if (strict !== undefined) {
                localVarQueryParameter['strict'] = strict;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Add a new organization.
         * @param {string} shortname 
         * @param {string} id 
         * @param {string} icpc_id 
         * @param {string} name 
         * @param {string} formal_name 
         * @param {string} country 
         * @param {string} cid The contest ID
         * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postV4AppApiOrganizationAddForm: async (shortname: string, id: string, icpc_id: string, name: string, formal_name: string, country: string, cid: string, strict?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'shortname' is not null or undefined
            if (shortname === null || shortname === undefined) {
                throw new RequiredError('shortname','Required parameter shortname was null or undefined when calling postV4AppApiOrganizationAddForm.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling postV4AppApiOrganizationAddForm.');
            }
            // verify required parameter 'icpc_id' is not null or undefined
            if (icpc_id === null || icpc_id === undefined) {
                throw new RequiredError('icpc_id','Required parameter icpc_id was null or undefined when calling postV4AppApiOrganizationAddForm.');
            }
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling postV4AppApiOrganizationAddForm.');
            }
            // verify required parameter 'formal_name' is not null or undefined
            if (formal_name === null || formal_name === undefined) {
                throw new RequiredError('formal_name','Required parameter formal_name was null or undefined when calling postV4AppApiOrganizationAddForm.');
            }
            // verify required parameter 'country' is not null or undefined
            if (country === null || country === undefined) {
                throw new RequiredError('country','Required parameter country was null or undefined when calling postV4AppApiOrganizationAddForm.');
            }
            // verify required parameter 'cid' is not null or undefined
            if (cid === null || cid === undefined) {
                throw new RequiredError('cid','Required parameter cid was null or undefined when calling postV4AppApiOrganizationAddForm.');
            }
            const localVarPath = `/api/v4/contests/{cid}/organizations`
                .replace(`{${"cid"}}`, encodeURIComponent(String(cid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new FormData();

            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }

            if (strict !== undefined) {
                localVarQueryParameter['strict'] = strict;
            }


            if (shortname !== undefined) { 
                localVarFormParams.append('shortname', shortname as any);
            }

            if (id !== undefined) { 
                localVarFormParams.append('id', id as any);
            }

            if (icpc_id !== undefined) { 
                localVarFormParams.append('icpc_id', icpc_id as any);
            }

            if (name !== undefined) { 
                localVarFormParams.append('name', name as any);
            }

            if (formal_name !== undefined) { 
                localVarFormParams.append('formal_name', formal_name as any);
            }

            if (country !== undefined) { 
                localVarFormParams.append('country', country as any);
            }

            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Add a new organization.
         * @param {TeamAffiliation} body 
         * @param {string} cid The contest ID
         * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postV4AppApiOrganizationAdd: async (body: TeamAffiliation, cid: string, strict?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling postV4AppApiOrganizationAdd.');
            }
            // verify required parameter 'cid' is not null or undefined
            if (cid === null || cid === undefined) {
                throw new RequiredError('cid','Required parameter cid was null or undefined when calling postV4AppApiOrganizationAdd.');
            }
            const localVarPath = `/api/v4/contests/{cid}/organizations`
                .replace(`{${"cid"}}`, encodeURIComponent(String(cid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new FormData();

            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }

            if (strict !== undefined) {
                localVarQueryParameter['strict'] = strict;
            }

            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Add a new organization.
         * @param {string} shortname 
         * @param {string} id 
         * @param {string} icpc_id 
         * @param {string} name 
         * @param {string} formal_name 
         * @param {string} country 
         * @param {string} cid The contest ID
         * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postV4AppApiOrganizationAdd1Form: async (shortname: string, id: string, icpc_id: string, name: string, formal_name: string, country: string, cid: string, strict?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'shortname' is not null or undefined
            if (shortname === null || shortname === undefined) {
                throw new RequiredError('shortname','Required parameter shortname was null or undefined when calling postV4AppApiOrganizationAdd1Form.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling postV4AppApiOrganizationAdd1Form.');
            }
            // verify required parameter 'icpc_id' is not null or undefined
            if (icpc_id === null || icpc_id === undefined) {
                throw new RequiredError('icpc_id','Required parameter icpc_id was null or undefined when calling postV4AppApiOrganizationAdd1Form.');
            }
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling postV4AppApiOrganizationAdd1Form.');
            }
            // verify required parameter 'formal_name' is not null or undefined
            if (formal_name === null || formal_name === undefined) {
                throw new RequiredError('formal_name','Required parameter formal_name was null or undefined when calling postV4AppApiOrganizationAdd1Form.');
            }
            // verify required parameter 'country' is not null or undefined
            if (country === null || country === undefined) {
                throw new RequiredError('country','Required parameter country was null or undefined when calling postV4AppApiOrganizationAdd1Form.');
            }
            // verify required parameter 'cid' is not null or undefined
            if (cid === null || cid === undefined) {
                throw new RequiredError('cid','Required parameter cid was null or undefined when calling postV4AppApiOrganizationAdd1Form.');
            }
            const localVarPath = `/api/v4/organizations`
                .replace(`{${"cid"}}`, encodeURIComponent(String(cid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new FormData();

            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }

            if (strict !== undefined) {
                localVarQueryParameter['strict'] = strict;
            }


            if (shortname !== undefined) { 
                localVarFormParams.append('shortname', shortname as any);
            }

            if (id !== undefined) { 
                localVarFormParams.append('id', id as any);
            }

            if (icpc_id !== undefined) { 
                localVarFormParams.append('icpc_id', icpc_id as any);
            }

            if (name !== undefined) { 
                localVarFormParams.append('name', name as any);
            }

            if (formal_name !== undefined) { 
                localVarFormParams.append('formal_name', formal_name as any);
            }

            if (country !== undefined) { 
                localVarFormParams.append('country', country as any);
            }

            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Add a new organization.
         * @param {TeamAffiliation} body 
         * @param {string} cid The contest ID
         * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postV4AppApiOrganizationAdd1: async (body: TeamAffiliation, cid: string, strict?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling postV4AppApiOrganizationAdd1.');
            }
            // verify required parameter 'cid' is not null or undefined
            if (cid === null || cid === undefined) {
                throw new RequiredError('cid','Required parameter cid was null or undefined when calling postV4AppApiOrganizationAdd1.');
            }
            const localVarPath = `/api/v4/organizations`
                .replace(`{${"cid"}}`, encodeURIComponent(String(cid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new FormData();

            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }

            if (strict !== undefined) {
                localVarQueryParameter['strict'] = strict;
            }

            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Set the logo for the given organization.
         * @param {Blob} logo 
         * @param {string} id The ID of the entity
         * @param {string} cid The contest ID
         * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postV4AppApiOrganizationSetlogoForm: async (logo: Blob, id: string, cid: string, strict?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'logo' is not null or undefined
            if (logo === null || logo === undefined) {
                throw new RequiredError('logo','Required parameter logo was null or undefined when calling postV4AppApiOrganizationSetlogoForm.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling postV4AppApiOrganizationSetlogoForm.');
            }
            // verify required parameter 'cid' is not null or undefined
            if (cid === null || cid === undefined) {
                throw new RequiredError('cid','Required parameter cid was null or undefined when calling postV4AppApiOrganizationSetlogoForm.');
            }
            const localVarPath = `/api/v4/organizations/{id}/logo`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"cid"}}`, encodeURIComponent(String(cid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new FormData();

            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }

            if (strict !== undefined) {
                localVarQueryParameter['strict'] = strict;
            }


            if (logo !== undefined) { 
                localVarFormParams.append('logo', logo as any);
            }

            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Set the logo for the given organization.
         * @param {Blob} logo 
         * @param {string} id The ID of the entity
         * @param {string} cid The contest ID
         * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postV4PostOrganizationLogoForm: async (logo: Blob, id: string, cid: string, strict?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'logo' is not null or undefined
            if (logo === null || logo === undefined) {
                throw new RequiredError('logo','Required parameter logo was null or undefined when calling postV4PostOrganizationLogoForm.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling postV4PostOrganizationLogoForm.');
            }
            // verify required parameter 'cid' is not null or undefined
            if (cid === null || cid === undefined) {
                throw new RequiredError('cid','Required parameter cid was null or undefined when calling postV4PostOrganizationLogoForm.');
            }
            const localVarPath = `/api/v4/contests/{cid}/organizations/{id}/logo`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"cid"}}`, encodeURIComponent(String(cid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new FormData();

            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }

            if (strict !== undefined) {
                localVarQueryParameter['strict'] = strict;
            }


            if (logo !== undefined) { 
                localVarFormParams.append('logo', logo as any);
            }

            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Set the logo for the given organization.
         * @param {Blob} logo 
         * @param {string} id The ID of the entity
         * @param {string} cid The contest ID
         * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putV4AppApiOrganizationSetlogo1Form: async (logo: Blob, id: string, cid: string, strict?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'logo' is not null or undefined
            if (logo === null || logo === undefined) {
                throw new RequiredError('logo','Required parameter logo was null or undefined when calling putV4AppApiOrganizationSetlogo1Form.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling putV4AppApiOrganizationSetlogo1Form.');
            }
            // verify required parameter 'cid' is not null or undefined
            if (cid === null || cid === undefined) {
                throw new RequiredError('cid','Required parameter cid was null or undefined when calling putV4AppApiOrganizationSetlogo1Form.');
            }
            const localVarPath = `/api/v4/organizations/{id}/logo`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"cid"}}`, encodeURIComponent(String(cid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new FormData();

            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }

            if (strict !== undefined) {
                localVarQueryParameter['strict'] = strict;
            }


            if (logo !== undefined) { 
                localVarFormParams.append('logo', logo as any);
            }

            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Set the logo for the given organization.
         * @param {Blob} logo 
         * @param {string} id The ID of the entity
         * @param {string} cid The contest ID
         * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putV4PutOrganizationLogoForm: async (logo: Blob, id: string, cid: string, strict?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'logo' is not null or undefined
            if (logo === null || logo === undefined) {
                throw new RequiredError('logo','Required parameter logo was null or undefined when calling putV4PutOrganizationLogoForm.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling putV4PutOrganizationLogoForm.');
            }
            // verify required parameter 'cid' is not null or undefined
            if (cid === null || cid === undefined) {
                throw new RequiredError('cid','Required parameter cid was null or undefined when calling putV4PutOrganizationLogoForm.');
            }
            const localVarPath = `/api/v4/contests/{cid}/organizations/{id}/logo`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"cid"}}`, encodeURIComponent(String(cid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new FormData();

            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }

            if (strict !== undefined) {
                localVarQueryParameter['strict'] = strict;
            }


            if (logo !== undefined) { 
                localVarFormParams.append('logo', logo as any);
            }

            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OrganizationsApi - functional programming interface
 * @export
 */
export const OrganizationsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Delete the logo for the given organization.
         * @param {string} id The ID of the entity
         * @param {string} cid The contest ID
         * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteV4AppApiOrganizationDeletelogo(id: string, cid: string, strict?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await OrganizationsApiAxiosParamCreator(configuration).deleteV4AppApiOrganizationDeletelogo(id, cid, strict, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Delete the logo for the given organization.
         * @param {string} id The ID of the entity
         * @param {string} cid The contest ID
         * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteV4DeleteOrganizationLogo(id: string, cid: string, strict?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await OrganizationsApiAxiosParamCreator(configuration).deleteV4DeleteOrganizationLogo(id, cid, strict, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get all the organizations for this contest.
         * @param {string} cid The contest ID
         * @param {Array<string>} [ids] Filter the objects to get on this list of ID&#x27;s
         * @param {string} [country] Only show organizations for the given country
         * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getV4AppApiOrganizationList(cid: string, ids?: Array<string>, country?: string, strict?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<TeamAffiliation & Logo>>>> {
            const localVarAxiosArgs = await OrganizationsApiAxiosParamCreator(configuration).getV4AppApiOrganizationList(cid, ids, country, strict, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get all the organizations for this contest.
         * @param {string} cid The contest ID
         * @param {Array<string>} [ids] Filter the objects to get on this list of ID&#x27;s
         * @param {string} [country] Only show organizations for the given country
         * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getV4AppApiOrganizationList1(cid: string, ids?: Array<string>, country?: string, strict?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<TeamAffiliation & Logo>>>> {
            const localVarAxiosArgs = await OrganizationsApiAxiosParamCreator(configuration).getV4AppApiOrganizationList1(cid, ids, country, strict, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get the logo for the given organization.
         * @param {string} id The ID of the entity
         * @param {string} cid The contest ID
         * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getV4AppApiOrganizationLogo(id: string, cid: string, strict?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await OrganizationsApiAxiosParamCreator(configuration).getV4AppApiOrganizationLogo(id, cid, strict, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get the given organization for this contest.
         * @param {string} id The ID of the entity
         * @param {string} cid The contest ID
         * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getV4AppApiOrganizationSingle(id: string, cid: string, strict?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20010>>> {
            const localVarAxiosArgs = await OrganizationsApiAxiosParamCreator(configuration).getV4AppApiOrganizationSingle(id, cid, strict, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get the given organization for this contest.
         * @param {string} id The ID of the entity
         * @param {string} cid The contest ID
         * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getV4AppApiOrganizationSingle1(id: string, cid: string, strict?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20010>>> {
            const localVarAxiosArgs = await OrganizationsApiAxiosParamCreator(configuration).getV4AppApiOrganizationSingle1(id, cid, strict, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get the logo for the given organization.
         * @param {string} id The ID of the entity
         * @param {string} cid The contest ID
         * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getV4OrganizationLogo(id: string, cid: string, strict?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await OrganizationsApiAxiosParamCreator(configuration).getV4OrganizationLogo(id, cid, strict, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Add a new organization.
         * @param {string} shortname 
         * @param {string} id 
         * @param {string} icpc_id 
         * @param {string} name 
         * @param {string} formal_name 
         * @param {string} country 
         * @param {string} cid The contest ID
         * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postV4AppApiOrganizationAddForm(shortname: string, id: string, icpc_id: string, name: string, formal_name: string, country: string, cid: string, strict?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<TeamAffiliation>>> {
            const localVarAxiosArgs = await OrganizationsApiAxiosParamCreator(configuration).postV4AppApiOrganizationAddForm(shortname, id, icpc_id, name, formal_name, country, cid, strict, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Add a new organization.
         * @param {TeamAffiliation} body 
         * @param {string} cid The contest ID
         * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postV4AppApiOrganizationAdd(body: TeamAffiliation, cid: string, strict?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<TeamAffiliation>>> {
            const localVarAxiosArgs = await OrganizationsApiAxiosParamCreator(configuration).postV4AppApiOrganizationAdd(body, cid, strict, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Add a new organization.
         * @param {string} shortname 
         * @param {string} id 
         * @param {string} icpc_id 
         * @param {string} name 
         * @param {string} formal_name 
         * @param {string} country 
         * @param {string} cid The contest ID
         * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postV4AppApiOrganizationAdd1Form(shortname: string, id: string, icpc_id: string, name: string, formal_name: string, country: string, cid: string, strict?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<TeamAffiliation>>> {
            const localVarAxiosArgs = await OrganizationsApiAxiosParamCreator(configuration).postV4AppApiOrganizationAdd1Form(shortname, id, icpc_id, name, formal_name, country, cid, strict, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Add a new organization.
         * @param {TeamAffiliation} body 
         * @param {string} cid The contest ID
         * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postV4AppApiOrganizationAdd1(body: TeamAffiliation, cid: string, strict?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<TeamAffiliation>>> {
            const localVarAxiosArgs = await OrganizationsApiAxiosParamCreator(configuration).postV4AppApiOrganizationAdd1(body, cid, strict, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Set the logo for the given organization.
         * @param {Blob} logo 
         * @param {string} id The ID of the entity
         * @param {string} cid The contest ID
         * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postV4AppApiOrganizationSetlogoForm(logo: Blob, id: string, cid: string, strict?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await OrganizationsApiAxiosParamCreator(configuration).postV4AppApiOrganizationSetlogoForm(logo, id, cid, strict, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Set the logo for the given organization.
         * @param {Blob} logo 
         * @param {string} id The ID of the entity
         * @param {string} cid The contest ID
         * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postV4PostOrganizationLogoForm(logo: Blob, id: string, cid: string, strict?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await OrganizationsApiAxiosParamCreator(configuration).postV4PostOrganizationLogoForm(logo, id, cid, strict, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Set the logo for the given organization.
         * @param {Blob} logo 
         * @param {string} id The ID of the entity
         * @param {string} cid The contest ID
         * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putV4AppApiOrganizationSetlogo1Form(logo: Blob, id: string, cid: string, strict?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await OrganizationsApiAxiosParamCreator(configuration).putV4AppApiOrganizationSetlogo1Form(logo, id, cid, strict, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Set the logo for the given organization.
         * @param {Blob} logo 
         * @param {string} id The ID of the entity
         * @param {string} cid The contest ID
         * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putV4PutOrganizationLogoForm(logo: Blob, id: string, cid: string, strict?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await OrganizationsApiAxiosParamCreator(configuration).putV4PutOrganizationLogoForm(logo, id, cid, strict, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * OrganizationsApi - factory interface
 * @export
 */
export const OrganizationsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary Delete the logo for the given organization.
         * @param {string} id The ID of the entity
         * @param {string} cid The contest ID
         * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteV4AppApiOrganizationDeletelogo(id: string, cid: string, strict?: boolean, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return OrganizationsApiFp(configuration).deleteV4AppApiOrganizationDeletelogo(id, cid, strict, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete the logo for the given organization.
         * @param {string} id The ID of the entity
         * @param {string} cid The contest ID
         * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteV4DeleteOrganizationLogo(id: string, cid: string, strict?: boolean, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return OrganizationsApiFp(configuration).deleteV4DeleteOrganizationLogo(id, cid, strict, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all the organizations for this contest.
         * @param {string} cid The contest ID
         * @param {Array<string>} [ids] Filter the objects to get on this list of ID&#x27;s
         * @param {string} [country] Only show organizations for the given country
         * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getV4AppApiOrganizationList(cid: string, ids?: Array<string>, country?: string, strict?: boolean, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<TeamAffiliation & Logo>>> {
            return OrganizationsApiFp(configuration).getV4AppApiOrganizationList(cid, ids, country, strict, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all the organizations for this contest.
         * @param {string} cid The contest ID
         * @param {Array<string>} [ids] Filter the objects to get on this list of ID&#x27;s
         * @param {string} [country] Only show organizations for the given country
         * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getV4AppApiOrganizationList1(cid: string, ids?: Array<string>, country?: string, strict?: boolean, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<TeamAffiliation & Logo>>> {
            return OrganizationsApiFp(configuration).getV4AppApiOrganizationList1(cid, ids, country, strict, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get the logo for the given organization.
         * @param {string} id The ID of the entity
         * @param {string} cid The contest ID
         * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getV4AppApiOrganizationLogo(id: string, cid: string, strict?: boolean, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return OrganizationsApiFp(configuration).getV4AppApiOrganizationLogo(id, cid, strict, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get the given organization for this contest.
         * @param {string} id The ID of the entity
         * @param {string} cid The contest ID
         * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getV4AppApiOrganizationSingle(id: string, cid: string, strict?: boolean, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20010>> {
            return OrganizationsApiFp(configuration).getV4AppApiOrganizationSingle(id, cid, strict, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get the given organization for this contest.
         * @param {string} id The ID of the entity
         * @param {string} cid The contest ID
         * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getV4AppApiOrganizationSingle1(id: string, cid: string, strict?: boolean, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20010>> {
            return OrganizationsApiFp(configuration).getV4AppApiOrganizationSingle1(id, cid, strict, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get the logo for the given organization.
         * @param {string} id The ID of the entity
         * @param {string} cid The contest ID
         * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getV4OrganizationLogo(id: string, cid: string, strict?: boolean, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return OrganizationsApiFp(configuration).getV4OrganizationLogo(id, cid, strict, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Add a new organization.
         * @param {string} shortname 
         * @param {string} id 
         * @param {string} icpc_id 
         * @param {string} name 
         * @param {string} formal_name 
         * @param {string} country 
         * @param {string} cid The contest ID
         * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postV4AppApiOrganizationAddForm(shortname: string, id: string, icpc_id: string, name: string, formal_name: string, country: string, cid: string, strict?: boolean, options?: AxiosRequestConfig): Promise<AxiosResponse<TeamAffiliation>> {
            return OrganizationsApiFp(configuration).postV4AppApiOrganizationAddForm(shortname, id, icpc_id, name, formal_name, country, cid, strict, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Add a new organization.
         * @param {TeamAffiliation} body 
         * @param {string} cid The contest ID
         * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postV4AppApiOrganizationAdd(body: TeamAffiliation, cid: string, strict?: boolean, options?: AxiosRequestConfig): Promise<AxiosResponse<TeamAffiliation>> {
            return OrganizationsApiFp(configuration).postV4AppApiOrganizationAdd(body, cid, strict, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Add a new organization.
         * @param {string} shortname 
         * @param {string} id 
         * @param {string} icpc_id 
         * @param {string} name 
         * @param {string} formal_name 
         * @param {string} country 
         * @param {string} cid The contest ID
         * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postV4AppApiOrganizationAdd1Form(shortname: string, id: string, icpc_id: string, name: string, formal_name: string, country: string, cid: string, strict?: boolean, options?: AxiosRequestConfig): Promise<AxiosResponse<TeamAffiliation>> {
            return OrganizationsApiFp(configuration).postV4AppApiOrganizationAdd1Form(shortname, id, icpc_id, name, formal_name, country, cid, strict, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Add a new organization.
         * @param {TeamAffiliation} body 
         * @param {string} cid The contest ID
         * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postV4AppApiOrganizationAdd1(body: TeamAffiliation, cid: string, strict?: boolean, options?: AxiosRequestConfig): Promise<AxiosResponse<TeamAffiliation>> {
            return OrganizationsApiFp(configuration).postV4AppApiOrganizationAdd1(body, cid, strict, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Set the logo for the given organization.
         * @param {Blob} logo 
         * @param {string} id The ID of the entity
         * @param {string} cid The contest ID
         * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postV4AppApiOrganizationSetlogoForm(logo: Blob, id: string, cid: string, strict?: boolean, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return OrganizationsApiFp(configuration).postV4AppApiOrganizationSetlogoForm(logo, id, cid, strict, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Set the logo for the given organization.
         * @param {Blob} logo 
         * @param {string} id The ID of the entity
         * @param {string} cid The contest ID
         * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postV4PostOrganizationLogoForm(logo: Blob, id: string, cid: string, strict?: boolean, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return OrganizationsApiFp(configuration).postV4PostOrganizationLogoForm(logo, id, cid, strict, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Set the logo for the given organization.
         * @param {Blob} logo 
         * @param {string} id The ID of the entity
         * @param {string} cid The contest ID
         * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putV4AppApiOrganizationSetlogo1Form(logo: Blob, id: string, cid: string, strict?: boolean, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return OrganizationsApiFp(configuration).putV4AppApiOrganizationSetlogo1Form(logo, id, cid, strict, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Set the logo for the given organization.
         * @param {Blob} logo 
         * @param {string} id The ID of the entity
         * @param {string} cid The contest ID
         * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putV4PutOrganizationLogoForm(logo: Blob, id: string, cid: string, strict?: boolean, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return OrganizationsApiFp(configuration).putV4PutOrganizationLogoForm(logo, id, cid, strict, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * OrganizationsApi - object-oriented interface
 * @export
 * @class OrganizationsApi
 * @extends {BaseAPI}
 */
export class OrganizationsApi extends BaseAPI {
    /**
     * 
     * @summary Delete the logo for the given organization.
     * @param {string} id The ID of the entity
     * @param {string} cid The contest ID
     * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    public async deleteV4AppApiOrganizationDeletelogo(id: string, cid: string, strict?: boolean, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return OrganizationsApiFp(this.configuration).deleteV4AppApiOrganizationDeletelogo(id, cid, strict, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Delete the logo for the given organization.
     * @param {string} id The ID of the entity
     * @param {string} cid The contest ID
     * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    public async deleteV4DeleteOrganizationLogo(id: string, cid: string, strict?: boolean, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return OrganizationsApiFp(this.configuration).deleteV4DeleteOrganizationLogo(id, cid, strict, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Get all the organizations for this contest.
     * @param {string} cid The contest ID
     * @param {Array<string>} [ids] Filter the objects to get on this list of ID&#x27;s
     * @param {string} [country] Only show organizations for the given country
     * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    public async getV4AppApiOrganizationList(cid: string, ids?: Array<string>, country?: string, strict?: boolean, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<TeamAffiliation & Logo>>> {
        return OrganizationsApiFp(this.configuration).getV4AppApiOrganizationList(cid, ids, country, strict, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Get all the organizations for this contest.
     * @param {string} cid The contest ID
     * @param {Array<string>} [ids] Filter the objects to get on this list of ID&#x27;s
     * @param {string} [country] Only show organizations for the given country
     * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    public async getV4AppApiOrganizationList1(cid: string, ids?: Array<string>, country?: string, strict?: boolean, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<TeamAffiliation & Logo>>> {
        return OrganizationsApiFp(this.configuration).getV4AppApiOrganizationList1(cid, ids, country, strict, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Get the logo for the given organization.
     * @param {string} id The ID of the entity
     * @param {string} cid The contest ID
     * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    public async getV4AppApiOrganizationLogo(id: string, cid: string, strict?: boolean, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return OrganizationsApiFp(this.configuration).getV4AppApiOrganizationLogo(id, cid, strict, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Get the given organization for this contest.
     * @param {string} id The ID of the entity
     * @param {string} cid The contest ID
     * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    public async getV4AppApiOrganizationSingle(id: string, cid: string, strict?: boolean, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20010>> {
        return OrganizationsApiFp(this.configuration).getV4AppApiOrganizationSingle(id, cid, strict, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Get the given organization for this contest.
     * @param {string} id The ID of the entity
     * @param {string} cid The contest ID
     * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    public async getV4AppApiOrganizationSingle1(id: string, cid: string, strict?: boolean, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20010>> {
        return OrganizationsApiFp(this.configuration).getV4AppApiOrganizationSingle1(id, cid, strict, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Get the logo for the given organization.
     * @param {string} id The ID of the entity
     * @param {string} cid The contest ID
     * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    public async getV4OrganizationLogo(id: string, cid: string, strict?: boolean, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return OrganizationsApiFp(this.configuration).getV4OrganizationLogo(id, cid, strict, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Add a new organization.
     * @param {string} shortname 
     * @param {string} id 
     * @param {string} icpc_id 
     * @param {string} name 
     * @param {string} formal_name 
     * @param {string} country 
     * @param {string} cid The contest ID
     * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    public async postV4AppApiOrganizationAddForm(shortname: string, id: string, icpc_id: string, name: string, formal_name: string, country: string, cid: string, strict?: boolean, options?: AxiosRequestConfig) : Promise<AxiosResponse<TeamAffiliation>> {
        return OrganizationsApiFp(this.configuration).postV4AppApiOrganizationAddForm(shortname, id, icpc_id, name, formal_name, country, cid, strict, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Add a new organization.
     * @param {TeamAffiliation} body 
     * @param {string} cid The contest ID
     * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    public async postV4AppApiOrganizationAdd(body: TeamAffiliation, cid: string, strict?: boolean, options?: AxiosRequestConfig) : Promise<AxiosResponse<TeamAffiliation>> {
        return OrganizationsApiFp(this.configuration).postV4AppApiOrganizationAdd(body, cid, strict, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Add a new organization.
     * @param {string} shortname 
     * @param {string} id 
     * @param {string} icpc_id 
     * @param {string} name 
     * @param {string} formal_name 
     * @param {string} country 
     * @param {string} cid The contest ID
     * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    public async postV4AppApiOrganizationAdd1Form(shortname: string, id: string, icpc_id: string, name: string, formal_name: string, country: string, cid: string, strict?: boolean, options?: AxiosRequestConfig) : Promise<AxiosResponse<TeamAffiliation>> {
        return OrganizationsApiFp(this.configuration).postV4AppApiOrganizationAdd1Form(shortname, id, icpc_id, name, formal_name, country, cid, strict, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Add a new organization.
     * @param {TeamAffiliation} body 
     * @param {string} cid The contest ID
     * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    public async postV4AppApiOrganizationAdd1(body: TeamAffiliation, cid: string, strict?: boolean, options?: AxiosRequestConfig) : Promise<AxiosResponse<TeamAffiliation>> {
        return OrganizationsApiFp(this.configuration).postV4AppApiOrganizationAdd1(body, cid, strict, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Set the logo for the given organization.
     * @param {Blob} logo 
     * @param {string} id The ID of the entity
     * @param {string} cid The contest ID
     * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    public async postV4AppApiOrganizationSetlogoForm(logo: Blob, id: string, cid: string, strict?: boolean, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return OrganizationsApiFp(this.configuration).postV4AppApiOrganizationSetlogoForm(logo, id, cid, strict, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Set the logo for the given organization.
     * @param {Blob} logo 
     * @param {string} id The ID of the entity
     * @param {string} cid The contest ID
     * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    public async postV4PostOrganizationLogoForm(logo: Blob, id: string, cid: string, strict?: boolean, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return OrganizationsApiFp(this.configuration).postV4PostOrganizationLogoForm(logo, id, cid, strict, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Set the logo for the given organization.
     * @param {Blob} logo 
     * @param {string} id The ID of the entity
     * @param {string} cid The contest ID
     * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    public async putV4AppApiOrganizationSetlogo1Form(logo: Blob, id: string, cid: string, strict?: boolean, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return OrganizationsApiFp(this.configuration).putV4AppApiOrganizationSetlogo1Form(logo, id, cid, strict, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Set the logo for the given organization.
     * @param {Blob} logo 
     * @param {string} id The ID of the entity
     * @param {string} cid The contest ID
     * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    public async putV4PutOrganizationLogoForm(logo: Blob, id: string, cid: string, strict?: boolean, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return OrganizationsApiFp(this.configuration).putV4PutOrganizationLogoForm(logo, id, cid, strict, options).then((request) => request(this.axios, this.basePath));
    }
}
