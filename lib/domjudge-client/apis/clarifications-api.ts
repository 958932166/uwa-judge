/* tslint:disable */
/* eslint-disable */
/**
 * DOMjudge
 * DOMjudge API v4
 *
 * OpenAPI spec version: 8.2.2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { Clarification } from '../models';
import { ClarificationPost } from '../models';
import { InlineResponse400 } from '../models';
/**
 * ClarificationsApi - axios parameter creator
 * @export
 */
export const ClarificationsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Note that we restrict the returned clarifications in the query builder.
         * @summary Get all the clarifications for this contest.
         * @param {string} cid The contest ID
         * @param {Array<string>} [ids] Filter the objects to get on this list of ID&#x27;s
         * @param {string} [problem] Only show clarifications for the given problem
         * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getV4AppApiClarificationList: async (cid: string, ids?: Array<string>, problem?: string, strict?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cid' is not null or undefined
            if (cid === null || cid === undefined) {
                throw new RequiredError('cid','Required parameter cid was null or undefined when calling getV4AppApiClarificationList.');
            }
            const localVarPath = `/api/v4/contests/{cid}/clarifications`
                .replace(`{${"cid"}}`, encodeURIComponent(String(cid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }

            if (ids) {
                localVarQueryParameter['ids[]'] = ids;
            }

            if (problem !== undefined) {
                localVarQueryParameter['problem'] = problem;
            }

            if (strict !== undefined) {
                localVarQueryParameter['strict'] = strict;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Note that we restrict the returned clarifications based on the user's role. Admin and api_reader get everything, anonymous gets only general clarifications, team user gets general clarifications plus those sent from or to the team.
         * @summary Get the given clarifications for this contest.
         * @param {string} id The ID of the entity
         * @param {string} cid The contest ID
         * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getV4AppApiClarificationSingle: async (id: string, cid: string, strict?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getV4AppApiClarificationSingle.');
            }
            // verify required parameter 'cid' is not null or undefined
            if (cid === null || cid === undefined) {
                throw new RequiredError('cid','Required parameter cid was null or undefined when calling getV4AppApiClarificationSingle.');
            }
            const localVarPath = `/api/v4/contests/{cid}/clarifications/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"cid"}}`, encodeURIComponent(String(cid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }

            if (strict !== undefined) {
                localVarQueryParameter['strict'] = strict;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Add a clarification to this contest
         * @param {string} text 
         * @param {string} problem_id 
         * @param {string} reply_to_id 
         * @param {string} from_team_id 
         * @param {string} to_team_id 
         * @param {Date} time 
         * @param {string} id 
         * @param {string} cid The contest ID
         * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postV4AppApiClarificationAddForm: async (text: string, problem_id: string, reply_to_id: string, from_team_id: string, to_team_id: string, time: Date, id: string, cid: string, strict?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'text' is not null or undefined
            if (text === null || text === undefined) {
                throw new RequiredError('text','Required parameter text was null or undefined when calling postV4AppApiClarificationAddForm.');
            }
            // verify required parameter 'problem_id' is not null or undefined
            if (problem_id === null || problem_id === undefined) {
                throw new RequiredError('problem_id','Required parameter problem_id was null or undefined when calling postV4AppApiClarificationAddForm.');
            }
            // verify required parameter 'reply_to_id' is not null or undefined
            if (reply_to_id === null || reply_to_id === undefined) {
                throw new RequiredError('reply_to_id','Required parameter reply_to_id was null or undefined when calling postV4AppApiClarificationAddForm.');
            }
            // verify required parameter 'from_team_id' is not null or undefined
            if (from_team_id === null || from_team_id === undefined) {
                throw new RequiredError('from_team_id','Required parameter from_team_id was null or undefined when calling postV4AppApiClarificationAddForm.');
            }
            // verify required parameter 'to_team_id' is not null or undefined
            if (to_team_id === null || to_team_id === undefined) {
                throw new RequiredError('to_team_id','Required parameter to_team_id was null or undefined when calling postV4AppApiClarificationAddForm.');
            }
            // verify required parameter 'time' is not null or undefined
            if (time === null || time === undefined) {
                throw new RequiredError('time','Required parameter time was null or undefined when calling postV4AppApiClarificationAddForm.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling postV4AppApiClarificationAddForm.');
            }
            // verify required parameter 'cid' is not null or undefined
            if (cid === null || cid === undefined) {
                throw new RequiredError('cid','Required parameter cid was null or undefined when calling postV4AppApiClarificationAddForm.');
            }
            const localVarPath = `/api/v4/contests/{cid}/clarifications`
                .replace(`{${"cid"}}`, encodeURIComponent(String(cid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new FormData();

            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }

            if (strict !== undefined) {
                localVarQueryParameter['strict'] = strict;
            }


            if (text !== undefined) { 
                localVarFormParams.append('text', text as any);
            }

            if (problem_id !== undefined) { 
                localVarFormParams.append('problem_id', problem_id as any);
            }

            if (reply_to_id !== undefined) { 
                localVarFormParams.append('reply_to_id', reply_to_id as any);
            }

            if (from_team_id !== undefined) { 
                localVarFormParams.append('from_team_id', from_team_id as any);
            }

            if (to_team_id !== undefined) { 
                localVarFormParams.append('to_team_id', to_team_id as any);
            }

            if (time !== undefined) { 
                localVarFormParams.append('time', time as any);
            }

            if (id !== undefined) { 
                localVarFormParams.append('id', id as any);
            }

            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Add a clarification to this contest
         * @param {ClarificationPost} body 
         * @param {string} cid The contest ID
         * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postV4AppApiClarificationAdd: async (body: ClarificationPost, cid: string, strict?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling postV4AppApiClarificationAdd.');
            }
            // verify required parameter 'cid' is not null or undefined
            if (cid === null || cid === undefined) {
                throw new RequiredError('cid','Required parameter cid was null or undefined when calling postV4AppApiClarificationAdd.');
            }
            const localVarPath = `/api/v4/contests/{cid}/clarifications`
                .replace(`{${"cid"}}`, encodeURIComponent(String(cid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new FormData();

            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }

            if (strict !== undefined) {
                localVarQueryParameter['strict'] = strict;
            }

            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Add a clarification to this contest
         * @param {string} text 
         * @param {string} problem_id 
         * @param {string} reply_to_id 
         * @param {string} from_team_id 
         * @param {string} to_team_id 
         * @param {Date} time 
         * @param {string} id2 
         * @param {string} cid The contest ID
         * @param {string} id 
         * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putV4AppApiClarificationAdd1Form: async (text: string, problem_id: string, reply_to_id: string, from_team_id: string, to_team_id: string, time: Date, id2: string, cid: string, id: string, strict?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'text' is not null or undefined
            if (text === null || text === undefined) {
                throw new RequiredError('text','Required parameter text was null or undefined when calling putV4AppApiClarificationAdd1Form.');
            }
            // verify required parameter 'problem_id' is not null or undefined
            if (problem_id === null || problem_id === undefined) {
                throw new RequiredError('problem_id','Required parameter problem_id was null or undefined when calling putV4AppApiClarificationAdd1Form.');
            }
            // verify required parameter 'reply_to_id' is not null or undefined
            if (reply_to_id === null || reply_to_id === undefined) {
                throw new RequiredError('reply_to_id','Required parameter reply_to_id was null or undefined when calling putV4AppApiClarificationAdd1Form.');
            }
            // verify required parameter 'from_team_id' is not null or undefined
            if (from_team_id === null || from_team_id === undefined) {
                throw new RequiredError('from_team_id','Required parameter from_team_id was null or undefined when calling putV4AppApiClarificationAdd1Form.');
            }
            // verify required parameter 'to_team_id' is not null or undefined
            if (to_team_id === null || to_team_id === undefined) {
                throw new RequiredError('to_team_id','Required parameter to_team_id was null or undefined when calling putV4AppApiClarificationAdd1Form.');
            }
            // verify required parameter 'time' is not null or undefined
            if (time === null || time === undefined) {
                throw new RequiredError('time','Required parameter time was null or undefined when calling putV4AppApiClarificationAdd1Form.');
            }
            // verify required parameter 'id2' is not null or undefined
            if (id2 === null || id2 === undefined) {
                throw new RequiredError('id2','Required parameter id2 was null or undefined when calling putV4AppApiClarificationAdd1Form.');
            }
            // verify required parameter 'cid' is not null or undefined
            if (cid === null || cid === undefined) {
                throw new RequiredError('cid','Required parameter cid was null or undefined when calling putV4AppApiClarificationAdd1Form.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling putV4AppApiClarificationAdd1Form.');
            }
            const localVarPath = `/api/v4/contests/{cid}/clarifications/{id}`
                .replace(`{${"cid"}}`, encodeURIComponent(String(cid)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new FormData();

            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }

            if (strict !== undefined) {
                localVarQueryParameter['strict'] = strict;
            }


            if (text !== undefined) { 
                localVarFormParams.append('text', text as any);
            }

            if (problem_id !== undefined) { 
                localVarFormParams.append('problem_id', problem_id as any);
            }

            if (reply_to_id !== undefined) { 
                localVarFormParams.append('reply_to_id', reply_to_id as any);
            }

            if (from_team_id !== undefined) { 
                localVarFormParams.append('from_team_id', from_team_id as any);
            }

            if (to_team_id !== undefined) { 
                localVarFormParams.append('to_team_id', to_team_id as any);
            }

            if (time !== undefined) { 
                localVarFormParams.append('time', time as any);
            }

            if (id !== undefined) { 
                localVarFormParams.append('id', id as any);
            }

            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Add a clarification to this contest
         * @param {ClarificationPost} body 
         * @param {string} cid The contest ID
         * @param {string} id 
         * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putV4AppApiClarificationAdd1: async (body: ClarificationPost, cid: string, id: string, strict?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling putV4AppApiClarificationAdd1.');
            }
            // verify required parameter 'cid' is not null or undefined
            if (cid === null || cid === undefined) {
                throw new RequiredError('cid','Required parameter cid was null or undefined when calling putV4AppApiClarificationAdd1.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling putV4AppApiClarificationAdd1.');
            }
            const localVarPath = `/api/v4/contests/{cid}/clarifications/{id}`
                .replace(`{${"cid"}}`, encodeURIComponent(String(cid)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new FormData();

            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }

            if (strict !== undefined) {
                localVarQueryParameter['strict'] = strict;
            }

            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ClarificationsApi - functional programming interface
 * @export
 */
export const ClarificationsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Note that we restrict the returned clarifications in the query builder.
         * @summary Get all the clarifications for this contest.
         * @param {string} cid The contest ID
         * @param {Array<string>} [ids] Filter the objects to get on this list of ID&#x27;s
         * @param {string} [problem] Only show clarifications for the given problem
         * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getV4AppApiClarificationList(cid: string, ids?: Array<string>, problem?: string, strict?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<Clarification>>>> {
            const localVarAxiosArgs = await ClarificationsApiAxiosParamCreator(configuration).getV4AppApiClarificationList(cid, ids, problem, strict, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Note that we restrict the returned clarifications based on the user's role. Admin and api_reader get everything, anonymous gets only general clarifications, team user gets general clarifications plus those sent from or to the team.
         * @summary Get the given clarifications for this contest.
         * @param {string} id The ID of the entity
         * @param {string} cid The contest ID
         * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getV4AppApiClarificationSingle(id: string, cid: string, strict?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Clarification>>> {
            const localVarAxiosArgs = await ClarificationsApiAxiosParamCreator(configuration).getV4AppApiClarificationSingle(id, cid, strict, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Add a clarification to this contest
         * @param {string} text 
         * @param {string} problem_id 
         * @param {string} reply_to_id 
         * @param {string} from_team_id 
         * @param {string} to_team_id 
         * @param {Date} time 
         * @param {string} id 
         * @param {string} cid The contest ID
         * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postV4AppApiClarificationAddForm(text: string, problem_id: string, reply_to_id: string, from_team_id: string, to_team_id: string, time: Date, id: string, cid: string, strict?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Clarification>>> {
            const localVarAxiosArgs = await ClarificationsApiAxiosParamCreator(configuration).postV4AppApiClarificationAddForm(text, problem_id, reply_to_id, from_team_id, to_team_id, time, id, cid, strict, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Add a clarification to this contest
         * @param {ClarificationPost} body 
         * @param {string} cid The contest ID
         * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postV4AppApiClarificationAdd(body: ClarificationPost, cid: string, strict?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Clarification>>> {
            const localVarAxiosArgs = await ClarificationsApiAxiosParamCreator(configuration).postV4AppApiClarificationAdd(body, cid, strict, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Add a clarification to this contest
         * @param {string} text 
         * @param {string} problem_id 
         * @param {string} reply_to_id 
         * @param {string} from_team_id 
         * @param {string} to_team_id 
         * @param {Date} time 
         * @param {string} id2 
         * @param {string} cid The contest ID
         * @param {string} id 
         * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putV4AppApiClarificationAdd1Form(text: string, problem_id: string, reply_to_id: string, from_team_id: string, to_team_id: string, time: Date, id2: string, cid: string, id: string, strict?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Clarification>>> {
            const localVarAxiosArgs = await ClarificationsApiAxiosParamCreator(configuration).putV4AppApiClarificationAdd1Form(text, problem_id, reply_to_id, from_team_id, to_team_id, time, id2, cid, id, strict, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Add a clarification to this contest
         * @param {ClarificationPost} body 
         * @param {string} cid The contest ID
         * @param {string} id 
         * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putV4AppApiClarificationAdd1(body: ClarificationPost, cid: string, id: string, strict?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Clarification>>> {
            const localVarAxiosArgs = await ClarificationsApiAxiosParamCreator(configuration).putV4AppApiClarificationAdd1(body, cid, id, strict, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * ClarificationsApi - factory interface
 * @export
 */
export const ClarificationsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Note that we restrict the returned clarifications in the query builder.
         * @summary Get all the clarifications for this contest.
         * @param {string} cid The contest ID
         * @param {Array<string>} [ids] Filter the objects to get on this list of ID&#x27;s
         * @param {string} [problem] Only show clarifications for the given problem
         * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getV4AppApiClarificationList(cid: string, ids?: Array<string>, problem?: string, strict?: boolean, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<Clarification>>> {
            return ClarificationsApiFp(configuration).getV4AppApiClarificationList(cid, ids, problem, strict, options).then((request) => request(axios, basePath));
        },
        /**
         * Note that we restrict the returned clarifications based on the user's role. Admin and api_reader get everything, anonymous gets only general clarifications, team user gets general clarifications plus those sent from or to the team.
         * @summary Get the given clarifications for this contest.
         * @param {string} id The ID of the entity
         * @param {string} cid The contest ID
         * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getV4AppApiClarificationSingle(id: string, cid: string, strict?: boolean, options?: AxiosRequestConfig): Promise<AxiosResponse<Clarification>> {
            return ClarificationsApiFp(configuration).getV4AppApiClarificationSingle(id, cid, strict, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Add a clarification to this contest
         * @param {string} text 
         * @param {string} problem_id 
         * @param {string} reply_to_id 
         * @param {string} from_team_id 
         * @param {string} to_team_id 
         * @param {Date} time 
         * @param {string} id 
         * @param {string} cid The contest ID
         * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postV4AppApiClarificationAddForm(text: string, problem_id: string, reply_to_id: string, from_team_id: string, to_team_id: string, time: Date, id: string, cid: string, strict?: boolean, options?: AxiosRequestConfig): Promise<AxiosResponse<Clarification>> {
            return ClarificationsApiFp(configuration).postV4AppApiClarificationAddForm(text, problem_id, reply_to_id, from_team_id, to_team_id, time, id, cid, strict, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Add a clarification to this contest
         * @param {ClarificationPost} body 
         * @param {string} cid The contest ID
         * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postV4AppApiClarificationAdd(body: ClarificationPost, cid: string, strict?: boolean, options?: AxiosRequestConfig): Promise<AxiosResponse<Clarification>> {
            return ClarificationsApiFp(configuration).postV4AppApiClarificationAdd(body, cid, strict, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Add a clarification to this contest
         * @param {string} text 
         * @param {string} problem_id 
         * @param {string} reply_to_id 
         * @param {string} from_team_id 
         * @param {string} to_team_id 
         * @param {Date} time 
         * @param {string} id2 
         * @param {string} cid The contest ID
         * @param {string} id 
         * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putV4AppApiClarificationAdd1Form(text: string, problem_id: string, reply_to_id: string, from_team_id: string, to_team_id: string, time: Date, id2: string, cid: string, id: string, strict?: boolean, options?: AxiosRequestConfig): Promise<AxiosResponse<Clarification>> {
            return ClarificationsApiFp(configuration).putV4AppApiClarificationAdd1Form(text, problem_id, reply_to_id, from_team_id, to_team_id, time, id2, cid, id, strict, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Add a clarification to this contest
         * @param {ClarificationPost} body 
         * @param {string} cid The contest ID
         * @param {string} id 
         * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putV4AppApiClarificationAdd1(body: ClarificationPost, cid: string, id: string, strict?: boolean, options?: AxiosRequestConfig): Promise<AxiosResponse<Clarification>> {
            return ClarificationsApiFp(configuration).putV4AppApiClarificationAdd1(body, cid, id, strict, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ClarificationsApi - object-oriented interface
 * @export
 * @class ClarificationsApi
 * @extends {BaseAPI}
 */
export class ClarificationsApi extends BaseAPI {
    /**
     * Note that we restrict the returned clarifications in the query builder.
     * @summary Get all the clarifications for this contest.
     * @param {string} cid The contest ID
     * @param {Array<string>} [ids] Filter the objects to get on this list of ID&#x27;s
     * @param {string} [problem] Only show clarifications for the given problem
     * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClarificationsApi
     */
    public async getV4AppApiClarificationList(cid: string, ids?: Array<string>, problem?: string, strict?: boolean, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<Clarification>>> {
        return ClarificationsApiFp(this.configuration).getV4AppApiClarificationList(cid, ids, problem, strict, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Note that we restrict the returned clarifications based on the user's role. Admin and api_reader get everything, anonymous gets only general clarifications, team user gets general clarifications plus those sent from or to the team.
     * @summary Get the given clarifications for this contest.
     * @param {string} id The ID of the entity
     * @param {string} cid The contest ID
     * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClarificationsApi
     */
    public async getV4AppApiClarificationSingle(id: string, cid: string, strict?: boolean, options?: AxiosRequestConfig) : Promise<AxiosResponse<Clarification>> {
        return ClarificationsApiFp(this.configuration).getV4AppApiClarificationSingle(id, cid, strict, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Add a clarification to this contest
     * @param {string} text 
     * @param {string} problem_id 
     * @param {string} reply_to_id 
     * @param {string} from_team_id 
     * @param {string} to_team_id 
     * @param {Date} time 
     * @param {string} id 
     * @param {string} cid The contest ID
     * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClarificationsApi
     */
    public async postV4AppApiClarificationAddForm(text: string, problem_id: string, reply_to_id: string, from_team_id: string, to_team_id: string, time: Date, id: string, cid: string, strict?: boolean, options?: AxiosRequestConfig) : Promise<AxiosResponse<Clarification>> {
        return ClarificationsApiFp(this.configuration).postV4AppApiClarificationAddForm(text, problem_id, reply_to_id, from_team_id, to_team_id, time, id, cid, strict, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Add a clarification to this contest
     * @param {ClarificationPost} body 
     * @param {string} cid The contest ID
     * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClarificationsApi
     */
    public async postV4AppApiClarificationAdd(body: ClarificationPost, cid: string, strict?: boolean, options?: AxiosRequestConfig) : Promise<AxiosResponse<Clarification>> {
        return ClarificationsApiFp(this.configuration).postV4AppApiClarificationAdd(body, cid, strict, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Add a clarification to this contest
     * @param {string} text 
     * @param {string} problem_id 
     * @param {string} reply_to_id 
     * @param {string} from_team_id 
     * @param {string} to_team_id 
     * @param {Date} time 
     * @param {string} id2 
     * @param {string} cid The contest ID
     * @param {string} id 
     * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClarificationsApi
     */
    public async putV4AppApiClarificationAdd1Form(text: string, problem_id: string, reply_to_id: string, from_team_id: string, to_team_id: string, time: Date, id2: string, cid: string, id: string, strict?: boolean, options?: AxiosRequestConfig) : Promise<AxiosResponse<Clarification>> {
        return ClarificationsApiFp(this.configuration).putV4AppApiClarificationAdd1Form(text, problem_id, reply_to_id, from_team_id, to_team_id, time, id2, cid, id, strict, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Add a clarification to this contest
     * @param {ClarificationPost} body 
     * @param {string} cid The contest ID
     * @param {string} id 
     * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClarificationsApi
     */
    public async putV4AppApiClarificationAdd1(body: ClarificationPost, cid: string, id: string, strict?: boolean, options?: AxiosRequestConfig) : Promise<AxiosResponse<Clarification>> {
        return ClarificationsApiFp(this.configuration).putV4AppApiClarificationAdd1(body, cid, id, strict, options).then((request) => request(this.axios, this.basePath));
    }
}
