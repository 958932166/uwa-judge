/* tslint:disable */
/* eslint-disable */
/**
 * DOMjudge
 * DOMjudge API v4
 *
 * OpenAPI spec version: 8.2.2
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import globalAxios, {
  AxiosResponse,
  AxiosInstance,
  AxiosRequestConfig,
} from "@/lib/axios";
import { Configuration } from "../configuration";
// Some imports not used depending on template conditions
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
} from "../base";
import { InlineResponse2008 } from "../models";
import { InlineResponse400 } from "../models";
import { Judgehost } from "../models";
/**
 * JudgehostsApi - axios parameter creator
 * @export
 */
export const JudgehostsApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     *
     * @summary Get files for a given type and id.
     * @param {string} type The type to
     * @param {string} id The ID of the entity
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getV4AppApiJudgehostGetfiles: async (
      type: string,
      id: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'type' is not null or undefined
      if (type === null || type === undefined) {
        throw new RequiredError(
          "type",
          "Required parameter type was null or undefined when calling getV4AppApiJudgehostGetfiles.",
        );
      }
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          "id",
          "Required parameter id was null or undefined when calling getV4AppApiJudgehostGetfiles.",
        );
      }
      const localVarPath = `/api/v4/judgehosts/get_files/{type}/{id}`
        .replace(`{${"type"}}`, encodeURIComponent(String(type)))
        .replace(`{${"id"}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions: AxiosRequestConfig = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication basicAuth required
      // http basic authentication required
      if (configuration && (configuration.username || configuration.password)) {
        localVarRequestOptions["auth"] = {
          username: configuration.username,
          password: configuration.password,
        };
      }

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.params) {
        query.set(key, options.params[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get judgehosts.
     * @param {string} [hostname] Only show the judgehost with the given hostname
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getV4AppApiJudgehostGetjudgehosts: async (
      hostname?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v4/judgehosts`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions: AxiosRequestConfig = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication basicAuth required
      // http basic authentication required
      if (configuration && (configuration.username || configuration.password)) {
        localVarRequestOptions["auth"] = {
          username: configuration.username,
          password: configuration.password,
        };
      }

      if (hostname !== undefined) {
        localVarQueryParameter["hostname"] = hostname;
      }

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.params) {
        query.set(key, options.params[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Add back debug info.
     * @param {string} hostname The hostname of the judgehost that wants to add the debug info
     * @param {number} judgeTaskId The ID of the judgetask to add
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postV4AppApiJudgehostAdddebuginfo: async (
      hostname: string,
      judgeTaskId: number,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'hostname' is not null or undefined
      if (hostname === null || hostname === undefined) {
        throw new RequiredError(
          "hostname",
          "Required parameter hostname was null or undefined when calling postV4AppApiJudgehostAdddebuginfo.",
        );
      }
      // verify required parameter 'judgeTaskId' is not null or undefined
      if (judgeTaskId === null || judgeTaskId === undefined) {
        throw new RequiredError(
          "judgeTaskId",
          "Required parameter judgeTaskId was null or undefined when calling postV4AppApiJudgehostAdddebuginfo.",
        );
      }
      const localVarPath =
        `/api/v4/judgehosts/add-debug-info/{hostname}/{judgeTaskId}`
          .replace(`{${"hostname"}}`, encodeURIComponent(String(hostname)))
          .replace(
            `{${"judgeTaskId"}}`,
            encodeURIComponent(String(judgeTaskId)),
          );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions: AxiosRequestConfig = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication basicAuth required
      // http basic authentication required
      if (configuration && (configuration.username || configuration.password)) {
        localVarRequestOptions["auth"] = {
          username: configuration.username,
          password: configuration.password,
        };
      }

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.params) {
        query.set(key, options.params[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Add one JudgingRun. When relevant, finalize the judging.
     * @param {string} runresult
     * @param {number} runtime
     * @param {string} output_run
     * @param {string} output_diff
     * @param {string} output_error
     * @param {string} output_system
     * @param {string} metadata
     * @param {string} hostname The hostname of the judgehost that wants to add the judging run
     * @param {number} judgeTaskId The ID of the judgetask to add
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postV4AppApiJudgehostAddjudgingrunForm: async (
      runresult: string,
      runtime: number,
      output_run: string,
      output_diff: string,
      output_error: string,
      output_system: string,
      metadata: string,
      hostname: string,
      judgeTaskId: number,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'runresult' is not null or undefined
      if (runresult === null || runresult === undefined) {
        throw new RequiredError(
          "runresult",
          "Required parameter runresult was null or undefined when calling postV4AppApiJudgehostAddjudgingrunForm.",
        );
      }
      // verify required parameter 'runtime' is not null or undefined
      if (runtime === null || runtime === undefined) {
        throw new RequiredError(
          "runtime",
          "Required parameter runtime was null or undefined when calling postV4AppApiJudgehostAddjudgingrunForm.",
        );
      }
      // verify required parameter 'output_run' is not null or undefined
      if (output_run === null || output_run === undefined) {
        throw new RequiredError(
          "output_run",
          "Required parameter output_run was null or undefined when calling postV4AppApiJudgehostAddjudgingrunForm.",
        );
      }
      // verify required parameter 'output_diff' is not null or undefined
      if (output_diff === null || output_diff === undefined) {
        throw new RequiredError(
          "output_diff",
          "Required parameter output_diff was null or undefined when calling postV4AppApiJudgehostAddjudgingrunForm.",
        );
      }
      // verify required parameter 'output_error' is not null or undefined
      if (output_error === null || output_error === undefined) {
        throw new RequiredError(
          "output_error",
          "Required parameter output_error was null or undefined when calling postV4AppApiJudgehostAddjudgingrunForm.",
        );
      }
      // verify required parameter 'output_system' is not null or undefined
      if (output_system === null || output_system === undefined) {
        throw new RequiredError(
          "output_system",
          "Required parameter output_system was null or undefined when calling postV4AppApiJudgehostAddjudgingrunForm.",
        );
      }
      // verify required parameter 'metadata' is not null or undefined
      if (metadata === null || metadata === undefined) {
        throw new RequiredError(
          "metadata",
          "Required parameter metadata was null or undefined when calling postV4AppApiJudgehostAddjudgingrunForm.",
        );
      }
      // verify required parameter 'hostname' is not null or undefined
      if (hostname === null || hostname === undefined) {
        throw new RequiredError(
          "hostname",
          "Required parameter hostname was null or undefined when calling postV4AppApiJudgehostAddjudgingrunForm.",
        );
      }
      // verify required parameter 'judgeTaskId' is not null or undefined
      if (judgeTaskId === null || judgeTaskId === undefined) {
        throw new RequiredError(
          "judgeTaskId",
          "Required parameter judgeTaskId was null or undefined when calling postV4AppApiJudgehostAddjudgingrunForm.",
        );
      }
      const localVarPath =
        `/api/v4/judgehosts/add-judging-run/{hostname}/{judgeTaskId}`
          .replace(`{${"hostname"}}`, encodeURIComponent(String(hostname)))
          .replace(
            `{${"judgeTaskId"}}`,
            encodeURIComponent(String(judgeTaskId)),
          );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions: AxiosRequestConfig = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;
      const localVarFormParams = new URLSearchParams();

      // authentication basicAuth required
      // http basic authentication required
      if (configuration && (configuration.username || configuration.password)) {
        localVarRequestOptions["auth"] = {
          username: configuration.username,
          password: configuration.password,
        };
      }

      if (runresult !== undefined) {
        localVarFormParams.set("runresult", runresult as any);
      }

      if (runtime !== undefined) {
        localVarFormParams.set("runtime", runtime as any);
      }

      if (output_run !== undefined) {
        localVarFormParams.set("output_run", output_run as any);
      }

      if (output_diff !== undefined) {
        localVarFormParams.set("output_diff", output_diff as any);
      }

      if (output_error !== undefined) {
        localVarFormParams.set("output_error", output_error as any);
      }

      if (output_system !== undefined) {
        localVarFormParams.set("output_system", output_system as any);
      }

      if (metadata !== undefined) {
        localVarFormParams.set("metadata", metadata as any);
      }
      localVarHeaderParameter["Content-Type"] =
        "application/x-www-form-urlencoded";
      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.params) {
        query.set(key, options.params[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = localVarFormParams.toString();

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     * Also restarts (and returns) unfinished judgings.
     * @summary Add a new judgehost to the list of judgehosts.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postV4AppApiJudgehostCreatejudgehost: async (
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v4/judgehosts`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions: AxiosRequestConfig = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication basicAuth required
      // http basic authentication required
      if (configuration && (configuration.username || configuration.password)) {
        localVarRequestOptions["auth"] = {
          username: configuration.username,
          password: configuration.password,
        };
      }

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.params) {
        query.set(key, options.params[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Fetch work tasks.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postV4AppApiJudgehostGetjudgetasks: async (
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v4/judgehosts/fetch-work`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions: AxiosRequestConfig = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication basicAuth required
      // http basic authentication required
      if (configuration && (configuration.username || configuration.password)) {
        localVarRequestOptions["auth"] = {
          username: configuration.username,
          password: configuration.password,
        };
      }

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.params) {
        query.set(key, options.params[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Internal error reporting (back from judgehost).
     * @param {string} description
     * @param {string} judgehostlog
     * @param {string} disabled
     * @param {number} judgetaskid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postV4AppApiJudgehostInternalerrorForm: async (
      description: string,
      judgehostlog: string,
      disabled: string,
      judgetaskid: number,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'description' is not null or undefined
      if (description === null || description === undefined) {
        throw new RequiredError(
          "description",
          "Required parameter description was null or undefined when calling postV4AppApiJudgehostInternalerrorForm.",
        );
      }
      // verify required parameter 'judgehostlog' is not null or undefined
      if (judgehostlog === null || judgehostlog === undefined) {
        throw new RequiredError(
          "judgehostlog",
          "Required parameter judgehostlog was null or undefined when calling postV4AppApiJudgehostInternalerrorForm.",
        );
      }
      // verify required parameter 'disabled' is not null or undefined
      if (disabled === null || disabled === undefined) {
        throw new RequiredError(
          "disabled",
          "Required parameter disabled was null or undefined when calling postV4AppApiJudgehostInternalerrorForm.",
        );
      }
      // verify required parameter 'judgetaskid' is not null or undefined
      if (judgetaskid === null || judgetaskid === undefined) {
        throw new RequiredError(
          "judgetaskid",
          "Required parameter judgetaskid was null or undefined when calling postV4AppApiJudgehostInternalerrorForm.",
        );
      }
      const localVarPath = `/api/v4/judgehosts/internal-error`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions: AxiosRequestConfig = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;
      const localVarFormParams = new URLSearchParams();

      // authentication basicAuth required
      // http basic authentication required
      if (configuration && (configuration.username || configuration.password)) {
        localVarRequestOptions["auth"] = {
          username: configuration.username,
          password: configuration.password,
        };
      }

      if (description !== undefined) {
        localVarFormParams.set("description", description as any);
      }

      if (judgehostlog !== undefined) {
        localVarFormParams.set("judgehostlog", judgehostlog as any);
      }

      if (disabled !== undefined) {
        localVarFormParams.set("disabled", disabled as any);
      }

      if (judgetaskid !== undefined) {
        localVarFormParams.set("judgetaskid", judgetaskid as any);
      }
      localVarHeaderParameter["Content-Type"] =
        "application/x-www-form-urlencoded";
      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.params) {
        query.set(key, options.params[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = localVarFormParams.toString();

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Update the configuration of the given judgehost.
     * @param {boolean} enabled
     * @param {string} hostname The hostname of the judgehost to update
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putV4AppApiJudgehostUpdatejudgehostForm: async (
      enabled: boolean,
      hostname: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'enabled' is not null or undefined
      if (enabled === null || enabled === undefined) {
        throw new RequiredError(
          "enabled",
          "Required parameter enabled was null or undefined when calling putV4AppApiJudgehostUpdatejudgehostForm.",
        );
      }
      // verify required parameter 'hostname' is not null or undefined
      if (hostname === null || hostname === undefined) {
        throw new RequiredError(
          "hostname",
          "Required parameter hostname was null or undefined when calling putV4AppApiJudgehostUpdatejudgehostForm.",
        );
      }
      const localVarPath = `/api/v4/judgehosts/{hostname}`.replace(
        `{${"hostname"}}`,
        encodeURIComponent(String(hostname)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions: AxiosRequestConfig = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;
      const localVarFormParams = new URLSearchParams();

      // authentication basicAuth required
      // http basic authentication required
      if (configuration && (configuration.username || configuration.password)) {
        localVarRequestOptions["auth"] = {
          username: configuration.username,
          password: configuration.password,
        };
      }

      if (enabled !== undefined) {
        localVarFormParams.set("enabled", enabled as any);
      }
      localVarHeaderParameter["Content-Type"] =
        "application/x-www-form-urlencoded";
      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.params) {
        query.set(key, options.params[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = localVarFormParams.toString();

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Update the given judging for the given judgehost.
     * @param {boolean} compile_success
     * @param {string} output_compile
     * @param {string} entry_point
     * @param {string} compile_metadata
     * @param {string} hostname The hostname of the judgehost that wants to update the judging
     * @param {number} judgetaskid The ID of the judgetask to update
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putV4AppApiJudgehostUpdatejudgingForm: async (
      compile_success: boolean,
      output_compile: string,
      entry_point: string,
      compile_metadata: string,
      hostname: string,
      judgetaskid: number,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'compile_success' is not null or undefined
      if (compile_success === null || compile_success === undefined) {
        throw new RequiredError(
          "compile_success",
          "Required parameter compile_success was null or undefined when calling putV4AppApiJudgehostUpdatejudgingForm.",
        );
      }
      // verify required parameter 'output_compile' is not null or undefined
      if (output_compile === null || output_compile === undefined) {
        throw new RequiredError(
          "output_compile",
          "Required parameter output_compile was null or undefined when calling putV4AppApiJudgehostUpdatejudgingForm.",
        );
      }
      // verify required parameter 'entry_point' is not null or undefined
      if (entry_point === null || entry_point === undefined) {
        throw new RequiredError(
          "entry_point",
          "Required parameter entry_point was null or undefined when calling putV4AppApiJudgehostUpdatejudgingForm.",
        );
      }
      // verify required parameter 'compile_metadata' is not null or undefined
      if (compile_metadata === null || compile_metadata === undefined) {
        throw new RequiredError(
          "compile_metadata",
          "Required parameter compile_metadata was null or undefined when calling putV4AppApiJudgehostUpdatejudgingForm.",
        );
      }
      // verify required parameter 'hostname' is not null or undefined
      if (hostname === null || hostname === undefined) {
        throw new RequiredError(
          "hostname",
          "Required parameter hostname was null or undefined when calling putV4AppApiJudgehostUpdatejudgingForm.",
        );
      }
      // verify required parameter 'judgetaskid' is not null or undefined
      if (judgetaskid === null || judgetaskid === undefined) {
        throw new RequiredError(
          "judgetaskid",
          "Required parameter judgetaskid was null or undefined when calling putV4AppApiJudgehostUpdatejudgingForm.",
        );
      }
      const localVarPath =
        `/api/v4/judgehosts/update-judging/{hostname}/{judgetaskid}`
          .replace(`{${"hostname"}}`, encodeURIComponent(String(hostname)))
          .replace(
            `{${"judgetaskid"}}`,
            encodeURIComponent(String(judgetaskid)),
          );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions: AxiosRequestConfig = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;
      const localVarFormParams = new URLSearchParams();

      // authentication basicAuth required
      // http basic authentication required
      if (configuration && (configuration.username || configuration.password)) {
        localVarRequestOptions["auth"] = {
          username: configuration.username,
          password: configuration.password,
        };
      }

      if (compile_success !== undefined) {
        localVarFormParams.set("compile_success", compile_success as any);
      }

      if (output_compile !== undefined) {
        localVarFormParams.set("output_compile", output_compile as any);
      }

      if (entry_point !== undefined) {
        localVarFormParams.set("entry_point", entry_point as any);
      }

      if (compile_metadata !== undefined) {
        localVarFormParams.set("compile_metadata", compile_metadata as any);
      }
      localVarHeaderParameter["Content-Type"] =
        "application/x-www-form-urlencoded";
      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.params) {
        query.set(key, options.params[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = localVarFormParams.toString();

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * JudgehostsApi - functional programming interface
 * @export
 */
export const JudgehostsApiFp = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary Get files for a given type and id.
     * @param {string} type The type to
     * @param {string} id The ID of the entity
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getV4AppApiJudgehostGetfiles(
      type: string,
      id: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>
    > {
      const localVarAxiosArgs = await JudgehostsApiAxiosParamCreator(
        configuration,
      ).getV4AppApiJudgehostGetfiles(type, id, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs: AxiosRequestConfig = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Get judgehosts.
     * @param {string} [hostname] Only show the judgehost with the given hostname
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getV4AppApiJudgehostGetjudgehosts(
      hostname?: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => Promise<AxiosResponse<Array<Judgehost>>>
    > {
      const localVarAxiosArgs = await JudgehostsApiAxiosParamCreator(
        configuration,
      ).getV4AppApiJudgehostGetjudgehosts(hostname, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs: AxiosRequestConfig = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Add back debug info.
     * @param {string} hostname The hostname of the judgehost that wants to add the debug info
     * @param {number} judgeTaskId The ID of the judgetask to add
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async postV4AppApiJudgehostAdddebuginfo(
      hostname: string,
      judgeTaskId: number,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>
    > {
      const localVarAxiosArgs = await JudgehostsApiAxiosParamCreator(
        configuration,
      ).postV4AppApiJudgehostAdddebuginfo(hostname, judgeTaskId, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs: AxiosRequestConfig = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Add one JudgingRun. When relevant, finalize the judging.
     * @param {string} runresult
     * @param {number} runtime
     * @param {string} output_run
     * @param {string} output_diff
     * @param {string} output_error
     * @param {string} output_system
     * @param {string} metadata
     * @param {string} hostname The hostname of the judgehost that wants to add the judging run
     * @param {number} judgeTaskId The ID of the judgetask to add
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async postV4AppApiJudgehostAddjudgingrunForm(
      runresult: string,
      runtime: number,
      output_run: string,
      output_diff: string,
      output_error: string,
      output_system: string,
      metadata: string,
      hostname: string,
      judgeTaskId: number,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>
    > {
      const localVarAxiosArgs = await JudgehostsApiAxiosParamCreator(
        configuration,
      ).postV4AppApiJudgehostAddjudgingrunForm(
        runresult,
        runtime,
        output_run,
        output_diff,
        output_error,
        output_system,
        metadata,
        hostname,
        judgeTaskId,
        options,
      );
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs: AxiosRequestConfig = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * Also restarts (and returns) unfinished judgings.
     * @summary Add a new judgehost to the list of judgehosts.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async postV4AppApiJudgehostCreatejudgehost(
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => Promise<AxiosResponse<Array<InlineResponse2008>>>
    > {
      const localVarAxiosArgs =
        await JudgehostsApiAxiosParamCreator(
          configuration,
        ).postV4AppApiJudgehostCreatejudgehost(options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs: AxiosRequestConfig = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Fetch work tasks.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async postV4AppApiJudgehostGetjudgetasks(
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>
    > {
      const localVarAxiosArgs =
        await JudgehostsApiAxiosParamCreator(
          configuration,
        ).postV4AppApiJudgehostGetjudgetasks(options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs: AxiosRequestConfig = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Internal error reporting (back from judgehost).
     * @param {string} description
     * @param {string} judgehostlog
     * @param {string} disabled
     * @param {number} judgetaskid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async postV4AppApiJudgehostInternalerrorForm(
      description: string,
      judgehostlog: string,
      disabled: string,
      judgetaskid: number,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => Promise<AxiosResponse<number>>
    > {
      const localVarAxiosArgs = await JudgehostsApiAxiosParamCreator(
        configuration,
      ).postV4AppApiJudgehostInternalerrorForm(
        description,
        judgehostlog,
        disabled,
        judgetaskid,
        options,
      );
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs: AxiosRequestConfig = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Update the configuration of the given judgehost.
     * @param {boolean} enabled
     * @param {string} hostname The hostname of the judgehost to update
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async putV4AppApiJudgehostUpdatejudgehostForm(
      enabled: boolean,
      hostname: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => Promise<AxiosResponse<Array<Judgehost>>>
    > {
      const localVarAxiosArgs = await JudgehostsApiAxiosParamCreator(
        configuration,
      ).putV4AppApiJudgehostUpdatejudgehostForm(enabled, hostname, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs: AxiosRequestConfig = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Update the given judging for the given judgehost.
     * @param {boolean} compile_success
     * @param {string} output_compile
     * @param {string} entry_point
     * @param {string} compile_metadata
     * @param {string} hostname The hostname of the judgehost that wants to update the judging
     * @param {number} judgetaskid The ID of the judgetask to update
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async putV4AppApiJudgehostUpdatejudgingForm(
      compile_success: boolean,
      output_compile: string,
      entry_point: string,
      compile_metadata: string,
      hostname: string,
      judgetaskid: number,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>
    > {
      const localVarAxiosArgs = await JudgehostsApiAxiosParamCreator(
        configuration,
      ).putV4AppApiJudgehostUpdatejudgingForm(
        compile_success,
        output_compile,
        entry_point,
        compile_metadata,
        hostname,
        judgetaskid,
        options,
      );
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs: AxiosRequestConfig = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
  };
};

/**
 * JudgehostsApi - factory interface
 * @export
 */
export const JudgehostsApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  return {
    /**
     *
     * @summary Get files for a given type and id.
     * @param {string} type The type to
     * @param {string} id The ID of the entity
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getV4AppApiJudgehostGetfiles(
      type: string,
      id: string,
      options?: AxiosRequestConfig,
    ): Promise<AxiosResponse<void>> {
      return JudgehostsApiFp(configuration)
        .getV4AppApiJudgehostGetfiles(type, id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get judgehosts.
     * @param {string} [hostname] Only show the judgehost with the given hostname
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getV4AppApiJudgehostGetjudgehosts(
      hostname?: string,
      options?: AxiosRequestConfig,
    ): Promise<AxiosResponse<Array<Judgehost>>> {
      return JudgehostsApiFp(configuration)
        .getV4AppApiJudgehostGetjudgehosts(hostname, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Add back debug info.
     * @param {string} hostname The hostname of the judgehost that wants to add the debug info
     * @param {number} judgeTaskId The ID of the judgetask to add
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async postV4AppApiJudgehostAdddebuginfo(
      hostname: string,
      judgeTaskId: number,
      options?: AxiosRequestConfig,
    ): Promise<AxiosResponse<void>> {
      return JudgehostsApiFp(configuration)
        .postV4AppApiJudgehostAdddebuginfo(hostname, judgeTaskId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Add one JudgingRun. When relevant, finalize the judging.
     * @param {string} runresult
     * @param {number} runtime
     * @param {string} output_run
     * @param {string} output_diff
     * @param {string} output_error
     * @param {string} output_system
     * @param {string} metadata
     * @param {string} hostname The hostname of the judgehost that wants to add the judging run
     * @param {number} judgeTaskId The ID of the judgetask to add
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async postV4AppApiJudgehostAddjudgingrunForm(
      runresult: string,
      runtime: number,
      output_run: string,
      output_diff: string,
      output_error: string,
      output_system: string,
      metadata: string,
      hostname: string,
      judgeTaskId: number,
      options?: AxiosRequestConfig,
    ): Promise<AxiosResponse<void>> {
      return JudgehostsApiFp(configuration)
        .postV4AppApiJudgehostAddjudgingrunForm(
          runresult,
          runtime,
          output_run,
          output_diff,
          output_error,
          output_system,
          metadata,
          hostname,
          judgeTaskId,
          options,
        )
        .then((request) => request(axios, basePath));
    },
    /**
     * Also restarts (and returns) unfinished judgings.
     * @summary Add a new judgehost to the list of judgehosts.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async postV4AppApiJudgehostCreatejudgehost(
      options?: AxiosRequestConfig,
    ): Promise<AxiosResponse<Array<InlineResponse2008>>> {
      return JudgehostsApiFp(configuration)
        .postV4AppApiJudgehostCreatejudgehost(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Fetch work tasks.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async postV4AppApiJudgehostGetjudgetasks(
      options?: AxiosRequestConfig,
    ): Promise<AxiosResponse<void>> {
      return JudgehostsApiFp(configuration)
        .postV4AppApiJudgehostGetjudgetasks(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Internal error reporting (back from judgehost).
     * @param {string} description
     * @param {string} judgehostlog
     * @param {string} disabled
     * @param {number} judgetaskid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async postV4AppApiJudgehostInternalerrorForm(
      description: string,
      judgehostlog: string,
      disabled: string,
      judgetaskid: number,
      options?: AxiosRequestConfig,
    ): Promise<AxiosResponse<number>> {
      return JudgehostsApiFp(configuration)
        .postV4AppApiJudgehostInternalerrorForm(
          description,
          judgehostlog,
          disabled,
          judgetaskid,
          options,
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Update the configuration of the given judgehost.
     * @param {boolean} enabled
     * @param {string} hostname The hostname of the judgehost to update
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async putV4AppApiJudgehostUpdatejudgehostForm(
      enabled: boolean,
      hostname: string,
      options?: AxiosRequestConfig,
    ): Promise<AxiosResponse<Array<Judgehost>>> {
      return JudgehostsApiFp(configuration)
        .putV4AppApiJudgehostUpdatejudgehostForm(enabled, hostname, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Update the given judging for the given judgehost.
     * @param {boolean} compile_success
     * @param {string} output_compile
     * @param {string} entry_point
     * @param {string} compile_metadata
     * @param {string} hostname The hostname of the judgehost that wants to update the judging
     * @param {number} judgetaskid The ID of the judgetask to update
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async putV4AppApiJudgehostUpdatejudgingForm(
      compile_success: boolean,
      output_compile: string,
      entry_point: string,
      compile_metadata: string,
      hostname: string,
      judgetaskid: number,
      options?: AxiosRequestConfig,
    ): Promise<AxiosResponse<void>> {
      return JudgehostsApiFp(configuration)
        .putV4AppApiJudgehostUpdatejudgingForm(
          compile_success,
          output_compile,
          entry_point,
          compile_metadata,
          hostname,
          judgetaskid,
          options,
        )
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * JudgehostsApi - object-oriented interface
 * @export
 * @class JudgehostsApi
 * @extends {BaseAPI}
 */
export class JudgehostsApi extends BaseAPI {
  /**
   *
   * @summary Get files for a given type and id.
   * @param {string} type The type to
   * @param {string} id The ID of the entity
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof JudgehostsApi
   */
  public async getV4AppApiJudgehostGetfiles(
    type: string,
    id: string,
    options?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>> {
    return JudgehostsApiFp(this.configuration)
      .getV4AppApiJudgehostGetfiles(type, id, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Get judgehosts.
   * @param {string} [hostname] Only show the judgehost with the given hostname
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof JudgehostsApi
   */
  public async getV4AppApiJudgehostGetjudgehosts(
    hostname?: string,
    options?: AxiosRequestConfig,
  ): Promise<AxiosResponse<Array<Judgehost>>> {
    return JudgehostsApiFp(this.configuration)
      .getV4AppApiJudgehostGetjudgehosts(hostname, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Add back debug info.
   * @param {string} hostname The hostname of the judgehost that wants to add the debug info
   * @param {number} judgeTaskId The ID of the judgetask to add
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof JudgehostsApi
   */
  public async postV4AppApiJudgehostAdddebuginfo(
    hostname: string,
    judgeTaskId: number,
    options?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>> {
    return JudgehostsApiFp(this.configuration)
      .postV4AppApiJudgehostAdddebuginfo(hostname, judgeTaskId, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Add one JudgingRun. When relevant, finalize the judging.
   * @param {string} runresult
   * @param {number} runtime
   * @param {string} output_run
   * @param {string} output_diff
   * @param {string} output_error
   * @param {string} output_system
   * @param {string} metadata
   * @param {string} hostname The hostname of the judgehost that wants to add the judging run
   * @param {number} judgeTaskId The ID of the judgetask to add
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof JudgehostsApi
   */
  public async postV4AppApiJudgehostAddjudgingrunForm(
    runresult: string,
    runtime: number,
    output_run: string,
    output_diff: string,
    output_error: string,
    output_system: string,
    metadata: string,
    hostname: string,
    judgeTaskId: number,
    options?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>> {
    return JudgehostsApiFp(this.configuration)
      .postV4AppApiJudgehostAddjudgingrunForm(
        runresult,
        runtime,
        output_run,
        output_diff,
        output_error,
        output_system,
        metadata,
        hostname,
        judgeTaskId,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   * Also restarts (and returns) unfinished judgings.
   * @summary Add a new judgehost to the list of judgehosts.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof JudgehostsApi
   */
  public async postV4AppApiJudgehostCreatejudgehost(
    options?: AxiosRequestConfig,
  ): Promise<AxiosResponse<Array<InlineResponse2008>>> {
    return JudgehostsApiFp(this.configuration)
      .postV4AppApiJudgehostCreatejudgehost(options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Fetch work tasks.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof JudgehostsApi
   */
  public async postV4AppApiJudgehostGetjudgetasks(
    options?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>> {
    return JudgehostsApiFp(this.configuration)
      .postV4AppApiJudgehostGetjudgetasks(options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Internal error reporting (back from judgehost).
   * @param {string} description
   * @param {string} judgehostlog
   * @param {string} disabled
   * @param {number} judgetaskid
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof JudgehostsApi
   */
  public async postV4AppApiJudgehostInternalerrorForm(
    description: string,
    judgehostlog: string,
    disabled: string,
    judgetaskid: number,
    options?: AxiosRequestConfig,
  ): Promise<AxiosResponse<number>> {
    return JudgehostsApiFp(this.configuration)
      .postV4AppApiJudgehostInternalerrorForm(
        description,
        judgehostlog,
        disabled,
        judgetaskid,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Update the configuration of the given judgehost.
   * @param {boolean} enabled
   * @param {string} hostname The hostname of the judgehost to update
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof JudgehostsApi
   */
  public async putV4AppApiJudgehostUpdatejudgehostForm(
    enabled: boolean,
    hostname: string,
    options?: AxiosRequestConfig,
  ): Promise<AxiosResponse<Array<Judgehost>>> {
    return JudgehostsApiFp(this.configuration)
      .putV4AppApiJudgehostUpdatejudgehostForm(enabled, hostname, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Update the given judging for the given judgehost.
   * @param {boolean} compile_success
   * @param {string} output_compile
   * @param {string} entry_point
   * @param {string} compile_metadata
   * @param {string} hostname The hostname of the judgehost that wants to update the judging
   * @param {number} judgetaskid The ID of the judgetask to update
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof JudgehostsApi
   */
  public async putV4AppApiJudgehostUpdatejudgingForm(
    compile_success: boolean,
    output_compile: string,
    entry_point: string,
    compile_metadata: string,
    hostname: string,
    judgetaskid: number,
    options?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>> {
    return JudgehostsApiFp(this.configuration)
      .putV4AppApiJudgehostUpdatejudgingForm(
        compile_success,
        output_compile,
        entry_point,
        compile_metadata,
        hostname,
        judgetaskid,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }
}
