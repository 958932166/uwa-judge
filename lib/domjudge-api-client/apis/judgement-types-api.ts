/* tslint:disable */
/* eslint-disable */
/**
 * DOMjudge
 * DOMjudge API v4
 *
 * OpenAPI spec version: 8.2.2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { InlineResponse400 } from '../models';
import { JudgementType } from '../models';
/**
 * JudgementTypesApi - axios parameter creator
 * @export
 */
export const JudgementTypesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get all the judgement types for this contest.
         * @param {string} cid 
         * @param {Array<string>} [ids] Filter the objects to get on this list of ID&#x27;s
         * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getV4AppApiJudgementtypeList: async (cid: string, ids?: Array<string>, strict?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cid' is not null or undefined
            if (cid === null || cid === undefined) {
                throw new RequiredError('cid','Required parameter cid was null or undefined when calling getV4AppApiJudgementtypeList.');
            }
            const localVarPath = `/api/v4/contests/{cid}/judgement-types`
                .replace(`{${"cid"}}`, encodeURIComponent(String(cid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }

            if (ids) {
                localVarQueryParameter['ids[]'] = ids;
            }

            if (strict !== undefined) {
                localVarQueryParameter['strict'] = strict;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get the given judgement type for this contest.
         * @param {string} id The ID of the entity
         * @param {string} cid 
         * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getV4AppApiJudgementtypeSingle: async (id: string, cid: string, strict?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getV4AppApiJudgementtypeSingle.');
            }
            // verify required parameter 'cid' is not null or undefined
            if (cid === null || cid === undefined) {
                throw new RequiredError('cid','Required parameter cid was null or undefined when calling getV4AppApiJudgementtypeSingle.');
            }
            const localVarPath = `/api/v4/contests/{cid}/judgement-types/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"cid"}}`, encodeURIComponent(String(cid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }

            if (strict !== undefined) {
                localVarQueryParameter['strict'] = strict;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * JudgementTypesApi - functional programming interface
 * @export
 */
export const JudgementTypesApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get all the judgement types for this contest.
         * @param {string} cid 
         * @param {Array<string>} [ids] Filter the objects to get on this list of ID&#x27;s
         * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getV4AppApiJudgementtypeList(cid: string, ids?: Array<string>, strict?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<JudgementType>>>> {
            const localVarAxiosArgs = await JudgementTypesApiAxiosParamCreator(configuration).getV4AppApiJudgementtypeList(cid, ids, strict, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get the given judgement type for this contest.
         * @param {string} id The ID of the entity
         * @param {string} cid 
         * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getV4AppApiJudgementtypeSingle(id: string, cid: string, strict?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<JudgementType>>> {
            const localVarAxiosArgs = await JudgementTypesApiAxiosParamCreator(configuration).getV4AppApiJudgementtypeSingle(id, cid, strict, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * JudgementTypesApi - factory interface
 * @export
 */
export const JudgementTypesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary Get all the judgement types for this contest.
         * @param {string} cid 
         * @param {Array<string>} [ids] Filter the objects to get on this list of ID&#x27;s
         * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getV4AppApiJudgementtypeList(cid: string, ids?: Array<string>, strict?: boolean, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<JudgementType>>> {
            return JudgementTypesApiFp(configuration).getV4AppApiJudgementtypeList(cid, ids, strict, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get the given judgement type for this contest.
         * @param {string} id The ID of the entity
         * @param {string} cid 
         * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getV4AppApiJudgementtypeSingle(id: string, cid: string, strict?: boolean, options?: AxiosRequestConfig): Promise<AxiosResponse<JudgementType>> {
            return JudgementTypesApiFp(configuration).getV4AppApiJudgementtypeSingle(id, cid, strict, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * JudgementTypesApi - object-oriented interface
 * @export
 * @class JudgementTypesApi
 * @extends {BaseAPI}
 */
export class JudgementTypesApi extends BaseAPI {
    /**
     * 
     * @summary Get all the judgement types for this contest.
     * @param {string} cid 
     * @param {Array<string>} [ids] Filter the objects to get on this list of ID&#x27;s
     * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JudgementTypesApi
     */
    public async getV4AppApiJudgementtypeList(cid: string, ids?: Array<string>, strict?: boolean, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<JudgementType>>> {
        return JudgementTypesApiFp(this.configuration).getV4AppApiJudgementtypeList(cid, ids, strict, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Get the given judgement type for this contest.
     * @param {string} id The ID of the entity
     * @param {string} cid 
     * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JudgementTypesApi
     */
    public async getV4AppApiJudgementtypeSingle(id: string, cid: string, strict?: boolean, options?: AxiosRequestConfig) : Promise<AxiosResponse<JudgementType>> {
        return JudgementTypesApiFp(this.configuration).getV4AppApiJudgementtypeSingle(id, cid, strict, options).then((request) => request(this.axios, this.basePath));
    }
}
