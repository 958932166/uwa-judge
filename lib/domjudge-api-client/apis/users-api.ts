/* tslint:disable */
/* eslint-disable */
/**
 * DOMjudge
 * DOMjudge API v4
 *
 * OpenAPI spec version: 8.2.2
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import globalAxios, {
  AxiosResponse,
  AxiosInstance,
  AxiosRequestConfig,
} from "axios";
import { Configuration } from "../configuration";
// Some imports not used depending on template conditions
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
} from "../base";
import { AddUser } from "../models";
import { InlineResponse400 } from "../models";
import { User } from "../models";
/**
 * UsersApi - axios parameter creator
 * @export
 */
export const UsersApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     *
     * @summary Get all the users.
     * @param {Array<string>} [ids] Filter the objects to get on this list of ID&#x27;s
     * @param {string} [team_id] Only show users for the given team
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getV4AppApiUserList: async (
      ids?: Array<string>,
      team_id?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v4/users`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions: AxiosRequestConfig = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication basicAuth required
      // http basic authentication required
      if (configuration && (configuration.username || configuration.password)) {
        localVarRequestOptions["auth"] = {
          username: configuration.username,
          password: configuration.password,
        };
      }

      if (ids) {
        localVarQueryParameter["ids[]"] = ids;
      }

      if (team_id !== undefined) {
        localVarQueryParameter["team_id"] = team_id;
      }

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.params) {
        query.set(key, options.params[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get the given user.
     * @param {string} id The ID of the entity
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getV4AppApiUserSingle: async (
      id: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          "id",
          "Required parameter id was null or undefined when calling getV4AppApiUserSingle.",
        );
      }
      const localVarPath = `/api/v4/users/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions: AxiosRequestConfig = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication basicAuth required
      // http basic authentication required
      if (configuration && (configuration.username || configuration.password)) {
        localVarRequestOptions["auth"] = {
          username: configuration.username,
          password: configuration.password,
        };
      }

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.params) {
        query.set(key, options.params[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Add a new user.
     * @param {string} username
     * @param {string} name
     * @param {string} email
     * @param {string} ip
     * @param {string} password
     * @param {boolean} enabled
     * @param {string} team_id
     * @param {Array<string>} roles
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postV4AppApiUserAddForm: async (
      username: string,
      name: string,
      email: string,
      ip: string,
      password: string,
      enabled: boolean,
      team_id: string,
      roles: Array<string>,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'username' is not null or undefined
      if (username === null || username === undefined) {
        throw new RequiredError(
          "username",
          "Required parameter username was null or undefined when calling postV4AppApiUserAddForm.",
        );
      }
      // verify required parameter 'name' is not null or undefined
      if (name === null || name === undefined) {
        throw new RequiredError(
          "name",
          "Required parameter name was null or undefined when calling postV4AppApiUserAddForm.",
        );
      }
      // verify required parameter 'email' is not null or undefined
      if (email === null || email === undefined) {
        throw new RequiredError(
          "email",
          "Required parameter email was null or undefined when calling postV4AppApiUserAddForm.",
        );
      }
      // verify required parameter 'ip' is not null or undefined
      if (ip === null || ip === undefined) {
        throw new RequiredError(
          "ip",
          "Required parameter ip was null or undefined when calling postV4AppApiUserAddForm.",
        );
      }
      // verify required parameter 'password' is not null or undefined
      if (password === null || password === undefined) {
        throw new RequiredError(
          "password",
          "Required parameter password was null or undefined when calling postV4AppApiUserAddForm.",
        );
      }
      // verify required parameter 'enabled' is not null or undefined
      if (enabled === null || enabled === undefined) {
        throw new RequiredError(
          "enabled",
          "Required parameter enabled was null or undefined when calling postV4AppApiUserAddForm.",
        );
      }
      // verify required parameter 'team_id' is not null or undefined
      if (team_id === null || team_id === undefined) {
        throw new RequiredError(
          "team_id",
          "Required parameter team_id was null or undefined when calling postV4AppApiUserAddForm.",
        );
      }
      // verify required parameter 'roles' is not null or undefined
      if (roles === null || roles === undefined) {
        throw new RequiredError(
          "roles",
          "Required parameter roles was null or undefined when calling postV4AppApiUserAddForm.",
        );
      }
      const localVarPath = `/api/v4/users`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions: AxiosRequestConfig = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;
      const localVarFormParams = new FormData();

      // authentication basicAuth required
      // http basic authentication required
      if (configuration && (configuration.username || configuration.password)) {
        localVarRequestOptions["auth"] = {
          username: configuration.username,
          password: configuration.password,
        };
      }

      if (username !== undefined) {
        localVarFormParams.append("username", username as any);
      }

      if (name !== undefined) {
        localVarFormParams.append("name", name as any);
      }

      if (email !== undefined) {
        localVarFormParams.append("email", email as any);
      }

      if (ip !== undefined) {
        localVarFormParams.append("ip", ip as any);
      }

      if (password !== undefined) {
        localVarFormParams.append("password", password as any);
      }

      if (enabled !== undefined) {
        localVarFormParams.append("enabled", enabled as any);
      }

      if (team_id !== undefined) {
        localVarFormParams.append("team_id", team_id as any);
      }
      if (roles) {
        roles.forEach((element) => {
          localVarFormParams.append("roles", element as any);
        });
      }

      localVarHeaderParameter["Content-Type"] = "multipart/form-data";
      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.params) {
        query.set(key, options.params[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = localVarFormParams;

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Add a new user.
     * @param {AddUser} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postV4AppApiUserAdd: async (
      body: AddUser,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          "body",
          "Required parameter body was null or undefined when calling postV4AppApiUserAdd.",
        );
      }
      const localVarPath = `/api/v4/users`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions: AxiosRequestConfig = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;
      const localVarFormParams = new FormData();

      // authentication basicAuth required
      // http basic authentication required
      if (configuration && (configuration.username || configuration.password)) {
        localVarRequestOptions["auth"] = {
          username: configuration.username,
          password: configuration.password,
        };
      }

      localVarHeaderParameter["Content-Type"] = "multipart/form-data";

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.params) {
        query.set(key, options.params[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      const needsSerialization =
        typeof body !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || "";

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Add accounts to teams.
     * @param {Blob} tsv
     * @param {Blob} json
     * @param {Blob} yaml
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postV4AppApiUserAddaccountsForm: async (
      tsv: Blob,
      json: Blob,
      yaml: Blob,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'tsv' is not null or undefined
      if (tsv === null || tsv === undefined) {
        throw new RequiredError(
          "tsv",
          "Required parameter tsv was null or undefined when calling postV4AppApiUserAddaccountsForm.",
        );
      }
      // verify required parameter 'json' is not null or undefined
      if (json === null || json === undefined) {
        throw new RequiredError(
          "json",
          "Required parameter json was null or undefined when calling postV4AppApiUserAddaccountsForm.",
        );
      }
      // verify required parameter 'yaml' is not null or undefined
      if (yaml === null || yaml === undefined) {
        throw new RequiredError(
          "yaml",
          "Required parameter yaml was null or undefined when calling postV4AppApiUserAddaccountsForm.",
        );
      }
      const localVarPath = `/api/v4/users/accounts`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions: AxiosRequestConfig = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;
      const localVarFormParams = new FormData();

      // authentication basicAuth required
      // http basic authentication required
      if (configuration && (configuration.username || configuration.password)) {
        localVarRequestOptions["auth"] = {
          username: configuration.username,
          password: configuration.password,
        };
      }

      if (tsv !== undefined) {
        localVarFormParams.append("tsv", tsv as any);
      }

      if (json !== undefined) {
        localVarFormParams.append("json", json as any);
      }

      if (yaml !== undefined) {
        localVarFormParams.append("yaml", yaml as any);
      }

      localVarHeaderParameter["Content-Type"] = "multipart/form-data";
      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.params) {
        query.set(key, options.params[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = localVarFormParams;

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Add one or more groups.
     * @param {Blob} tsv
     * @param {Blob} json
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postV4AppApiUserAddgroupsForm: async (
      tsv: Blob,
      json: Blob,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'tsv' is not null or undefined
      if (tsv === null || tsv === undefined) {
        throw new RequiredError(
          "tsv",
          "Required parameter tsv was null or undefined when calling postV4AppApiUserAddgroupsForm.",
        );
      }
      // verify required parameter 'json' is not null or undefined
      if (json === null || json === undefined) {
        throw new RequiredError(
          "json",
          "Required parameter json was null or undefined when calling postV4AppApiUserAddgroupsForm.",
        );
      }
      const localVarPath = `/api/v4/users/groups`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions: AxiosRequestConfig = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;
      const localVarFormParams = new FormData();

      // authentication basicAuth required
      // http basic authentication required
      if (configuration && (configuration.username || configuration.password)) {
        localVarRequestOptions["auth"] = {
          username: configuration.username,
          password: configuration.password,
        };
      }

      if (tsv !== undefined) {
        localVarFormParams.append("tsv", tsv as any);
      }

      if (json !== undefined) {
        localVarFormParams.append("json", json as any);
      }

      localVarHeaderParameter["Content-Type"] = "multipart/form-data";
      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.params) {
        query.set(key, options.params[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = localVarFormParams;

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Add one or more organizations.
     * @param {Blob} json
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postV4AppApiUserAddorganizationsForm: async (
      json: Blob,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'json' is not null or undefined
      if (json === null || json === undefined) {
        throw new RequiredError(
          "json",
          "Required parameter json was null or undefined when calling postV4AppApiUserAddorganizationsForm.",
        );
      }
      const localVarPath = `/api/v4/users/organizations`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions: AxiosRequestConfig = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;
      const localVarFormParams = new FormData();

      // authentication basicAuth required
      // http basic authentication required
      if (configuration && (configuration.username || configuration.password)) {
        localVarRequestOptions["auth"] = {
          username: configuration.username,
          password: configuration.password,
        };
      }

      if (json !== undefined) {
        localVarFormParams.append("json", json as any);
      }

      localVarHeaderParameter["Content-Type"] = "multipart/form-data";
      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.params) {
        query.set(key, options.params[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = localVarFormParams;

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Add one or more teams.
     * @param {Blob} tsv
     * @param {Blob} json
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postV4AppApiUserAddteamsForm: async (
      tsv: Blob,
      json: Blob,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'tsv' is not null or undefined
      if (tsv === null || tsv === undefined) {
        throw new RequiredError(
          "tsv",
          "Required parameter tsv was null or undefined when calling postV4AppApiUserAddteamsForm.",
        );
      }
      // verify required parameter 'json' is not null or undefined
      if (json === null || json === undefined) {
        throw new RequiredError(
          "json",
          "Required parameter json was null or undefined when calling postV4AppApiUserAddteamsForm.",
        );
      }
      const localVarPath = `/api/v4/users/teams`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions: AxiosRequestConfig = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;
      const localVarFormParams = new FormData();

      // authentication basicAuth required
      // http basic authentication required
      if (configuration && (configuration.username || configuration.password)) {
        localVarRequestOptions["auth"] = {
          username: configuration.username,
          password: configuration.password,
        };
      }

      if (tsv !== undefined) {
        localVarFormParams.append("tsv", tsv as any);
      }

      if (json !== undefined) {
        localVarFormParams.append("json", json as any);
      }

      localVarHeaderParameter["Content-Type"] = "multipart/form-data";
      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.params) {
        query.set(key, options.params[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = localVarFormParams;

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * UsersApi - functional programming interface
 * @export
 */
export const UsersApiFp = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary Get all the users.
     * @param {Array<string>} [ids] Filter the objects to get on this list of ID&#x27;s
     * @param {string} [team_id] Only show users for the given team
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getV4AppApiUserList(
      ids?: Array<string>,
      team_id?: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => Promise<AxiosResponse<Array<User>>>
    > {
      const localVarAxiosArgs = await UsersApiAxiosParamCreator(
        configuration,
      ).getV4AppApiUserList(ids, team_id, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs: AxiosRequestConfig = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Get the given user.
     * @param {string} id The ID of the entity
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getV4AppApiUserSingle(
      id: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<User>>
    > {
      const localVarAxiosArgs = await UsersApiAxiosParamCreator(
        configuration,
      ).getV4AppApiUserSingle(id, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs: AxiosRequestConfig = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Add a new user.
     * @param {string} username
     * @param {string} name
     * @param {string} email
     * @param {string} ip
     * @param {string} password
     * @param {boolean} enabled
     * @param {string} team_id
     * @param {Array<string>} roles
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async postV4AppApiUserAddForm(
      username: string,
      name: string,
      email: string,
      ip: string,
      password: string,
      enabled: boolean,
      team_id: string,
      roles: Array<string>,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<User>>
    > {
      const localVarAxiosArgs = await UsersApiAxiosParamCreator(
        configuration,
      ).postV4AppApiUserAddForm(
        username,
        name,
        email,
        ip,
        password,
        enabled,
        team_id,
        roles,
        options,
      );
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs: AxiosRequestConfig = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Add a new user.
     * @param {AddUser} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async postV4AppApiUserAdd(
      body: AddUser,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<User>>
    > {
      const localVarAxiosArgs = await UsersApiAxiosParamCreator(
        configuration,
      ).postV4AppApiUserAdd(body, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs: AxiosRequestConfig = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Add accounts to teams.
     * @param {Blob} tsv
     * @param {Blob} json
     * @param {Blob} yaml
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async postV4AppApiUserAddaccountsForm(
      tsv: Blob,
      json: Blob,
      yaml: Blob,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<any>>
    > {
      const localVarAxiosArgs = await UsersApiAxiosParamCreator(
        configuration,
      ).postV4AppApiUserAddaccountsForm(tsv, json, yaml, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs: AxiosRequestConfig = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Add one or more groups.
     * @param {Blob} tsv
     * @param {Blob} json
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async postV4AppApiUserAddgroupsForm(
      tsv: Blob,
      json: Blob,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>
    > {
      const localVarAxiosArgs = await UsersApiAxiosParamCreator(
        configuration,
      ).postV4AppApiUserAddgroupsForm(tsv, json, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs: AxiosRequestConfig = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Add one or more organizations.
     * @param {Blob} json
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async postV4AppApiUserAddorganizationsForm(
      json: Blob,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>
    > {
      const localVarAxiosArgs = await UsersApiAxiosParamCreator(
        configuration,
      ).postV4AppApiUserAddorganizationsForm(json, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs: AxiosRequestConfig = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Add one or more teams.
     * @param {Blob} tsv
     * @param {Blob} json
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async postV4AppApiUserAddteamsForm(
      tsv: Blob,
      json: Blob,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>
    > {
      const localVarAxiosArgs = await UsersApiAxiosParamCreator(
        configuration,
      ).postV4AppApiUserAddteamsForm(tsv, json, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs: AxiosRequestConfig = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
  };
};

/**
 * UsersApi - factory interface
 * @export
 */
export const UsersApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  return {
    /**
     *
     * @summary Get all the users.
     * @param {Array<string>} [ids] Filter the objects to get on this list of ID&#x27;s
     * @param {string} [team_id] Only show users for the given team
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getV4AppApiUserList(
      ids?: Array<string>,
      team_id?: string,
      options?: AxiosRequestConfig,
    ): Promise<AxiosResponse<Array<User>>> {
      return UsersApiFp(configuration)
        .getV4AppApiUserList(ids, team_id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get the given user.
     * @param {string} id The ID of the entity
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getV4AppApiUserSingle(
      id: string,
      options?: AxiosRequestConfig,
    ): Promise<AxiosResponse<User>> {
      return UsersApiFp(configuration)
        .getV4AppApiUserSingle(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Add a new user.
     * @param {string} username
     * @param {string} name
     * @param {string} email
     * @param {string} ip
     * @param {string} password
     * @param {boolean} enabled
     * @param {string} team_id
     * @param {Array<string>} roles
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async postV4AppApiUserAddForm(
      username: string,
      name: string,
      email: string,
      ip: string,
      password: string,
      enabled: boolean,
      team_id: string,
      roles: Array<string>,
      options?: AxiosRequestConfig,
    ): Promise<AxiosResponse<User>> {
      return UsersApiFp(configuration)
        .postV4AppApiUserAddForm(
          username,
          name,
          email,
          ip,
          password,
          enabled,
          team_id,
          roles,
          options,
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Add a new user.
     * @param {AddUser} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async postV4AppApiUserAdd(
      body: AddUser,
      options?: AxiosRequestConfig,
    ): Promise<AxiosResponse<User>> {
      return UsersApiFp(configuration)
        .postV4AppApiUserAdd(body, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Add accounts to teams.
     * @param {Blob} tsv
     * @param {Blob} json
     * @param {Blob} yaml
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async postV4AppApiUserAddaccountsForm(
      tsv: Blob,
      json: Blob,
      yaml: Blob,
      options?: AxiosRequestConfig,
    ): Promise<AxiosResponse<any>> {
      return UsersApiFp(configuration)
        .postV4AppApiUserAddaccountsForm(tsv, json, yaml, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Add one or more groups.
     * @param {Blob} tsv
     * @param {Blob} json
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async postV4AppApiUserAddgroupsForm(
      tsv: Blob,
      json: Blob,
      options?: AxiosRequestConfig,
    ): Promise<AxiosResponse<void>> {
      return UsersApiFp(configuration)
        .postV4AppApiUserAddgroupsForm(tsv, json, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Add one or more organizations.
     * @param {Blob} json
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async postV4AppApiUserAddorganizationsForm(
      json: Blob,
      options?: AxiosRequestConfig,
    ): Promise<AxiosResponse<void>> {
      return UsersApiFp(configuration)
        .postV4AppApiUserAddorganizationsForm(json, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Add one or more teams.
     * @param {Blob} tsv
     * @param {Blob} json
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async postV4AppApiUserAddteamsForm(
      tsv: Blob,
      json: Blob,
      options?: AxiosRequestConfig,
    ): Promise<AxiosResponse<void>> {
      return UsersApiFp(configuration)
        .postV4AppApiUserAddteamsForm(tsv, json, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
export class UsersApi extends BaseAPI {
  /**
   *
   * @summary Get all the users.
   * @param {Array<string>} [ids] Filter the objects to get on this list of ID&#x27;s
   * @param {string} [team_id] Only show users for the given team
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersApi
   */
  public async getV4AppApiUserList(
    ids?: Array<string>,
    team_id?: string,
    options?: AxiosRequestConfig,
  ): Promise<AxiosResponse<Array<User>>> {
    return UsersApiFp(this.configuration)
      .getV4AppApiUserList(ids, team_id, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Get the given user.
   * @param {string} id The ID of the entity
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersApi
   */
  public async getV4AppApiUserSingle(
    id: string,
    options?: AxiosRequestConfig,
  ): Promise<AxiosResponse<User>> {
    return UsersApiFp(this.configuration)
      .getV4AppApiUserSingle(id, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Add a new user.
   * @param {string} username
   * @param {string} name
   * @param {string} email
   * @param {string} ip
   * @param {string} password
   * @param {boolean} enabled
   * @param {string} team_id
   * @param {Array<string>} roles
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersApi
   */
  public async postV4AppApiUserAddForm(
    username: string,
    name: string,
    email: string,
    ip: string,
    password: string,
    enabled: boolean,
    team_id: string,
    roles: Array<string>,
    options?: AxiosRequestConfig,
  ): Promise<AxiosResponse<User>> {
    return UsersApiFp(this.configuration)
      .postV4AppApiUserAddForm(
        username,
        name,
        email,
        ip,
        password,
        enabled,
        team_id,
        roles,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Add a new user.
   * @param {AddUser} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersApi
   */
  public async postV4AppApiUserAdd(
    body: AddUser,
    options?: AxiosRequestConfig,
  ): Promise<AxiosResponse<User>> {
    return UsersApiFp(this.configuration)
      .postV4AppApiUserAdd(body, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Add accounts to teams.
   * @param {Blob} tsv
   * @param {Blob} json
   * @param {Blob} yaml
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersApi
   */
  public async postV4AppApiUserAddaccountsForm(
    tsv: Blob,
    json: Blob,
    yaml: Blob,
    options?: AxiosRequestConfig,
  ): Promise<AxiosResponse<any>> {
    return UsersApiFp(this.configuration)
      .postV4AppApiUserAddaccountsForm(tsv, json, yaml, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Add one or more groups.
   * @param {Blob} tsv
   * @param {Blob} json
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersApi
   */
  public async postV4AppApiUserAddgroupsForm(
    tsv: Blob,
    json: Blob,
    options?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>> {
    return UsersApiFp(this.configuration)
      .postV4AppApiUserAddgroupsForm(tsv, json, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Add one or more organizations.
   * @param {Blob} json
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersApi
   */
  public async postV4AppApiUserAddorganizationsForm(
    json: Blob,
    options?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>> {
    return UsersApiFp(this.configuration)
      .postV4AppApiUserAddorganizationsForm(json, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Add one or more teams.
   * @param {Blob} tsv
   * @param {Blob} json
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersApi
   */
  public async postV4AppApiUserAddteamsForm(
    tsv: Blob,
    json: Blob,
    options?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>> {
    return UsersApiFp(this.configuration)
      .postV4AppApiUserAddteamsForm(tsv, json, options)
      .then((request) => request(this.axios, this.basePath));
  }
}
