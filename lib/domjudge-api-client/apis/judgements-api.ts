/* tslint:disable */
/* eslint-disable */
/**
 * DOMjudge
 * DOMjudge API v4
 *
 * OpenAPI spec version: 8.2.2
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import globalAxios, {
  AxiosResponse,
  AxiosInstance,
  AxiosRequestConfig,
} from "axios";
import { Configuration } from "../configuration";
// Some imports not used depending on template conditions
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
} from "../base";
import { InlineResponse2009 } from "../models";
import { InlineResponse400 } from "../models";
import { Judging, JudgementExtraFields } from "../models";
/**
 * JudgementsApi - axios parameter creator
 * @export
 */
export const JudgementsApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     *
     * @summary Get all the judgements for this contest.
     * @param {string} cid The contest ID
     * @param {Array<string>} [ids] Filter the objects to get on this list of ID&#x27;s
     * @param {string} [result] Only show judgements with the given result
     * @param {string} [submission_id] Only show judgements for the given submission
     * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getV4AppApiJudgementList: async (
      cid: string,
      ids?: Array<string>,
      result?: string,
      submission_id?: string,
      strict?: boolean,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'cid' is not null or undefined
      if (cid === null || cid === undefined) {
        throw new RequiredError(
          "cid",
          "Required parameter cid was null or undefined when calling getV4AppApiJudgementList.",
        );
      }
      const localVarPath = `/api/v4/contests/{cid}/judgements`.replace(
        `{${"cid"}}`,
        encodeURIComponent(String(cid)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions: AxiosRequestConfig = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication basicAuth required
      // http basic authentication required
      if (configuration && (configuration.username || configuration.password)) {
        localVarRequestOptions["auth"] = {
          username: configuration.username,
          password: configuration.password,
        };
      }

      if (ids) {
        localVarQueryParameter["ids[]"] = ids;
      }

      if (result !== undefined) {
        localVarQueryParameter["result"] = result;
      }

      if (submission_id !== undefined) {
        localVarQueryParameter["submission_id"] = submission_id;
      }

      if (strict !== undefined) {
        localVarQueryParameter["strict"] = strict;
      }

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.params) {
        query.set(key, options.params[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get all the judgements for this contest.
     * @param {string} cid The contest ID
     * @param {Array<string>} [ids] Filter the objects to get on this list of ID&#x27;s
     * @param {string} [result] Only show judgements with the given result
     * @param {string} [submission_id] Only show judgements for the given submission
     * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getV4AppApiJudgementList1: async (
      cid: string,
      ids?: Array<string>,
      result?: string,
      submission_id?: string,
      strict?: boolean,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'cid' is not null or undefined
      if (cid === null || cid === undefined) {
        throw new RequiredError(
          "cid",
          "Required parameter cid was null or undefined when calling getV4AppApiJudgementList1.",
        );
      }
      const localVarPath = `/api/v4/judgements`.replace(
        `{${"cid"}}`,
        encodeURIComponent(String(cid)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions: AxiosRequestConfig = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication basicAuth required
      // http basic authentication required
      if (configuration && (configuration.username || configuration.password)) {
        localVarRequestOptions["auth"] = {
          username: configuration.username,
          password: configuration.password,
        };
      }

      if (ids) {
        localVarQueryParameter["ids[]"] = ids;
      }

      if (result !== undefined) {
        localVarQueryParameter["result"] = result;
      }

      if (submission_id !== undefined) {
        localVarQueryParameter["submission_id"] = submission_id;
      }

      if (strict !== undefined) {
        localVarQueryParameter["strict"] = strict;
      }

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.params) {
        query.set(key, options.params[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get the given judgement for this contest.
     * @param {string} id The ID of the entity
     * @param {string} cid The contest ID
     * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getV4AppApiJudgementSingle: async (
      id: string,
      cid: string,
      strict?: boolean,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          "id",
          "Required parameter id was null or undefined when calling getV4AppApiJudgementSingle.",
        );
      }
      // verify required parameter 'cid' is not null or undefined
      if (cid === null || cid === undefined) {
        throw new RequiredError(
          "cid",
          "Required parameter cid was null or undefined when calling getV4AppApiJudgementSingle.",
        );
      }
      const localVarPath = `/api/v4/contests/{cid}/judgements/{id}`
        .replace(`{${"id"}}`, encodeURIComponent(String(id)))
        .replace(`{${"cid"}}`, encodeURIComponent(String(cid)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions: AxiosRequestConfig = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication basicAuth required
      // http basic authentication required
      if (configuration && (configuration.username || configuration.password)) {
        localVarRequestOptions["auth"] = {
          username: configuration.username,
          password: configuration.password,
        };
      }

      if (strict !== undefined) {
        localVarQueryParameter["strict"] = strict;
      }

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.params) {
        query.set(key, options.params[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get the given judgement for this contest.
     * @param {string} id The ID of the entity
     * @param {string} cid The contest ID
     * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getV4AppApiJudgementSingle1: async (
      id: string,
      cid: string,
      strict?: boolean,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          "id",
          "Required parameter id was null or undefined when calling getV4AppApiJudgementSingle1.",
        );
      }
      // verify required parameter 'cid' is not null or undefined
      if (cid === null || cid === undefined) {
        throw new RequiredError(
          "cid",
          "Required parameter cid was null or undefined when calling getV4AppApiJudgementSingle1.",
        );
      }
      const localVarPath = `/api/v4/judgements/{id}`
        .replace(`{${"id"}}`, encodeURIComponent(String(id)))
        .replace(`{${"cid"}}`, encodeURIComponent(String(cid)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions: AxiosRequestConfig = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication basicAuth required
      // http basic authentication required
      if (configuration && (configuration.username || configuration.password)) {
        localVarRequestOptions["auth"] = {
          username: configuration.username,
          password: configuration.password,
        };
      }

      if (strict !== undefined) {
        localVarQueryParameter["strict"] = strict;
      }

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.params) {
        query.set(key, options.params[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * JudgementsApi - functional programming interface
 * @export
 */
export const JudgementsApiFp = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary Get all the judgements for this contest.
     * @param {string} cid The contest ID
     * @param {Array<string>} [ids] Filter the objects to get on this list of ID&#x27;s
     * @param {string} [result] Only show judgements with the given result
     * @param {string} [submission_id] Only show judgements for the given submission
     * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getV4AppApiJudgementList(
      cid: string,
      ids?: Array<string>,
      result?: string,
      submission_id?: string,
      strict?: boolean,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => Promise<AxiosResponse<Array<Judging & JudgementExtraFields>>>
    > {
      const localVarAxiosArgs = await JudgementsApiAxiosParamCreator(
        configuration,
      ).getV4AppApiJudgementList(
        cid,
        ids,
        result,
        submission_id,
        strict,
        options,
      );
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs: AxiosRequestConfig = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Get all the judgements for this contest.
     * @param {string} cid The contest ID
     * @param {Array<string>} [ids] Filter the objects to get on this list of ID&#x27;s
     * @param {string} [result] Only show judgements with the given result
     * @param {string} [submission_id] Only show judgements for the given submission
     * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getV4AppApiJudgementList1(
      cid: string,
      ids?: Array<string>,
      result?: string,
      submission_id?: string,
      strict?: boolean,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => Promise<AxiosResponse<Array<Judging & JudgementExtraFields>>>
    > {
      const localVarAxiosArgs = await JudgementsApiAxiosParamCreator(
        configuration,
      ).getV4AppApiJudgementList1(
        cid,
        ids,
        result,
        submission_id,
        strict,
        options,
      );
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs: AxiosRequestConfig = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Get the given judgement for this contest.
     * @param {string} id The ID of the entity
     * @param {string} cid The contest ID
     * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getV4AppApiJudgementSingle(
      id: string,
      cid: string,
      strict?: boolean,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => Promise<AxiosResponse<InlineResponse2009>>
    > {
      const localVarAxiosArgs = await JudgementsApiAxiosParamCreator(
        configuration,
      ).getV4AppApiJudgementSingle(id, cid, strict, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs: AxiosRequestConfig = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Get the given judgement for this contest.
     * @param {string} id The ID of the entity
     * @param {string} cid The contest ID
     * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getV4AppApiJudgementSingle1(
      id: string,
      cid: string,
      strict?: boolean,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => Promise<AxiosResponse<InlineResponse2009>>
    > {
      const localVarAxiosArgs = await JudgementsApiAxiosParamCreator(
        configuration,
      ).getV4AppApiJudgementSingle1(id, cid, strict, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs: AxiosRequestConfig = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
  };
};

/**
 * JudgementsApi - factory interface
 * @export
 */
export const JudgementsApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  return {
    /**
     *
     * @summary Get all the judgements for this contest.
     * @param {string} cid The contest ID
     * @param {Array<string>} [ids] Filter the objects to get on this list of ID&#x27;s
     * @param {string} [result] Only show judgements with the given result
     * @param {string} [submission_id] Only show judgements for the given submission
     * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getV4AppApiJudgementList(
      cid: string,
      ids?: Array<string>,
      result?: string,
      submission_id?: string,
      strict?: boolean,
      options?: AxiosRequestConfig,
    ): Promise<AxiosResponse<Array<Judging & JudgementExtraFields>>> {
      return JudgementsApiFp(configuration)
        .getV4AppApiJudgementList(
          cid,
          ids,
          result,
          submission_id,
          strict,
          options,
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get all the judgements for this contest.
     * @param {string} cid The contest ID
     * @param {Array<string>} [ids] Filter the objects to get on this list of ID&#x27;s
     * @param {string} [result] Only show judgements with the given result
     * @param {string} [submission_id] Only show judgements for the given submission
     * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getV4AppApiJudgementList1(
      cid: string,
      ids?: Array<string>,
      result?: string,
      submission_id?: string,
      strict?: boolean,
      options?: AxiosRequestConfig,
    ): Promise<AxiosResponse<Array<Judging & JudgementExtraFields>>> {
      return JudgementsApiFp(configuration)
        .getV4AppApiJudgementList1(
          cid,
          ids,
          result,
          submission_id,
          strict,
          options,
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get the given judgement for this contest.
     * @param {string} id The ID of the entity
     * @param {string} cid The contest ID
     * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getV4AppApiJudgementSingle(
      id: string,
      cid: string,
      strict?: boolean,
      options?: AxiosRequestConfig,
    ): Promise<AxiosResponse<InlineResponse2009>> {
      return JudgementsApiFp(configuration)
        .getV4AppApiJudgementSingle(id, cid, strict, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get the given judgement for this contest.
     * @param {string} id The ID of the entity
     * @param {string} cid The contest ID
     * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getV4AppApiJudgementSingle1(
      id: string,
      cid: string,
      strict?: boolean,
      options?: AxiosRequestConfig,
    ): Promise<AxiosResponse<InlineResponse2009>> {
      return JudgementsApiFp(configuration)
        .getV4AppApiJudgementSingle1(id, cid, strict, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * JudgementsApi - object-oriented interface
 * @export
 * @class JudgementsApi
 * @extends {BaseAPI}
 */
export class JudgementsApi extends BaseAPI {
  /**
   *
   * @summary Get all the judgements for this contest.
   * @param {string} cid The contest ID
   * @param {Array<string>} [ids] Filter the objects to get on this list of ID&#x27;s
   * @param {string} [result] Only show judgements with the given result
   * @param {string} [submission_id] Only show judgements for the given submission
   * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof JudgementsApi
   */
  public async getV4AppApiJudgementList(
    cid: string,
    ids?: Array<string>,
    result?: string,
    submission_id?: string,
    strict?: boolean,
    options?: AxiosRequestConfig,
  ): Promise<AxiosResponse<Array<Judging & JudgementExtraFields>>> {
    return JudgementsApiFp(this.configuration)
      .getV4AppApiJudgementList(
        cid,
        ids,
        result,
        submission_id,
        strict,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Get all the judgements for this contest.
   * @param {string} cid The contest ID
   * @param {Array<string>} [ids] Filter the objects to get on this list of ID&#x27;s
   * @param {string} [result] Only show judgements with the given result
   * @param {string} [submission_id] Only show judgements for the given submission
   * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof JudgementsApi
   */
  public async getV4AppApiJudgementList1(
    cid: string,
    ids?: Array<string>,
    result?: string,
    submission_id?: string,
    strict?: boolean,
    options?: AxiosRequestConfig,
  ): Promise<AxiosResponse<Array<Judging & JudgementExtraFields>>> {
    return JudgementsApiFp(this.configuration)
      .getV4AppApiJudgementList1(
        cid,
        ids,
        result,
        submission_id,
        strict,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Get the given judgement for this contest.
   * @param {string} id The ID of the entity
   * @param {string} cid The contest ID
   * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof JudgementsApi
   */
  public async getV4AppApiJudgementSingle(
    id: string,
    cid: string,
    strict?: boolean,
    options?: AxiosRequestConfig,
  ): Promise<AxiosResponse<InlineResponse2009>> {
    return JudgementsApiFp(this.configuration)
      .getV4AppApiJudgementSingle(id, cid, strict, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Get the given judgement for this contest.
   * @param {string} id The ID of the entity
   * @param {string} cid The contest ID
   * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof JudgementsApi
   */
  public async getV4AppApiJudgementSingle1(
    id: string,
    cid: string,
    strict?: boolean,
    options?: AxiosRequestConfig,
  ): Promise<AxiosResponse<InlineResponse2009>> {
    return JudgementsApiFp(this.configuration)
      .getV4AppApiJudgementSingle1(id, cid, strict, options)
      .then((request) => request(this.axios, this.basePath));
  }
}
