/* tslint:disable */
/* eslint-disable */
/**
 * DOMjudge
 * DOMjudge API v4
 *
 * OpenAPI spec version: 8.2.2
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import globalAxios, {
  AxiosResponse,
  AxiosInstance,
  AxiosRequestConfig,
} from "@/lib/axios";
import { Configuration } from "../configuration";
// Some imports not used depending on template conditions
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
} from "../base";
import { InlineResponse20013 } from "../models";
import { InlineResponse400 } from "../models";
import { Team, Photo } from "../models";
/**
 * TeamsApi - axios parameter creator
 * @export
 */
export const TeamsApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     *
     * @summary Delete the photo for the given team.
     * @param {string} id The ID of the entity
     * @param {string} cid The contest ID
     * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteV4AppApiTeamDeletephoto: async (
      id: string,
      cid: string,
      strict?: boolean,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          "id",
          "Required parameter id was null or undefined when calling deleteV4AppApiTeamDeletephoto.",
        );
      }
      // verify required parameter 'cid' is not null or undefined
      if (cid === null || cid === undefined) {
        throw new RequiredError(
          "cid",
          "Required parameter cid was null or undefined when calling deleteV4AppApiTeamDeletephoto.",
        );
      }
      const localVarPath = `/api/v4/teams/{id}/photo`
        .replace(`{${"id"}}`, encodeURIComponent(String(id)))
        .replace(`{${"cid"}}`, encodeURIComponent(String(cid)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions: AxiosRequestConfig = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication basicAuth required
      // http basic authentication required
      if (configuration && (configuration.username || configuration.password)) {
        localVarRequestOptions["auth"] = {
          username: configuration.username,
          password: configuration.password,
        };
      }

      if (strict !== undefined) {
        localVarQueryParameter["strict"] = strict;
      }

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.params) {
        query.set(key, options.params[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Delete the photo for the given team.
     * @param {string} id The ID of the entity
     * @param {string} cid The contest ID
     * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteV4DeleteTeamPhoto: async (
      id: string,
      cid: string,
      strict?: boolean,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          "id",
          "Required parameter id was null or undefined when calling deleteV4DeleteTeamPhoto.",
        );
      }
      // verify required parameter 'cid' is not null or undefined
      if (cid === null || cid === undefined) {
        throw new RequiredError(
          "cid",
          "Required parameter cid was null or undefined when calling deleteV4DeleteTeamPhoto.",
        );
      }
      const localVarPath = `/api/v4/contests/{cid}/teams/{id}/photo`
        .replace(`{${"id"}}`, encodeURIComponent(String(id)))
        .replace(`{${"cid"}}`, encodeURIComponent(String(cid)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions: AxiosRequestConfig = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication basicAuth required
      // http basic authentication required
      if (configuration && (configuration.username || configuration.password)) {
        localVarRequestOptions["auth"] = {
          username: configuration.username,
          password: configuration.password,
        };
      }

      if (strict !== undefined) {
        localVarQueryParameter["strict"] = strict;
      }

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.params) {
        query.set(key, options.params[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get all the teams for this contest.
     * @param {string} cid The contest ID
     * @param {Array<string>} [ids] Filter the objects to get on this list of ID&#x27;s
     * @param {string} [category] Only show teams for the given category
     * @param {string} [affiliation] Only show teams for the given affiliation / organization
     * @param {boolean} [_public] Only show visible teams, even for users with more permissions
     * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getV4AppApiTeamList: async (
      cid: string,
      ids?: Array<string>,
      category?: string,
      affiliation?: string,
      _public?: boolean,
      strict?: boolean,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'cid' is not null or undefined
      if (cid === null || cid === undefined) {
        throw new RequiredError(
          "cid",
          "Required parameter cid was null or undefined when calling getV4AppApiTeamList.",
        );
      }
      const localVarPath = `/api/v4/contests/{cid}/teams`.replace(
        `{${"cid"}}`,
        encodeURIComponent(String(cid)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions: AxiosRequestConfig = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication basicAuth required
      // http basic authentication required
      if (configuration && (configuration.username || configuration.password)) {
        localVarRequestOptions["auth"] = {
          username: configuration.username,
          password: configuration.password,
        };
      }

      if (ids) {
        localVarQueryParameter["ids[]"] = ids;
      }

      if (category !== undefined) {
        localVarQueryParameter["category"] = category;
      }

      if (affiliation !== undefined) {
        localVarQueryParameter["affiliation"] = affiliation;
      }

      if (_public !== undefined) {
        localVarQueryParameter["public"] = _public;
      }

      if (strict !== undefined) {
        localVarQueryParameter["strict"] = strict;
      }

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.params) {
        query.set(key, options.params[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get all the teams for this contest.
     * @param {string} cid The contest ID
     * @param {Array<string>} [ids] Filter the objects to get on this list of ID&#x27;s
     * @param {string} [category] Only show teams for the given category
     * @param {string} [affiliation] Only show teams for the given affiliation / organization
     * @param {boolean} [_public] Only show visible teams, even for users with more permissions
     * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getV4AppApiTeamList1: async (
      cid: string,
      ids?: Array<string>,
      category?: string,
      affiliation?: string,
      _public?: boolean,
      strict?: boolean,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'cid' is not null or undefined
      if (cid === null || cid === undefined) {
        throw new RequiredError(
          "cid",
          "Required parameter cid was null or undefined when calling getV4AppApiTeamList1.",
        );
      }
      const localVarPath = `/api/v4/teams`.replace(
        `{${"cid"}}`,
        encodeURIComponent(String(cid)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions: AxiosRequestConfig = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication basicAuth required
      // http basic authentication required
      if (configuration && (configuration.username || configuration.password)) {
        localVarRequestOptions["auth"] = {
          username: configuration.username,
          password: configuration.password,
        };
      }

      if (ids) {
        localVarQueryParameter["ids[]"] = ids;
      }

      if (category !== undefined) {
        localVarQueryParameter["category"] = category;
      }

      if (affiliation !== undefined) {
        localVarQueryParameter["affiliation"] = affiliation;
      }

      if (_public !== undefined) {
        localVarQueryParameter["public"] = _public;
      }

      if (strict !== undefined) {
        localVarQueryParameter["strict"] = strict;
      }

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.params) {
        query.set(key, options.params[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get the photo for the given team.
     * @param {string} id The ID of the entity
     * @param {string} cid The contest ID
     * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getV4AppApiTeamPhoto: async (
      id: string,
      cid: string,
      strict?: boolean,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          "id",
          "Required parameter id was null or undefined when calling getV4AppApiTeamPhoto.",
        );
      }
      // verify required parameter 'cid' is not null or undefined
      if (cid === null || cid === undefined) {
        throw new RequiredError(
          "cid",
          "Required parameter cid was null or undefined when calling getV4AppApiTeamPhoto.",
        );
      }
      const localVarPath = `/api/v4/teams/{id}/photo`
        .replace(`{${"id"}}`, encodeURIComponent(String(id)))
        .replace(`{${"cid"}}`, encodeURIComponent(String(cid)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions: AxiosRequestConfig = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication basicAuth required
      // http basic authentication required
      if (configuration && (configuration.username || configuration.password)) {
        localVarRequestOptions["auth"] = {
          username: configuration.username,
          password: configuration.password,
        };
      }

      if (strict !== undefined) {
        localVarQueryParameter["strict"] = strict;
      }

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.params) {
        query.set(key, options.params[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get the given team for this contest.
     * @param {string} id The ID of the entity
     * @param {string} cid The contest ID
     * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getV4AppApiTeamSingle: async (
      id: string,
      cid: string,
      strict?: boolean,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          "id",
          "Required parameter id was null or undefined when calling getV4AppApiTeamSingle.",
        );
      }
      // verify required parameter 'cid' is not null or undefined
      if (cid === null || cid === undefined) {
        throw new RequiredError(
          "cid",
          "Required parameter cid was null or undefined when calling getV4AppApiTeamSingle.",
        );
      }
      const localVarPath = `/api/v4/contests/{cid}/teams/{id}`
        .replace(`{${"id"}}`, encodeURIComponent(String(id)))
        .replace(`{${"cid"}}`, encodeURIComponent(String(cid)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions: AxiosRequestConfig = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication basicAuth required
      // http basic authentication required
      if (configuration && (configuration.username || configuration.password)) {
        localVarRequestOptions["auth"] = {
          username: configuration.username,
          password: configuration.password,
        };
      }

      if (strict !== undefined) {
        localVarQueryParameter["strict"] = strict;
      }

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.params) {
        query.set(key, options.params[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get the given team for this contest.
     * @param {string} id The ID of the entity
     * @param {string} cid The contest ID
     * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getV4AppApiTeamSingle1: async (
      id: string,
      cid: string,
      strict?: boolean,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          "id",
          "Required parameter id was null or undefined when calling getV4AppApiTeamSingle1.",
        );
      }
      // verify required parameter 'cid' is not null or undefined
      if (cid === null || cid === undefined) {
        throw new RequiredError(
          "cid",
          "Required parameter cid was null or undefined when calling getV4AppApiTeamSingle1.",
        );
      }
      const localVarPath = `/api/v4/teams/{id}`
        .replace(`{${"id"}}`, encodeURIComponent(String(id)))
        .replace(`{${"cid"}}`, encodeURIComponent(String(cid)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions: AxiosRequestConfig = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication basicAuth required
      // http basic authentication required
      if (configuration && (configuration.username || configuration.password)) {
        localVarRequestOptions["auth"] = {
          username: configuration.username,
          password: configuration.password,
        };
      }

      if (strict !== undefined) {
        localVarQueryParameter["strict"] = strict;
      }

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.params) {
        query.set(key, options.params[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get the photo for the given team.
     * @param {string} id The ID of the entity
     * @param {string} cid The contest ID
     * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getV4TeamPhoto: async (
      id: string,
      cid: string,
      strict?: boolean,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          "id",
          "Required parameter id was null or undefined when calling getV4TeamPhoto.",
        );
      }
      // verify required parameter 'cid' is not null or undefined
      if (cid === null || cid === undefined) {
        throw new RequiredError(
          "cid",
          "Required parameter cid was null or undefined when calling getV4TeamPhoto.",
        );
      }
      const localVarPath = `/api/v4/contests/{cid}/teams/{id}/photo`
        .replace(`{${"id"}}`, encodeURIComponent(String(id)))
        .replace(`{${"cid"}}`, encodeURIComponent(String(cid)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions: AxiosRequestConfig = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication basicAuth required
      // http basic authentication required
      if (configuration && (configuration.username || configuration.password)) {
        localVarRequestOptions["auth"] = {
          username: configuration.username,
          password: configuration.password,
        };
      }

      if (strict !== undefined) {
        localVarQueryParameter["strict"] = strict;
      }

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.params) {
        query.set(key, options.params[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Add a new team.
     * @param {string} organization_id
     * @param {boolean} hidden
     * @param {Array<string>} group_ids
     * @param {string} affiliation
     * @param {string} nationality
     * @param {string} id
     * @param {string} icpc_id
     * @param {string} name
     * @param {string} display_name
     * @param {string} public_description
     * @param {string} cid The contest ID
     * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postV4AppApiTeamAddForm: async (
      organization_id: string,
      hidden: boolean,
      group_ids: Array<string>,
      affiliation: string,
      nationality: string,
      id: string,
      icpc_id: string,
      name: string,
      display_name: string,
      public_description: string,
      cid: string,
      strict?: boolean,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'organization_id' is not null or undefined
      if (organization_id === null || organization_id === undefined) {
        throw new RequiredError(
          "organization_id",
          "Required parameter organization_id was null or undefined when calling postV4AppApiTeamAddForm.",
        );
      }
      // verify required parameter 'hidden' is not null or undefined
      if (hidden === null || hidden === undefined) {
        throw new RequiredError(
          "hidden",
          "Required parameter hidden was null or undefined when calling postV4AppApiTeamAddForm.",
        );
      }
      // verify required parameter 'group_ids' is not null or undefined
      if (group_ids === null || group_ids === undefined) {
        throw new RequiredError(
          "group_ids",
          "Required parameter group_ids was null or undefined when calling postV4AppApiTeamAddForm.",
        );
      }
      // verify required parameter 'affiliation' is not null or undefined
      if (affiliation === null || affiliation === undefined) {
        throw new RequiredError(
          "affiliation",
          "Required parameter affiliation was null or undefined when calling postV4AppApiTeamAddForm.",
        );
      }
      // verify required parameter 'nationality' is not null or undefined
      if (nationality === null || nationality === undefined) {
        throw new RequiredError(
          "nationality",
          "Required parameter nationality was null or undefined when calling postV4AppApiTeamAddForm.",
        );
      }
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          "id",
          "Required parameter id was null or undefined when calling postV4AppApiTeamAddForm.",
        );
      }
      // verify required parameter 'icpc_id' is not null or undefined
      if (icpc_id === null || icpc_id === undefined) {
        throw new RequiredError(
          "icpc_id",
          "Required parameter icpc_id was null or undefined when calling postV4AppApiTeamAddForm.",
        );
      }
      // verify required parameter 'name' is not null or undefined
      if (name === null || name === undefined) {
        throw new RequiredError(
          "name",
          "Required parameter name was null or undefined when calling postV4AppApiTeamAddForm.",
        );
      }
      // verify required parameter 'display_name' is not null or undefined
      if (display_name === null || display_name === undefined) {
        throw new RequiredError(
          "display_name",
          "Required parameter display_name was null or undefined when calling postV4AppApiTeamAddForm.",
        );
      }
      // verify required parameter 'public_description' is not null or undefined
      if (public_description === null || public_description === undefined) {
        throw new RequiredError(
          "public_description",
          "Required parameter public_description was null or undefined when calling postV4AppApiTeamAddForm.",
        );
      }
      // verify required parameter 'cid' is not null or undefined
      if (cid === null || cid === undefined) {
        throw new RequiredError(
          "cid",
          "Required parameter cid was null or undefined when calling postV4AppApiTeamAddForm.",
        );
      }
      const localVarPath = `/api/v4/contests/{cid}/teams`.replace(
        `{${"cid"}}`,
        encodeURIComponent(String(cid)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions: AxiosRequestConfig = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;
      const localVarFormParams = new FormData();

      // authentication basicAuth required
      // http basic authentication required
      if (configuration && (configuration.username || configuration.password)) {
        localVarRequestOptions["auth"] = {
          username: configuration.username,
          password: configuration.password,
        };
      }

      if (strict !== undefined) {
        localVarQueryParameter["strict"] = strict;
      }

      if (organization_id !== undefined) {
        localVarFormParams.append("organization_id", organization_id as any);
      }

      if (hidden !== undefined) {
        localVarFormParams.append("hidden", hidden as any);
      }
      if (group_ids) {
        group_ids.forEach((element) => {
          localVarFormParams.append("group_ids", element as any);
        });
      }

      if (affiliation !== undefined) {
        localVarFormParams.append("affiliation", affiliation as any);
      }

      if (nationality !== undefined) {
        localVarFormParams.append("nationality", nationality as any);
      }

      if (id !== undefined) {
        localVarFormParams.append("id", id as any);
      }

      if (icpc_id !== undefined) {
        localVarFormParams.append("icpc_id", icpc_id as any);
      }

      if (name !== undefined) {
        localVarFormParams.append("name", name as any);
      }

      if (display_name !== undefined) {
        localVarFormParams.append("display_name", display_name as any);
      }

      if (public_description !== undefined) {
        localVarFormParams.append(
          "public_description",
          public_description as any,
        );
      }

      localVarHeaderParameter["Content-Type"] = "multipart/form-data";
      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.params) {
        query.set(key, options.params[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = localVarFormParams;

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Add a new team.
     * @param {Team} body
     * @param {string} cid The contest ID
     * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postV4AppApiTeamAdd: async (
      body: Team,
      cid: string,
      strict?: boolean,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          "body",
          "Required parameter body was null or undefined when calling postV4AppApiTeamAdd.",
        );
      }
      // verify required parameter 'cid' is not null or undefined
      if (cid === null || cid === undefined) {
        throw new RequiredError(
          "cid",
          "Required parameter cid was null or undefined when calling postV4AppApiTeamAdd.",
        );
      }
      const localVarPath = `/api/v4/contests/{cid}/teams`.replace(
        `{${"cid"}}`,
        encodeURIComponent(String(cid)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions: AxiosRequestConfig = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;
      const localVarFormParams = new FormData();

      // authentication basicAuth required
      // http basic authentication required
      if (configuration && (configuration.username || configuration.password)) {
        localVarRequestOptions["auth"] = {
          username: configuration.username,
          password: configuration.password,
        };
      }

      if (strict !== undefined) {
        localVarQueryParameter["strict"] = strict;
      }

      localVarHeaderParameter["Content-Type"] = "multipart/form-data";

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.params) {
        query.set(key, options.params[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      const needsSerialization =
        typeof body !== "string" ||
        localVarRequestOptions.headers?.["Content-Type"] === "application/json";
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || "";

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Add a new team.
     * @param {string} organization_id
     * @param {boolean} hidden
     * @param {Array<string>} group_ids
     * @param {string} affiliation
     * @param {string} nationality
     * @param {string} id
     * @param {string} icpc_id
     * @param {string} name
     * @param {string} display_name
     * @param {string} public_description
     * @param {string} cid The contest ID
     * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postV4AppApiTeamAdd1Form: async (
      organization_id: string,
      hidden: boolean,
      group_ids: Array<string>,
      affiliation: string,
      nationality: string,
      id: string,
      icpc_id: string,
      name: string,
      display_name: string,
      public_description: string,
      cid: string,
      strict?: boolean,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'organization_id' is not null or undefined
      if (organization_id === null || organization_id === undefined) {
        throw new RequiredError(
          "organization_id",
          "Required parameter organization_id was null or undefined when calling postV4AppApiTeamAdd1Form.",
        );
      }
      // verify required parameter 'hidden' is not null or undefined
      if (hidden === null || hidden === undefined) {
        throw new RequiredError(
          "hidden",
          "Required parameter hidden was null or undefined when calling postV4AppApiTeamAdd1Form.",
        );
      }
      // verify required parameter 'group_ids' is not null or undefined
      if (group_ids === null || group_ids === undefined) {
        throw new RequiredError(
          "group_ids",
          "Required parameter group_ids was null or undefined when calling postV4AppApiTeamAdd1Form.",
        );
      }
      // verify required parameter 'affiliation' is not null or undefined
      if (affiliation === null || affiliation === undefined) {
        throw new RequiredError(
          "affiliation",
          "Required parameter affiliation was null or undefined when calling postV4AppApiTeamAdd1Form.",
        );
      }
      // verify required parameter 'nationality' is not null or undefined
      if (nationality === null || nationality === undefined) {
        throw new RequiredError(
          "nationality",
          "Required parameter nationality was null or undefined when calling postV4AppApiTeamAdd1Form.",
        );
      }
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          "id",
          "Required parameter id was null or undefined when calling postV4AppApiTeamAdd1Form.",
        );
      }
      // verify required parameter 'icpc_id' is not null or undefined
      if (icpc_id === null || icpc_id === undefined) {
        throw new RequiredError(
          "icpc_id",
          "Required parameter icpc_id was null or undefined when calling postV4AppApiTeamAdd1Form.",
        );
      }
      // verify required parameter 'name' is not null or undefined
      if (name === null || name === undefined) {
        throw new RequiredError(
          "name",
          "Required parameter name was null or undefined when calling postV4AppApiTeamAdd1Form.",
        );
      }
      // verify required parameter 'display_name' is not null or undefined
      if (display_name === null || display_name === undefined) {
        throw new RequiredError(
          "display_name",
          "Required parameter display_name was null or undefined when calling postV4AppApiTeamAdd1Form.",
        );
      }
      // verify required parameter 'public_description' is not null or undefined
      if (public_description === null || public_description === undefined) {
        throw new RequiredError(
          "public_description",
          "Required parameter public_description was null or undefined when calling postV4AppApiTeamAdd1Form.",
        );
      }
      // verify required parameter 'cid' is not null or undefined
      if (cid === null || cid === undefined) {
        throw new RequiredError(
          "cid",
          "Required parameter cid was null or undefined when calling postV4AppApiTeamAdd1Form.",
        );
      }
      const localVarPath = `/api/v4/teams`.replace(
        `{${"cid"}}`,
        encodeURIComponent(String(cid)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions: AxiosRequestConfig = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;
      const localVarFormParams = new FormData();

      // authentication basicAuth required
      // http basic authentication required
      if (configuration && (configuration.username || configuration.password)) {
        localVarRequestOptions["auth"] = {
          username: configuration.username,
          password: configuration.password,
        };
      }

      if (strict !== undefined) {
        localVarQueryParameter["strict"] = strict;
      }

      if (organization_id !== undefined) {
        localVarFormParams.append("organization_id", organization_id as any);
      }

      if (hidden !== undefined) {
        localVarFormParams.append("hidden", hidden as any);
      }
      if (group_ids) {
        group_ids.forEach((element) => {
          localVarFormParams.append("group_ids", element as any);
        });
      }

      if (affiliation !== undefined) {
        localVarFormParams.append("affiliation", affiliation as any);
      }

      if (nationality !== undefined) {
        localVarFormParams.append("nationality", nationality as any);
      }

      if (id !== undefined) {
        localVarFormParams.append("id", id as any);
      }

      if (icpc_id !== undefined) {
        localVarFormParams.append("icpc_id", icpc_id as any);
      }

      if (name !== undefined) {
        localVarFormParams.append("name", name as any);
      }

      if (display_name !== undefined) {
        localVarFormParams.append("display_name", display_name as any);
      }

      if (public_description !== undefined) {
        localVarFormParams.append(
          "public_description",
          public_description as any,
        );
      }

      localVarHeaderParameter["Content-Type"] = "multipart/form-data";
      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.params) {
        query.set(key, options.params[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = localVarFormParams;

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Add a new team.
     * @param {Team} body
     * @param {string} cid The contest ID
     * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postV4AppApiTeamAdd1: async (
      body: Team,
      cid: string,
      strict?: boolean,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          "body",
          "Required parameter body was null or undefined when calling postV4AppApiTeamAdd1.",
        );
      }
      // verify required parameter 'cid' is not null or undefined
      if (cid === null || cid === undefined) {
        throw new RequiredError(
          "cid",
          "Required parameter cid was null or undefined when calling postV4AppApiTeamAdd1.",
        );
      }
      const localVarPath = `/api/v4/teams`.replace(
        `{${"cid"}}`,
        encodeURIComponent(String(cid)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions: AxiosRequestConfig = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;
      const localVarFormParams = new FormData();

      // authentication basicAuth required
      // http basic authentication required
      if (configuration && (configuration.username || configuration.password)) {
        localVarRequestOptions["auth"] = {
          username: configuration.username,
          password: configuration.password,
        };
      }

      if (strict !== undefined) {
        localVarQueryParameter["strict"] = strict;
      }

      localVarHeaderParameter["Content-Type"] = "multipart/form-data";

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.params) {
        query.set(key, options.params[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      const needsSerialization =
        typeof body !== "string" ||
        localVarRequestOptions.headers?.["Content-Type"] === "application/json";
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || "";

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Set the photo for the given team.
     * @param {Blob} photo
     * @param {string} id The ID of the entity
     * @param {string} cid The contest ID
     * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postV4AppApiTeamSetphotoForm: async (
      photo: Blob,
      id: string,
      cid: string,
      strict?: boolean,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'photo' is not null or undefined
      if (photo === null || photo === undefined) {
        throw new RequiredError(
          "photo",
          "Required parameter photo was null or undefined when calling postV4AppApiTeamSetphotoForm.",
        );
      }
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          "id",
          "Required parameter id was null or undefined when calling postV4AppApiTeamSetphotoForm.",
        );
      }
      // verify required parameter 'cid' is not null or undefined
      if (cid === null || cid === undefined) {
        throw new RequiredError(
          "cid",
          "Required parameter cid was null or undefined when calling postV4AppApiTeamSetphotoForm.",
        );
      }
      const localVarPath = `/api/v4/teams/{id}/photo`
        .replace(`{${"id"}}`, encodeURIComponent(String(id)))
        .replace(`{${"cid"}}`, encodeURIComponent(String(cid)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions: AxiosRequestConfig = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;
      const localVarFormParams = new FormData();

      // authentication basicAuth required
      // http basic authentication required
      if (configuration && (configuration.username || configuration.password)) {
        localVarRequestOptions["auth"] = {
          username: configuration.username,
          password: configuration.password,
        };
      }

      if (strict !== undefined) {
        localVarQueryParameter["strict"] = strict;
      }

      if (photo !== undefined) {
        localVarFormParams.append("photo", photo as any);
      }

      localVarHeaderParameter["Content-Type"] = "multipart/form-data";
      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.params) {
        query.set(key, options.params[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = localVarFormParams;

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Set the photo for the given team.
     * @param {Blob} photo
     * @param {string} id The ID of the entity
     * @param {string} cid The contest ID
     * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postV4PostTeamPhotoForm: async (
      photo: Blob,
      id: string,
      cid: string,
      strict?: boolean,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'photo' is not null or undefined
      if (photo === null || photo === undefined) {
        throw new RequiredError(
          "photo",
          "Required parameter photo was null or undefined when calling postV4PostTeamPhotoForm.",
        );
      }
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          "id",
          "Required parameter id was null or undefined when calling postV4PostTeamPhotoForm.",
        );
      }
      // verify required parameter 'cid' is not null or undefined
      if (cid === null || cid === undefined) {
        throw new RequiredError(
          "cid",
          "Required parameter cid was null or undefined when calling postV4PostTeamPhotoForm.",
        );
      }
      const localVarPath = `/api/v4/contests/{cid}/teams/{id}/photo`
        .replace(`{${"id"}}`, encodeURIComponent(String(id)))
        .replace(`{${"cid"}}`, encodeURIComponent(String(cid)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions: AxiosRequestConfig = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;
      const localVarFormParams = new FormData();

      // authentication basicAuth required
      // http basic authentication required
      if (configuration && (configuration.username || configuration.password)) {
        localVarRequestOptions["auth"] = {
          username: configuration.username,
          password: configuration.password,
        };
      }

      if (strict !== undefined) {
        localVarQueryParameter["strict"] = strict;
      }

      if (photo !== undefined) {
        localVarFormParams.append("photo", photo as any);
      }

      localVarHeaderParameter["Content-Type"] = "multipart/form-data";
      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.params) {
        query.set(key, options.params[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = localVarFormParams;

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Set the photo for the given team.
     * @param {Blob} photo
     * @param {string} id The ID of the entity
     * @param {string} cid The contest ID
     * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putV4AppApiTeamSetphoto1Form: async (
      photo: Blob,
      id: string,
      cid: string,
      strict?: boolean,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'photo' is not null or undefined
      if (photo === null || photo === undefined) {
        throw new RequiredError(
          "photo",
          "Required parameter photo was null or undefined when calling putV4AppApiTeamSetphoto1Form.",
        );
      }
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          "id",
          "Required parameter id was null or undefined when calling putV4AppApiTeamSetphoto1Form.",
        );
      }
      // verify required parameter 'cid' is not null or undefined
      if (cid === null || cid === undefined) {
        throw new RequiredError(
          "cid",
          "Required parameter cid was null or undefined when calling putV4AppApiTeamSetphoto1Form.",
        );
      }
      const localVarPath = `/api/v4/teams/{id}/photo`
        .replace(`{${"id"}}`, encodeURIComponent(String(id)))
        .replace(`{${"cid"}}`, encodeURIComponent(String(cid)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions: AxiosRequestConfig = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;
      const localVarFormParams = new FormData();

      // authentication basicAuth required
      // http basic authentication required
      if (configuration && (configuration.username || configuration.password)) {
        localVarRequestOptions["auth"] = {
          username: configuration.username,
          password: configuration.password,
        };
      }

      if (strict !== undefined) {
        localVarQueryParameter["strict"] = strict;
      }

      if (photo !== undefined) {
        localVarFormParams.append("photo", photo as any);
      }

      localVarHeaderParameter["Content-Type"] = "multipart/form-data";
      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.params) {
        query.set(key, options.params[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = localVarFormParams;

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Set the photo for the given team.
     * @param {Blob} photo
     * @param {string} id The ID of the entity
     * @param {string} cid The contest ID
     * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putV4PutTeamPhotoForm: async (
      photo: Blob,
      id: string,
      cid: string,
      strict?: boolean,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'photo' is not null or undefined
      if (photo === null || photo === undefined) {
        throw new RequiredError(
          "photo",
          "Required parameter photo was null or undefined when calling putV4PutTeamPhotoForm.",
        );
      }
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          "id",
          "Required parameter id was null or undefined when calling putV4PutTeamPhotoForm.",
        );
      }
      // verify required parameter 'cid' is not null or undefined
      if (cid === null || cid === undefined) {
        throw new RequiredError(
          "cid",
          "Required parameter cid was null or undefined when calling putV4PutTeamPhotoForm.",
        );
      }
      const localVarPath = `/api/v4/contests/{cid}/teams/{id}/photo`
        .replace(`{${"id"}}`, encodeURIComponent(String(id)))
        .replace(`{${"cid"}}`, encodeURIComponent(String(cid)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions: AxiosRequestConfig = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;
      const localVarFormParams = new FormData();

      // authentication basicAuth required
      // http basic authentication required
      if (configuration && (configuration.username || configuration.password)) {
        localVarRequestOptions["auth"] = {
          username: configuration.username,
          password: configuration.password,
        };
      }

      if (strict !== undefined) {
        localVarQueryParameter["strict"] = strict;
      }

      if (photo !== undefined) {
        localVarFormParams.append("photo", photo as any);
      }

      localVarHeaderParameter["Content-Type"] = "multipart/form-data";
      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.params) {
        query.set(key, options.params[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = localVarFormParams;

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * TeamsApi - functional programming interface
 * @export
 */
export const TeamsApiFp = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary Delete the photo for the given team.
     * @param {string} id The ID of the entity
     * @param {string} cid The contest ID
     * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteV4AppApiTeamDeletephoto(
      id: string,
      cid: string,
      strict?: boolean,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>
    > {
      const localVarAxiosArgs = await TeamsApiAxiosParamCreator(
        configuration,
      ).deleteV4AppApiTeamDeletephoto(id, cid, strict, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs: AxiosRequestConfig = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Delete the photo for the given team.
     * @param {string} id The ID of the entity
     * @param {string} cid The contest ID
     * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteV4DeleteTeamPhoto(
      id: string,
      cid: string,
      strict?: boolean,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>
    > {
      const localVarAxiosArgs = await TeamsApiAxiosParamCreator(
        configuration,
      ).deleteV4DeleteTeamPhoto(id, cid, strict, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs: AxiosRequestConfig = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Get all the teams for this contest.
     * @param {string} cid The contest ID
     * @param {Array<string>} [ids] Filter the objects to get on this list of ID&#x27;s
     * @param {string} [category] Only show teams for the given category
     * @param {string} [affiliation] Only show teams for the given affiliation / organization
     * @param {boolean} [_public] Only show visible teams, even for users with more permissions
     * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getV4AppApiTeamList(
      cid: string,
      ids?: Array<string>,
      category?: string,
      affiliation?: string,
      _public?: boolean,
      strict?: boolean,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => Promise<AxiosResponse<Array<Team & Photo>>>
    > {
      const localVarAxiosArgs = await TeamsApiAxiosParamCreator(
        configuration,
      ).getV4AppApiTeamList(
        cid,
        ids,
        category,
        affiliation,
        _public,
        strict,
        options,
      );
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs: AxiosRequestConfig = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Get all the teams for this contest.
     * @param {string} cid The contest ID
     * @param {Array<string>} [ids] Filter the objects to get on this list of ID&#x27;s
     * @param {string} [category] Only show teams for the given category
     * @param {string} [affiliation] Only show teams for the given affiliation / organization
     * @param {boolean} [_public] Only show visible teams, even for users with more permissions
     * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getV4AppApiTeamList1(
      cid: string,
      ids?: Array<string>,
      category?: string,
      affiliation?: string,
      _public?: boolean,
      strict?: boolean,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => Promise<AxiosResponse<Array<Team & Photo>>>
    > {
      const localVarAxiosArgs = await TeamsApiAxiosParamCreator(
        configuration,
      ).getV4AppApiTeamList1(
        cid,
        ids,
        category,
        affiliation,
        _public,
        strict,
        options,
      );
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs: AxiosRequestConfig = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Get the photo for the given team.
     * @param {string} id The ID of the entity
     * @param {string} cid The contest ID
     * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getV4AppApiTeamPhoto(
      id: string,
      cid: string,
      strict?: boolean,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>
    > {
      const localVarAxiosArgs = await TeamsApiAxiosParamCreator(
        configuration,
      ).getV4AppApiTeamPhoto(id, cid, strict, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs: AxiosRequestConfig = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Get the given team for this contest.
     * @param {string} id The ID of the entity
     * @param {string} cid The contest ID
     * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getV4AppApiTeamSingle(
      id: string,
      cid: string,
      strict?: boolean,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => Promise<AxiosResponse<InlineResponse20013>>
    > {
      const localVarAxiosArgs = await TeamsApiAxiosParamCreator(
        configuration,
      ).getV4AppApiTeamSingle(id, cid, strict, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs: AxiosRequestConfig = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Get the given team for this contest.
     * @param {string} id The ID of the entity
     * @param {string} cid The contest ID
     * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getV4AppApiTeamSingle1(
      id: string,
      cid: string,
      strict?: boolean,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => Promise<AxiosResponse<InlineResponse20013>>
    > {
      const localVarAxiosArgs = await TeamsApiAxiosParamCreator(
        configuration,
      ).getV4AppApiTeamSingle1(id, cid, strict, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs: AxiosRequestConfig = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Get the photo for the given team.
     * @param {string} id The ID of the entity
     * @param {string} cid The contest ID
     * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getV4TeamPhoto(
      id: string,
      cid: string,
      strict?: boolean,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>
    > {
      const localVarAxiosArgs = await TeamsApiAxiosParamCreator(
        configuration,
      ).getV4TeamPhoto(id, cid, strict, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs: AxiosRequestConfig = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Add a new team.
     * @param {string} organization_id
     * @param {boolean} hidden
     * @param {Array<string>} group_ids
     * @param {string} affiliation
     * @param {string} nationality
     * @param {string} id
     * @param {string} icpc_id
     * @param {string} name
     * @param {string} display_name
     * @param {string} public_description
     * @param {string} cid The contest ID
     * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async postV4AppApiTeamAddForm(
      organization_id: string,
      hidden: boolean,
      group_ids: Array<string>,
      affiliation: string,
      nationality: string,
      id: string,
      icpc_id: string,
      name: string,
      display_name: string,
      public_description: string,
      cid: string,
      strict?: boolean,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Team>>
    > {
      const localVarAxiosArgs = await TeamsApiAxiosParamCreator(
        configuration,
      ).postV4AppApiTeamAddForm(
        organization_id,
        hidden,
        group_ids,
        affiliation,
        nationality,
        id,
        icpc_id,
        name,
        display_name,
        public_description,
        cid,
        strict,
        options,
      );
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs: AxiosRequestConfig = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Add a new team.
     * @param {Team} body
     * @param {string} cid The contest ID
     * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async postV4AppApiTeamAdd(
      body: Team,
      cid: string,
      strict?: boolean,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Team>>
    > {
      const localVarAxiosArgs = await TeamsApiAxiosParamCreator(
        configuration,
      ).postV4AppApiTeamAdd(body, cid, strict, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs: AxiosRequestConfig = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Add a new team.
     * @param {string} organization_id
     * @param {boolean} hidden
     * @param {Array<string>} group_ids
     * @param {string} affiliation
     * @param {string} nationality
     * @param {string} id
     * @param {string} icpc_id
     * @param {string} name
     * @param {string} display_name
     * @param {string} public_description
     * @param {string} cid The contest ID
     * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async postV4AppApiTeamAdd1Form(
      organization_id: string,
      hidden: boolean,
      group_ids: Array<string>,
      affiliation: string,
      nationality: string,
      id: string,
      icpc_id: string,
      name: string,
      display_name: string,
      public_description: string,
      cid: string,
      strict?: boolean,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Team>>
    > {
      const localVarAxiosArgs = await TeamsApiAxiosParamCreator(
        configuration,
      ).postV4AppApiTeamAdd1Form(
        organization_id,
        hidden,
        group_ids,
        affiliation,
        nationality,
        id,
        icpc_id,
        name,
        display_name,
        public_description,
        cid,
        strict,
        options,
      );
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs: AxiosRequestConfig = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Add a new team.
     * @param {Team} body
     * @param {string} cid The contest ID
     * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async postV4AppApiTeamAdd1(
      body: Team,
      cid: string,
      strict?: boolean,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Team>>
    > {
      const localVarAxiosArgs = await TeamsApiAxiosParamCreator(
        configuration,
      ).postV4AppApiTeamAdd1(body, cid, strict, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs: AxiosRequestConfig = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Set the photo for the given team.
     * @param {Blob} photo
     * @param {string} id The ID of the entity
     * @param {string} cid The contest ID
     * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async postV4AppApiTeamSetphotoForm(
      photo: Blob,
      id: string,
      cid: string,
      strict?: boolean,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>
    > {
      const localVarAxiosArgs = await TeamsApiAxiosParamCreator(
        configuration,
      ).postV4AppApiTeamSetphotoForm(photo, id, cid, strict, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs: AxiosRequestConfig = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Set the photo for the given team.
     * @param {Blob} photo
     * @param {string} id The ID of the entity
     * @param {string} cid The contest ID
     * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async postV4PostTeamPhotoForm(
      photo: Blob,
      id: string,
      cid: string,
      strict?: boolean,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>
    > {
      const localVarAxiosArgs = await TeamsApiAxiosParamCreator(
        configuration,
      ).postV4PostTeamPhotoForm(photo, id, cid, strict, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs: AxiosRequestConfig = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Set the photo for the given team.
     * @param {Blob} photo
     * @param {string} id The ID of the entity
     * @param {string} cid The contest ID
     * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async putV4AppApiTeamSetphoto1Form(
      photo: Blob,
      id: string,
      cid: string,
      strict?: boolean,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>
    > {
      const localVarAxiosArgs = await TeamsApiAxiosParamCreator(
        configuration,
      ).putV4AppApiTeamSetphoto1Form(photo, id, cid, strict, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs: AxiosRequestConfig = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Set the photo for the given team.
     * @param {Blob} photo
     * @param {string} id The ID of the entity
     * @param {string} cid The contest ID
     * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async putV4PutTeamPhotoForm(
      photo: Blob,
      id: string,
      cid: string,
      strict?: boolean,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>
    > {
      const localVarAxiosArgs = await TeamsApiAxiosParamCreator(
        configuration,
      ).putV4PutTeamPhotoForm(photo, id, cid, strict, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs: AxiosRequestConfig = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
  };
};

/**
 * TeamsApi - factory interface
 * @export
 */
export const TeamsApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  return {
    /**
     *
     * @summary Delete the photo for the given team.
     * @param {string} id The ID of the entity
     * @param {string} cid The contest ID
     * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteV4AppApiTeamDeletephoto(
      id: string,
      cid: string,
      strict?: boolean,
      options?: AxiosRequestConfig,
    ): Promise<AxiosResponse<void>> {
      return TeamsApiFp(configuration)
        .deleteV4AppApiTeamDeletephoto(id, cid, strict, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Delete the photo for the given team.
     * @param {string} id The ID of the entity
     * @param {string} cid The contest ID
     * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteV4DeleteTeamPhoto(
      id: string,
      cid: string,
      strict?: boolean,
      options?: AxiosRequestConfig,
    ): Promise<AxiosResponse<void>> {
      return TeamsApiFp(configuration)
        .deleteV4DeleteTeamPhoto(id, cid, strict, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get all the teams for this contest.
     * @param {string} cid The contest ID
     * @param {Array<string>} [ids] Filter the objects to get on this list of ID&#x27;s
     * @param {string} [category] Only show teams for the given category
     * @param {string} [affiliation] Only show teams for the given affiliation / organization
     * @param {boolean} [_public] Only show visible teams, even for users with more permissions
     * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getV4AppApiTeamList(
      cid: string,
      ids?: Array<string>,
      category?: string,
      affiliation?: string,
      _public?: boolean,
      strict?: boolean,
      options?: AxiosRequestConfig,
    ): Promise<AxiosResponse<Array<Team & Photo>>> {
      return TeamsApiFp(configuration)
        .getV4AppApiTeamList(
          cid,
          ids,
          category,
          affiliation,
          _public,
          strict,
          options,
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get all the teams for this contest.
     * @param {string} cid The contest ID
     * @param {Array<string>} [ids] Filter the objects to get on this list of ID&#x27;s
     * @param {string} [category] Only show teams for the given category
     * @param {string} [affiliation] Only show teams for the given affiliation / organization
     * @param {boolean} [_public] Only show visible teams, even for users with more permissions
     * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getV4AppApiTeamList1(
      cid: string,
      ids?: Array<string>,
      category?: string,
      affiliation?: string,
      _public?: boolean,
      strict?: boolean,
      options?: AxiosRequestConfig,
    ): Promise<AxiosResponse<Array<Team & Photo>>> {
      return TeamsApiFp(configuration)
        .getV4AppApiTeamList1(
          cid,
          ids,
          category,
          affiliation,
          _public,
          strict,
          options,
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get the photo for the given team.
     * @param {string} id The ID of the entity
     * @param {string} cid The contest ID
     * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getV4AppApiTeamPhoto(
      id: string,
      cid: string,
      strict?: boolean,
      options?: AxiosRequestConfig,
    ): Promise<AxiosResponse<void>> {
      return TeamsApiFp(configuration)
        .getV4AppApiTeamPhoto(id, cid, strict, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get the given team for this contest.
     * @param {string} id The ID of the entity
     * @param {string} cid The contest ID
     * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getV4AppApiTeamSingle(
      id: string,
      cid: string,
      strict?: boolean,
      options?: AxiosRequestConfig,
    ): Promise<AxiosResponse<InlineResponse20013>> {
      return TeamsApiFp(configuration)
        .getV4AppApiTeamSingle(id, cid, strict, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get the given team for this contest.
     * @param {string} id The ID of the entity
     * @param {string} cid The contest ID
     * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getV4AppApiTeamSingle1(
      id: string,
      cid: string,
      strict?: boolean,
      options?: AxiosRequestConfig,
    ): Promise<AxiosResponse<InlineResponse20013>> {
      return TeamsApiFp(configuration)
        .getV4AppApiTeamSingle1(id, cid, strict, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get the photo for the given team.
     * @param {string} id The ID of the entity
     * @param {string} cid The contest ID
     * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getV4TeamPhoto(
      id: string,
      cid: string,
      strict?: boolean,
      options?: AxiosRequestConfig,
    ): Promise<AxiosResponse<void>> {
      return TeamsApiFp(configuration)
        .getV4TeamPhoto(id, cid, strict, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Add a new team.
     * @param {string} organization_id
     * @param {boolean} hidden
     * @param {Array<string>} group_ids
     * @param {string} affiliation
     * @param {string} nationality
     * @param {string} id
     * @param {string} icpc_id
     * @param {string} name
     * @param {string} display_name
     * @param {string} public_description
     * @param {string} cid The contest ID
     * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async postV4AppApiTeamAddForm(
      organization_id: string,
      hidden: boolean,
      group_ids: Array<string>,
      affiliation: string,
      nationality: string,
      id: string,
      icpc_id: string,
      name: string,
      display_name: string,
      public_description: string,
      cid: string,
      strict?: boolean,
      options?: AxiosRequestConfig,
    ): Promise<AxiosResponse<Team>> {
      return TeamsApiFp(configuration)
        .postV4AppApiTeamAddForm(
          organization_id,
          hidden,
          group_ids,
          affiliation,
          nationality,
          id,
          icpc_id,
          name,
          display_name,
          public_description,
          cid,
          strict,
          options,
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Add a new team.
     * @param {Team} body
     * @param {string} cid The contest ID
     * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async postV4AppApiTeamAdd(
      body: Team,
      cid: string,
      strict?: boolean,
      options?: AxiosRequestConfig,
    ): Promise<AxiosResponse<Team>> {
      return TeamsApiFp(configuration)
        .postV4AppApiTeamAdd(body, cid, strict, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Add a new team.
     * @param {string} organization_id
     * @param {boolean} hidden
     * @param {Array<string>} group_ids
     * @param {string} affiliation
     * @param {string} nationality
     * @param {string} id
     * @param {string} icpc_id
     * @param {string} name
     * @param {string} display_name
     * @param {string} public_description
     * @param {string} cid The contest ID
     * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async postV4AppApiTeamAdd1Form(
      organization_id: string,
      hidden: boolean,
      group_ids: Array<string>,
      affiliation: string,
      nationality: string,
      id: string,
      icpc_id: string,
      name: string,
      display_name: string,
      public_description: string,
      cid: string,
      strict?: boolean,
      options?: AxiosRequestConfig,
    ): Promise<AxiosResponse<Team>> {
      return TeamsApiFp(configuration)
        .postV4AppApiTeamAdd1Form(
          organization_id,
          hidden,
          group_ids,
          affiliation,
          nationality,
          id,
          icpc_id,
          name,
          display_name,
          public_description,
          cid,
          strict,
          options,
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Add a new team.
     * @param {Team} body
     * @param {string} cid The contest ID
     * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async postV4AppApiTeamAdd1(
      body: Team,
      cid: string,
      strict?: boolean,
      options?: AxiosRequestConfig,
    ): Promise<AxiosResponse<Team>> {
      return TeamsApiFp(configuration)
        .postV4AppApiTeamAdd1(body, cid, strict, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Set the photo for the given team.
     * @param {Blob} photo
     * @param {string} id The ID of the entity
     * @param {string} cid The contest ID
     * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async postV4AppApiTeamSetphotoForm(
      photo: Blob,
      id: string,
      cid: string,
      strict?: boolean,
      options?: AxiosRequestConfig,
    ): Promise<AxiosResponse<void>> {
      return TeamsApiFp(configuration)
        .postV4AppApiTeamSetphotoForm(photo, id, cid, strict, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Set the photo for the given team.
     * @param {Blob} photo
     * @param {string} id The ID of the entity
     * @param {string} cid The contest ID
     * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async postV4PostTeamPhotoForm(
      photo: Blob,
      id: string,
      cid: string,
      strict?: boolean,
      options?: AxiosRequestConfig,
    ): Promise<AxiosResponse<void>> {
      return TeamsApiFp(configuration)
        .postV4PostTeamPhotoForm(photo, id, cid, strict, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Set the photo for the given team.
     * @param {Blob} photo
     * @param {string} id The ID of the entity
     * @param {string} cid The contest ID
     * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async putV4AppApiTeamSetphoto1Form(
      photo: Blob,
      id: string,
      cid: string,
      strict?: boolean,
      options?: AxiosRequestConfig,
    ): Promise<AxiosResponse<void>> {
      return TeamsApiFp(configuration)
        .putV4AppApiTeamSetphoto1Form(photo, id, cid, strict, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Set the photo for the given team.
     * @param {Blob} photo
     * @param {string} id The ID of the entity
     * @param {string} cid The contest ID
     * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async putV4PutTeamPhotoForm(
      photo: Blob,
      id: string,
      cid: string,
      strict?: boolean,
      options?: AxiosRequestConfig,
    ): Promise<AxiosResponse<void>> {
      return TeamsApiFp(configuration)
        .putV4PutTeamPhotoForm(photo, id, cid, strict, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * TeamsApi - object-oriented interface
 * @export
 * @class TeamsApi
 * @extends {BaseAPI}
 */
export class TeamsApi extends BaseAPI {
  /**
   *
   * @summary Delete the photo for the given team.
   * @param {string} id The ID of the entity
   * @param {string} cid The contest ID
   * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TeamsApi
   */
  public async deleteV4AppApiTeamDeletephoto(
    id: string,
    cid: string,
    strict?: boolean,
    options?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>> {
    return TeamsApiFp(this.configuration)
      .deleteV4AppApiTeamDeletephoto(id, cid, strict, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Delete the photo for the given team.
   * @param {string} id The ID of the entity
   * @param {string} cid The contest ID
   * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TeamsApi
   */
  public async deleteV4DeleteTeamPhoto(
    id: string,
    cid: string,
    strict?: boolean,
    options?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>> {
    return TeamsApiFp(this.configuration)
      .deleteV4DeleteTeamPhoto(id, cid, strict, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Get all the teams for this contest.
   * @param {string} cid The contest ID
   * @param {Array<string>} [ids] Filter the objects to get on this list of ID&#x27;s
   * @param {string} [category] Only show teams for the given category
   * @param {string} [affiliation] Only show teams for the given affiliation / organization
   * @param {boolean} [_public] Only show visible teams, even for users with more permissions
   * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TeamsApi
   */
  public async getV4AppApiTeamList(
    cid: string,
    ids?: Array<string>,
    category?: string,
    affiliation?: string,
    _public?: boolean,
    strict?: boolean,
    options?: AxiosRequestConfig,
  ): Promise<AxiosResponse<Array<Team & Photo>>> {
    return TeamsApiFp(this.configuration)
      .getV4AppApiTeamList(
        cid,
        ids,
        category,
        affiliation,
        _public,
        strict,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Get all the teams for this contest.
   * @param {string} cid The contest ID
   * @param {Array<string>} [ids] Filter the objects to get on this list of ID&#x27;s
   * @param {string} [category] Only show teams for the given category
   * @param {string} [affiliation] Only show teams for the given affiliation / organization
   * @param {boolean} [_public] Only show visible teams, even for users with more permissions
   * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TeamsApi
   */
  public async getV4AppApiTeamList1(
    cid: string,
    ids?: Array<string>,
    category?: string,
    affiliation?: string,
    _public?: boolean,
    strict?: boolean,
    options?: AxiosRequestConfig,
  ): Promise<AxiosResponse<Array<Team & Photo>>> {
    return TeamsApiFp(this.configuration)
      .getV4AppApiTeamList1(
        cid,
        ids,
        category,
        affiliation,
        _public,
        strict,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Get the photo for the given team.
   * @param {string} id The ID of the entity
   * @param {string} cid The contest ID
   * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TeamsApi
   */
  public async getV4AppApiTeamPhoto(
    id: string,
    cid: string,
    strict?: boolean,
    options?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>> {
    return TeamsApiFp(this.configuration)
      .getV4AppApiTeamPhoto(id, cid, strict, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Get the given team for this contest.
   * @param {string} id The ID of the entity
   * @param {string} cid The contest ID
   * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TeamsApi
   */
  public async getV4AppApiTeamSingle(
    id: string,
    cid: string,
    strict?: boolean,
    options?: AxiosRequestConfig,
  ): Promise<AxiosResponse<InlineResponse20013>> {
    return TeamsApiFp(this.configuration)
      .getV4AppApiTeamSingle(id, cid, strict, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Get the given team for this contest.
   * @param {string} id The ID of the entity
   * @param {string} cid The contest ID
   * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TeamsApi
   */
  public async getV4AppApiTeamSingle1(
    id: string,
    cid: string,
    strict?: boolean,
    options?: AxiosRequestConfig,
  ): Promise<AxiosResponse<InlineResponse20013>> {
    return TeamsApiFp(this.configuration)
      .getV4AppApiTeamSingle1(id, cid, strict, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Get the photo for the given team.
   * @param {string} id The ID of the entity
   * @param {string} cid The contest ID
   * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TeamsApi
   */
  public async getV4TeamPhoto(
    id: string,
    cid: string,
    strict?: boolean,
    options?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>> {
    return TeamsApiFp(this.configuration)
      .getV4TeamPhoto(id, cid, strict, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Add a new team.
   * @param {string} organization_id
   * @param {boolean} hidden
   * @param {Array<string>} group_ids
   * @param {string} affiliation
   * @param {string} nationality
   * @param {string} id
   * @param {string} icpc_id
   * @param {string} name
   * @param {string} display_name
   * @param {string} public_description
   * @param {string} cid The contest ID
   * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TeamsApi
   */
  public async postV4AppApiTeamAddForm(
    organization_id: string,
    hidden: boolean,
    group_ids: Array<string>,
    affiliation: string,
    nationality: string,
    id: string,
    icpc_id: string,
    name: string,
    display_name: string,
    public_description: string,
    cid: string,
    strict?: boolean,
    options?: AxiosRequestConfig,
  ): Promise<AxiosResponse<Team>> {
    return TeamsApiFp(this.configuration)
      .postV4AppApiTeamAddForm(
        organization_id,
        hidden,
        group_ids,
        affiliation,
        nationality,
        id,
        icpc_id,
        name,
        display_name,
        public_description,
        cid,
        strict,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Add a new team.
   * @param {Team} body
   * @param {string} cid The contest ID
   * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TeamsApi
   */
  public async postV4AppApiTeamAdd(
    body: Team,
    cid: string,
    strict?: boolean,
    options?: AxiosRequestConfig,
  ): Promise<AxiosResponse<Team>> {
    return TeamsApiFp(this.configuration)
      .postV4AppApiTeamAdd(body, cid, strict, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Add a new team.
   * @param {string} organization_id
   * @param {boolean} hidden
   * @param {Array<string>} group_ids
   * @param {string} affiliation
   * @param {string} nationality
   * @param {string} id
   * @param {string} icpc_id
   * @param {string} name
   * @param {string} display_name
   * @param {string} public_description
   * @param {string} cid The contest ID
   * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TeamsApi
   */
  public async postV4AppApiTeamAdd1Form(
    organization_id: string,
    hidden: boolean,
    group_ids: Array<string>,
    affiliation: string,
    nationality: string,
    id: string,
    icpc_id: string,
    name: string,
    display_name: string,
    public_description: string,
    cid: string,
    strict?: boolean,
    options?: AxiosRequestConfig,
  ): Promise<AxiosResponse<Team>> {
    return TeamsApiFp(this.configuration)
      .postV4AppApiTeamAdd1Form(
        organization_id,
        hidden,
        group_ids,
        affiliation,
        nationality,
        id,
        icpc_id,
        name,
        display_name,
        public_description,
        cid,
        strict,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Add a new team.
   * @param {Team} body
   * @param {string} cid The contest ID
   * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TeamsApi
   */
  public async postV4AppApiTeamAdd1(
    body: Team,
    cid: string,
    strict?: boolean,
    options?: AxiosRequestConfig,
  ): Promise<AxiosResponse<Team>> {
    return TeamsApiFp(this.configuration)
      .postV4AppApiTeamAdd1(body, cid, strict, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Set the photo for the given team.
   * @param {Blob} photo
   * @param {string} id The ID of the entity
   * @param {string} cid The contest ID
   * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TeamsApi
   */
  public async postV4AppApiTeamSetphotoForm(
    photo: Blob,
    id: string,
    cid: string,
    strict?: boolean,
    options?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>> {
    return TeamsApiFp(this.configuration)
      .postV4AppApiTeamSetphotoForm(photo, id, cid, strict, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Set the photo for the given team.
   * @param {Blob} photo
   * @param {string} id The ID of the entity
   * @param {string} cid The contest ID
   * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TeamsApi
   */
  public async postV4PostTeamPhotoForm(
    photo: Blob,
    id: string,
    cid: string,
    strict?: boolean,
    options?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>> {
    return TeamsApiFp(this.configuration)
      .postV4PostTeamPhotoForm(photo, id, cid, strict, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Set the photo for the given team.
   * @param {Blob} photo
   * @param {string} id The ID of the entity
   * @param {string} cid The contest ID
   * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TeamsApi
   */
  public async putV4AppApiTeamSetphoto1Form(
    photo: Blob,
    id: string,
    cid: string,
    strict?: boolean,
    options?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>> {
    return TeamsApiFp(this.configuration)
      .putV4AppApiTeamSetphoto1Form(photo, id, cid, strict, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Set the photo for the given team.
   * @param {Blob} photo
   * @param {string} id The ID of the entity
   * @param {string} cid The contest ID
   * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TeamsApi
   */
  public async putV4PutTeamPhotoForm(
    photo: Blob,
    id: string,
    cid: string,
    strict?: boolean,
    options?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>> {
    return TeamsApiFp(this.configuration)
      .putV4PutTeamPhotoForm(photo, id, cid, strict, options)
      .then((request) => request(this.axios, this.basePath));
  }
}
