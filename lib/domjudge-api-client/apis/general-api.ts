/* tslint:disable */
/* eslint-disable */
/**
 * DOMjudge
 * DOMjudge API v4
 *
 * OpenAPI spec version: 8.2.2
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import globalAxios, {
  AxiosResponse,
  AxiosInstance,
  AxiosRequestConfig,
} from "axios";
import { Configuration } from "../configuration";
// Some imports not used depending on template conditions
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
} from "../base";
import { InlineResponse2004 } from "../models";
import { InlineResponse2005 } from "../models";
import { InlineResponse2006 } from "../models";
import { InlineResponse2007 } from "../models";
import { InlineResponse400 } from "../models";
import { User } from "../models";
/**
 * GeneralApi - axios parameter creator
 * @export
 */
export const GeneralApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     *
     * @summary Get information about the API and DOMjudge
     * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getV4ApiRoot: async (
      strict?: boolean,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v4/`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions: AxiosRequestConfig = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication basicAuth required
      // http basic authentication required
      if (configuration && (configuration.username || configuration.password)) {
        localVarRequestOptions["auth"] = {
          username: configuration.username,
          password: configuration.password,
        };
      }

      if (strict !== undefined) {
        localVarQueryParameter["strict"] = strict;
      }

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.params) {
        query.set(key, options.params[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get the flag for the given country.
     * @param {string} countryCode The ISO 3166-1 alpha-3 code for the country to get the flag for
     * @param {string} size Preferred aspect ratio as &lt;int&gt;x&lt;int&gt;, currently only 1x1 and 4x3 are available.
     * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getV4AppApiGeneralinfoCountryflag: async (
      countryCode: string,
      size: string,
      strict?: boolean,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'countryCode' is not null or undefined
      if (countryCode === null || countryCode === undefined) {
        throw new RequiredError(
          "countryCode",
          "Required parameter countryCode was null or undefined when calling getV4AppApiGeneralinfoCountryflag.",
        );
      }
      // verify required parameter 'size' is not null or undefined
      if (size === null || size === undefined) {
        throw new RequiredError(
          "size",
          "Required parameter size was null or undefined when calling getV4AppApiGeneralinfoCountryflag.",
        );
      }
      const localVarPath = `/api/v4/country-flags/{countryCode}/{size}`
        .replace(`{${"countryCode"}}`, encodeURIComponent(String(countryCode)))
        .replace(`{${"size"}}`, encodeURIComponent(String(size)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions: AxiosRequestConfig = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication basicAuth required
      // http basic authentication required
      if (configuration && (configuration.username || configuration.password)) {
        localVarRequestOptions["auth"] = {
          username: configuration.username,
          password: configuration.password,
        };
      }

      if (strict !== undefined) {
        localVarQueryParameter["strict"] = strict;
      }

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.params) {
        query.set(key, options.params[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Check the DOMjudge configuration.
     * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getV4AppApiGeneralinfoGetconfigcheck: async (
      strict?: boolean,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v4/config/check`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions: AxiosRequestConfig = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication basicAuth required
      // http basic authentication required
      if (configuration && (configuration.username || configuration.password)) {
        localVarRequestOptions["auth"] = {
          username: configuration.username,
          password: configuration.password,
        };
      }

      if (strict !== undefined) {
        localVarQueryParameter["strict"] = strict;
      }

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.params) {
        query.set(key, options.params[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get configuration variables.
     * @param {string} [name] Get only this configuration variable
     * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getV4AppApiGeneralinfoGetdatabaseconfiguration: async (
      name?: string,
      strict?: boolean,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v4/config`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions: AxiosRequestConfig = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication basicAuth required
      // http basic authentication required
      if (configuration && (configuration.username || configuration.password)) {
        localVarRequestOptions["auth"] = {
          username: configuration.username,
          password: configuration.password,
        };
      }

      if (name !== undefined) {
        localVarQueryParameter["name"] = name;
      }

      if (strict !== undefined) {
        localVarQueryParameter["strict"] = strict;
      }

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.params) {
        query.set(key, options.params[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get information about the API and DOMjudge
     * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getV4AppApiGeneralinfoGetinfo: async (
      strict?: boolean,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v4/info`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions: AxiosRequestConfig = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication basicAuth required
      // http basic authentication required
      if (configuration && (configuration.username || configuration.password)) {
        localVarRequestOptions["auth"] = {
          username: configuration.username,
          password: configuration.password,
        };
      }

      if (strict !== undefined) {
        localVarQueryParameter["strict"] = strict;
      }

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.params) {
        query.set(key, options.params[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get general status information
     * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getV4AppApiGeneralinfoGetstatus: async (
      strict?: boolean,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v4/status`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions: AxiosRequestConfig = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication basicAuth required
      // http basic authentication required
      if (configuration && (configuration.username || configuration.password)) {
        localVarRequestOptions["auth"] = {
          username: configuration.username,
          password: configuration.password,
        };
      }

      if (strict !== undefined) {
        localVarQueryParameter["strict"] = strict;
      }

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.params) {
        query.set(key, options.params[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get information about the currently logged in user.
     * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getV4AppApiGeneralinfoGetuser: async (
      strict?: boolean,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v4/user`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions: AxiosRequestConfig = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication basicAuth required
      // http basic authentication required
      if (configuration && (configuration.username || configuration.password)) {
        localVarRequestOptions["auth"] = {
          username: configuration.username,
          password: configuration.password,
        };
      }

      if (strict !== undefined) {
        localVarQueryParameter["strict"] = strict;
      }

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.params) {
        query.set(key, options.params[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get the current API version
     * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getV4AppApiGeneralinfoGetversion: async (
      strict?: boolean,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v4/version`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions: AxiosRequestConfig = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication basicAuth required
      // http basic authentication required
      if (configuration && (configuration.username || configuration.password)) {
        localVarRequestOptions["auth"] = {
          username: configuration.username,
          password: configuration.password,
        };
      }

      if (strict !== undefined) {
        localVarQueryParameter["strict"] = strict;
      }

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.params) {
        query.set(key, options.params[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Add a problem without linking it to a contest.
     * @param {Blob} zip
     * @param {string} problem
     * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postV4AppApiGeneralinfoAddproblemForm: async (
      zip: Blob,
      problem: string,
      strict?: boolean,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'zip' is not null or undefined
      if (zip === null || zip === undefined) {
        throw new RequiredError(
          "zip",
          "Required parameter zip was null or undefined when calling postV4AppApiGeneralinfoAddproblemForm.",
        );
      }
      // verify required parameter 'problem' is not null or undefined
      if (problem === null || problem === undefined) {
        throw new RequiredError(
          "problem",
          "Required parameter problem was null or undefined when calling postV4AppApiGeneralinfoAddproblemForm.",
        );
      }
      const localVarPath = `/api/v4/problems`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions: AxiosRequestConfig = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;
      const localVarFormParams = new FormData();

      // authentication basicAuth required
      // http basic authentication required
      if (configuration && (configuration.username || configuration.password)) {
        localVarRequestOptions["auth"] = {
          username: configuration.username,
          password: configuration.password,
        };
      }

      if (strict !== undefined) {
        localVarQueryParameter["strict"] = strict;
      }

      if (zip !== undefined) {
        localVarFormParams.append("zip", zip as any);
      }

      if (problem !== undefined) {
        localVarFormParams.append("problem", problem as any);
      }

      localVarHeaderParameter["Content-Type"] = "multipart/form-data";
      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.params) {
        query.set(key, options.params[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = localVarFormParams;

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Update configuration variables.
     * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putV4AppApiGeneralinfoUpdateconfiguration: async (
      strict?: boolean,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v4/config`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions: AxiosRequestConfig = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication basicAuth required
      // http basic authentication required
      if (configuration && (configuration.username || configuration.password)) {
        localVarRequestOptions["auth"] = {
          username: configuration.username,
          password: configuration.password,
        };
      }

      if (strict !== undefined) {
        localVarQueryParameter["strict"] = strict;
      }

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.params) {
        query.set(key, options.params[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * GeneralApi - functional programming interface
 * @export
 */
export const GeneralApiFp = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary Get information about the API and DOMjudge
     * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getV4ApiRoot(
      strict?: boolean,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => Promise<AxiosResponse<InlineResponse2005>>
    > {
      const localVarAxiosArgs = await GeneralApiAxiosParamCreator(
        configuration,
      ).getV4ApiRoot(strict, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs: AxiosRequestConfig = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Get the flag for the given country.
     * @param {string} countryCode The ISO 3166-1 alpha-3 code for the country to get the flag for
     * @param {string} size Preferred aspect ratio as &lt;int&gt;x&lt;int&gt;, currently only 1x1 and 4x3 are available.
     * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getV4AppApiGeneralinfoCountryflag(
      countryCode: string,
      size: string,
      strict?: boolean,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>
    > {
      const localVarAxiosArgs = await GeneralApiAxiosParamCreator(
        configuration,
      ).getV4AppApiGeneralinfoCountryflag(countryCode, size, strict, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs: AxiosRequestConfig = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Check the DOMjudge configuration.
     * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getV4AppApiGeneralinfoGetconfigcheck(
      strict?: boolean,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<any>>
    > {
      const localVarAxiosArgs = await GeneralApiAxiosParamCreator(
        configuration,
      ).getV4AppApiGeneralinfoGetconfigcheck(strict, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs: AxiosRequestConfig = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Get configuration variables.
     * @param {string} [name] Get only this configuration variable
     * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getV4AppApiGeneralinfoGetdatabaseconfiguration(
      name?: string,
      strict?: boolean,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<any>>
    > {
      const localVarAxiosArgs = await GeneralApiAxiosParamCreator(
        configuration,
      ).getV4AppApiGeneralinfoGetdatabaseconfiguration(name, strict, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs: AxiosRequestConfig = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Get information about the API and DOMjudge
     * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getV4AppApiGeneralinfoGetinfo(
      strict?: boolean,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => Promise<AxiosResponse<InlineResponse2005>>
    > {
      const localVarAxiosArgs = await GeneralApiAxiosParamCreator(
        configuration,
      ).getV4AppApiGeneralinfoGetinfo(strict, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs: AxiosRequestConfig = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Get general status information
     * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getV4AppApiGeneralinfoGetstatus(
      strict?: boolean,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => Promise<AxiosResponse<Array<InlineResponse2006>>>
    > {
      const localVarAxiosArgs = await GeneralApiAxiosParamCreator(
        configuration,
      ).getV4AppApiGeneralinfoGetstatus(strict, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs: AxiosRequestConfig = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Get information about the currently logged in user.
     * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getV4AppApiGeneralinfoGetuser(
      strict?: boolean,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<User>>
    > {
      const localVarAxiosArgs = await GeneralApiAxiosParamCreator(
        configuration,
      ).getV4AppApiGeneralinfoGetuser(strict, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs: AxiosRequestConfig = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Get the current API version
     * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getV4AppApiGeneralinfoGetversion(
      strict?: boolean,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => Promise<AxiosResponse<InlineResponse2004>>
    > {
      const localVarAxiosArgs = await GeneralApiAxiosParamCreator(
        configuration,
      ).getV4AppApiGeneralinfoGetversion(strict, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs: AxiosRequestConfig = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Add a problem without linking it to a contest.
     * @param {Blob} zip
     * @param {string} problem
     * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async postV4AppApiGeneralinfoAddproblemForm(
      zip: Blob,
      problem: string,
      strict?: boolean,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => Promise<AxiosResponse<InlineResponse2007>>
    > {
      const localVarAxiosArgs = await GeneralApiAxiosParamCreator(
        configuration,
      ).postV4AppApiGeneralinfoAddproblemForm(zip, problem, strict, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs: AxiosRequestConfig = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Update configuration variables.
     * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async putV4AppApiGeneralinfoUpdateconfiguration(
      strict?: boolean,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<any>>
    > {
      const localVarAxiosArgs = await GeneralApiAxiosParamCreator(
        configuration,
      ).putV4AppApiGeneralinfoUpdateconfiguration(strict, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs: AxiosRequestConfig = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
  };
};

/**
 * GeneralApi - factory interface
 * @export
 */
export const GeneralApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  return {
    /**
     *
     * @summary Get information about the API and DOMjudge
     * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getV4ApiRoot(
      strict?: boolean,
      options?: AxiosRequestConfig,
    ): Promise<AxiosResponse<InlineResponse2005>> {
      return GeneralApiFp(configuration)
        .getV4ApiRoot(strict, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get the flag for the given country.
     * @param {string} countryCode The ISO 3166-1 alpha-3 code for the country to get the flag for
     * @param {string} size Preferred aspect ratio as &lt;int&gt;x&lt;int&gt;, currently only 1x1 and 4x3 are available.
     * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getV4AppApiGeneralinfoCountryflag(
      countryCode: string,
      size: string,
      strict?: boolean,
      options?: AxiosRequestConfig,
    ): Promise<AxiosResponse<void>> {
      return GeneralApiFp(configuration)
        .getV4AppApiGeneralinfoCountryflag(countryCode, size, strict, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Check the DOMjudge configuration.
     * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getV4AppApiGeneralinfoGetconfigcheck(
      strict?: boolean,
      options?: AxiosRequestConfig,
    ): Promise<AxiosResponse<any>> {
      return GeneralApiFp(configuration)
        .getV4AppApiGeneralinfoGetconfigcheck(strict, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get configuration variables.
     * @param {string} [name] Get only this configuration variable
     * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getV4AppApiGeneralinfoGetdatabaseconfiguration(
      name?: string,
      strict?: boolean,
      options?: AxiosRequestConfig,
    ): Promise<AxiosResponse<any>> {
      return GeneralApiFp(configuration)
        .getV4AppApiGeneralinfoGetdatabaseconfiguration(name, strict, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get information about the API and DOMjudge
     * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getV4AppApiGeneralinfoGetinfo(
      strict?: boolean,
      options?: AxiosRequestConfig,
    ): Promise<AxiosResponse<InlineResponse2005>> {
      return GeneralApiFp(configuration)
        .getV4AppApiGeneralinfoGetinfo(strict, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get general status information
     * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getV4AppApiGeneralinfoGetstatus(
      strict?: boolean,
      options?: AxiosRequestConfig,
    ): Promise<AxiosResponse<Array<InlineResponse2006>>> {
      return GeneralApiFp(configuration)
        .getV4AppApiGeneralinfoGetstatus(strict, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get information about the currently logged in user.
     * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getV4AppApiGeneralinfoGetuser(
      strict?: boolean,
      options?: AxiosRequestConfig,
    ): Promise<AxiosResponse<User>> {
      return GeneralApiFp(configuration)
        .getV4AppApiGeneralinfoGetuser(strict, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get the current API version
     * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getV4AppApiGeneralinfoGetversion(
      strict?: boolean,
      options?: AxiosRequestConfig,
    ): Promise<AxiosResponse<InlineResponse2004>> {
      return GeneralApiFp(configuration)
        .getV4AppApiGeneralinfoGetversion(strict, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Add a problem without linking it to a contest.
     * @param {Blob} zip
     * @param {string} problem
     * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async postV4AppApiGeneralinfoAddproblemForm(
      zip: Blob,
      problem: string,
      strict?: boolean,
      options?: AxiosRequestConfig,
    ): Promise<AxiosResponse<InlineResponse2007>> {
      return GeneralApiFp(configuration)
        .postV4AppApiGeneralinfoAddproblemForm(zip, problem, strict, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Update configuration variables.
     * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async putV4AppApiGeneralinfoUpdateconfiguration(
      strict?: boolean,
      options?: AxiosRequestConfig,
    ): Promise<AxiosResponse<any>> {
      return GeneralApiFp(configuration)
        .putV4AppApiGeneralinfoUpdateconfiguration(strict, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * GeneralApi - object-oriented interface
 * @export
 * @class GeneralApi
 * @extends {BaseAPI}
 */
export class GeneralApi extends BaseAPI {
  /**
   *
   * @summary Get information about the API and DOMjudge
   * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GeneralApi
   */
  public async getV4ApiRoot(
    strict?: boolean,
    options?: AxiosRequestConfig,
  ): Promise<AxiosResponse<InlineResponse2005>> {
    return GeneralApiFp(this.configuration)
      .getV4ApiRoot(strict, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Get the flag for the given country.
   * @param {string} countryCode The ISO 3166-1 alpha-3 code for the country to get the flag for
   * @param {string} size Preferred aspect ratio as &lt;int&gt;x&lt;int&gt;, currently only 1x1 and 4x3 are available.
   * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GeneralApi
   */
  public async getV4AppApiGeneralinfoCountryflag(
    countryCode: string,
    size: string,
    strict?: boolean,
    options?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>> {
    return GeneralApiFp(this.configuration)
      .getV4AppApiGeneralinfoCountryflag(countryCode, size, strict, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Check the DOMjudge configuration.
   * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GeneralApi
   */
  public async getV4AppApiGeneralinfoGetconfigcheck(
    strict?: boolean,
    options?: AxiosRequestConfig,
  ): Promise<AxiosResponse<any>> {
    return GeneralApiFp(this.configuration)
      .getV4AppApiGeneralinfoGetconfigcheck(strict, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Get configuration variables.
   * @param {string} [name] Get only this configuration variable
   * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GeneralApi
   */
  public async getV4AppApiGeneralinfoGetdatabaseconfiguration(
    name?: string,
    strict?: boolean,
    options?: AxiosRequestConfig,
  ): Promise<AxiosResponse<any>> {
    return GeneralApiFp(this.configuration)
      .getV4AppApiGeneralinfoGetdatabaseconfiguration(name, strict, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Get information about the API and DOMjudge
   * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GeneralApi
   */
  public async getV4AppApiGeneralinfoGetinfo(
    strict?: boolean,
    options?: AxiosRequestConfig,
  ): Promise<AxiosResponse<InlineResponse2005>> {
    return GeneralApiFp(this.configuration)
      .getV4AppApiGeneralinfoGetinfo(strict, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Get general status information
   * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GeneralApi
   */
  public async getV4AppApiGeneralinfoGetstatus(
    strict?: boolean,
    options?: AxiosRequestConfig,
  ): Promise<AxiosResponse<Array<InlineResponse2006>>> {
    return GeneralApiFp(this.configuration)
      .getV4AppApiGeneralinfoGetstatus(strict, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Get information about the currently logged in user.
   * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GeneralApi
   */
  public async getV4AppApiGeneralinfoGetuser(
    strict?: boolean,
    options?: AxiosRequestConfig,
  ): Promise<AxiosResponse<User>> {
    return GeneralApiFp(this.configuration)
      .getV4AppApiGeneralinfoGetuser(strict, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Get the current API version
   * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GeneralApi
   */
  public async getV4AppApiGeneralinfoGetversion(
    strict?: boolean,
    options?: AxiosRequestConfig,
  ): Promise<AxiosResponse<InlineResponse2004>> {
    return GeneralApiFp(this.configuration)
      .getV4AppApiGeneralinfoGetversion(strict, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Add a problem without linking it to a contest.
   * @param {Blob} zip
   * @param {string} problem
   * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GeneralApi
   */
  public async postV4AppApiGeneralinfoAddproblemForm(
    zip: Blob,
    problem: string,
    strict?: boolean,
    options?: AxiosRequestConfig,
  ): Promise<AxiosResponse<InlineResponse2007>> {
    return GeneralApiFp(this.configuration)
      .postV4AppApiGeneralinfoAddproblemForm(zip, problem, strict, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Update configuration variables.
   * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GeneralApi
   */
  public async putV4AppApiGeneralinfoUpdateconfiguration(
    strict?: boolean,
    options?: AxiosRequestConfig,
  ): Promise<AxiosResponse<any>> {
    return GeneralApiFp(this.configuration)
      .putV4AppApiGeneralinfoUpdateconfiguration(strict, options)
      .then((request) => request(this.axios, this.basePath));
  }
}
