/* tslint:disable */
/* eslint-disable */
/**
 * DOMjudge
 * DOMjudge API v4
 *
 * OpenAPI spec version: 8.2.2
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import globalAxios, {
  AxiosResponse,
  AxiosInstance,
  AxiosRequestConfig,
} from "@/lib/axios";
import { Configuration } from "../configuration";
// Some imports not used depending on template conditions
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
} from "../base";
import { InlineResponse400 } from "../models";
import { TeamCategory } from "../models";
/**
 * GroupsApi - axios parameter creator
 * @export
 */
export const GroupsApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     *
     * @summary Get all the groups for this contest.
     * @param {string} cid The contest ID
     * @param {Array<string>} [ids] Filter the objects to get on this list of ID&#x27;s
     * @param {boolean} [_public] Only show public groups, even for users with more permissions
     * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getV4AppApiGroupList: async (
      cid: string,
      ids?: Array<string>,
      _public?: boolean,
      strict?: boolean,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'cid' is not null or undefined
      if (cid === null || cid === undefined) {
        throw new RequiredError(
          "cid",
          "Required parameter cid was null or undefined when calling getV4AppApiGroupList.",
        );
      }
      const localVarPath = `/api/v4/contests/{cid}/groups`.replace(
        `{${"cid"}}`,
        encodeURIComponent(String(cid)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions: AxiosRequestConfig = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication basicAuth required
      // http basic authentication required
      if (configuration && (configuration.username || configuration.password)) {
        localVarRequestOptions["auth"] = {
          username: configuration.username,
          password: configuration.password,
        };
      }

      if (ids) {
        localVarQueryParameter["ids[]"] = ids;
      }

      if (_public !== undefined) {
        localVarQueryParameter["public"] = _public;
      }

      if (strict !== undefined) {
        localVarQueryParameter["strict"] = strict;
      }

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.params) {
        query.set(key, options.params[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get the given group for this contest
     * @param {string} id The ID of the entity
     * @param {string} cid The contest ID
     * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getV4AppApiGroupSingle: async (
      id: string,
      cid: string,
      strict?: boolean,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          "id",
          "Required parameter id was null or undefined when calling getV4AppApiGroupSingle.",
        );
      }
      // verify required parameter 'cid' is not null or undefined
      if (cid === null || cid === undefined) {
        throw new RequiredError(
          "cid",
          "Required parameter cid was null or undefined when calling getV4AppApiGroupSingle.",
        );
      }
      const localVarPath = `/api/v4/contests/{cid}/groups/{id}`
        .replace(`{${"id"}}`, encodeURIComponent(String(id)))
        .replace(`{${"cid"}}`, encodeURIComponent(String(cid)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions: AxiosRequestConfig = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication basicAuth required
      // http basic authentication required
      if (configuration && (configuration.username || configuration.password)) {
        localVarRequestOptions["auth"] = {
          username: configuration.username,
          password: configuration.password,
        };
      }

      if (strict !== undefined) {
        localVarQueryParameter["strict"] = strict;
      }

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.params) {
        query.set(key, options.params[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Add a new group
     * @param {boolean} hidden
     * @param {string} id
     * @param {string} icpc_id
     * @param {string} name
     * @param {number} sortorder
     * @param {string} color
     * @param {string} cid The contest ID
     * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postV4AppApiGroupAddForm: async (
      hidden: boolean,
      id: string,
      icpc_id: string,
      name: string,
      sortorder: number,
      color: string,
      cid: string,
      strict?: boolean,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'hidden' is not null or undefined
      if (hidden === null || hidden === undefined) {
        throw new RequiredError(
          "hidden",
          "Required parameter hidden was null or undefined when calling postV4AppApiGroupAddForm.",
        );
      }
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          "id",
          "Required parameter id was null or undefined when calling postV4AppApiGroupAddForm.",
        );
      }
      // verify required parameter 'icpc_id' is not null or undefined
      if (icpc_id === null || icpc_id === undefined) {
        throw new RequiredError(
          "icpc_id",
          "Required parameter icpc_id was null or undefined when calling postV4AppApiGroupAddForm.",
        );
      }
      // verify required parameter 'name' is not null or undefined
      if (name === null || name === undefined) {
        throw new RequiredError(
          "name",
          "Required parameter name was null or undefined when calling postV4AppApiGroupAddForm.",
        );
      }
      // verify required parameter 'sortorder' is not null or undefined
      if (sortorder === null || sortorder === undefined) {
        throw new RequiredError(
          "sortorder",
          "Required parameter sortorder was null or undefined when calling postV4AppApiGroupAddForm.",
        );
      }
      // verify required parameter 'color' is not null or undefined
      if (color === null || color === undefined) {
        throw new RequiredError(
          "color",
          "Required parameter color was null or undefined when calling postV4AppApiGroupAddForm.",
        );
      }
      // verify required parameter 'cid' is not null or undefined
      if (cid === null || cid === undefined) {
        throw new RequiredError(
          "cid",
          "Required parameter cid was null or undefined when calling postV4AppApiGroupAddForm.",
        );
      }
      const localVarPath = `/api/v4/contests/{cid}/groups`.replace(
        `{${"cid"}}`,
        encodeURIComponent(String(cid)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions: AxiosRequestConfig = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;
      const localVarFormParams = new FormData();

      // authentication basicAuth required
      // http basic authentication required
      if (configuration && (configuration.username || configuration.password)) {
        localVarRequestOptions["auth"] = {
          username: configuration.username,
          password: configuration.password,
        };
      }

      if (strict !== undefined) {
        localVarQueryParameter["strict"] = strict;
      }

      if (hidden !== undefined) {
        localVarFormParams.append("hidden", hidden as any);
      }

      if (id !== undefined) {
        localVarFormParams.append("id", id as any);
      }

      if (icpc_id !== undefined) {
        localVarFormParams.append("icpc_id", icpc_id as any);
      }

      if (name !== undefined) {
        localVarFormParams.append("name", name as any);
      }

      if (sortorder !== undefined) {
        localVarFormParams.append("sortorder", sortorder as any);
      }

      if (color !== undefined) {
        localVarFormParams.append("color", color as any);
      }

      localVarHeaderParameter["Content-Type"] = "multipart/form-data";
      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.params) {
        query.set(key, options.params[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = localVarFormParams;

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Add a new group
     * @param {TeamCategory} body
     * @param {string} cid The contest ID
     * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postV4AppApiGroupAdd: async (
      body: TeamCategory,
      cid: string,
      strict?: boolean,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          "body",
          "Required parameter body was null or undefined when calling postV4AppApiGroupAdd.",
        );
      }
      // verify required parameter 'cid' is not null or undefined
      if (cid === null || cid === undefined) {
        throw new RequiredError(
          "cid",
          "Required parameter cid was null or undefined when calling postV4AppApiGroupAdd.",
        );
      }
      const localVarPath = `/api/v4/contests/{cid}/groups`.replace(
        `{${"cid"}}`,
        encodeURIComponent(String(cid)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions: AxiosRequestConfig = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;
      const localVarFormParams = new FormData();

      // authentication basicAuth required
      // http basic authentication required
      if (configuration && (configuration.username || configuration.password)) {
        localVarRequestOptions["auth"] = {
          username: configuration.username,
          password: configuration.password,
        };
      }

      if (strict !== undefined) {
        localVarQueryParameter["strict"] = strict;
      }

      localVarHeaderParameter["Content-Type"] = "multipart/form-data";

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.params) {
        query.set(key, options.params[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      const needsSerialization =
        typeof body !== "string" ||
        localVarRequestOptions.headers?.["Content-Type"] === "application/json";
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || "";

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * GroupsApi - functional programming interface
 * @export
 */
export const GroupsApiFp = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary Get all the groups for this contest.
     * @param {string} cid The contest ID
     * @param {Array<string>} [ids] Filter the objects to get on this list of ID&#x27;s
     * @param {boolean} [_public] Only show public groups, even for users with more permissions
     * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getV4AppApiGroupList(
      cid: string,
      ids?: Array<string>,
      _public?: boolean,
      strict?: boolean,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => Promise<AxiosResponse<Array<TeamCategory>>>
    > {
      const localVarAxiosArgs = await GroupsApiAxiosParamCreator(
        configuration,
      ).getV4AppApiGroupList(cid, ids, _public, strict, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs: AxiosRequestConfig = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Get the given group for this contest
     * @param {string} id The ID of the entity
     * @param {string} cid The contest ID
     * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getV4AppApiGroupSingle(
      id: string,
      cid: string,
      strict?: boolean,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => Promise<AxiosResponse<TeamCategory>>
    > {
      const localVarAxiosArgs = await GroupsApiAxiosParamCreator(
        configuration,
      ).getV4AppApiGroupSingle(id, cid, strict, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs: AxiosRequestConfig = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Add a new group
     * @param {boolean} hidden
     * @param {string} id
     * @param {string} icpc_id
     * @param {string} name
     * @param {number} sortorder
     * @param {string} color
     * @param {string} cid The contest ID
     * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async postV4AppApiGroupAddForm(
      hidden: boolean,
      id: string,
      icpc_id: string,
      name: string,
      sortorder: number,
      color: string,
      cid: string,
      strict?: boolean,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => Promise<AxiosResponse<TeamCategory>>
    > {
      const localVarAxiosArgs = await GroupsApiAxiosParamCreator(
        configuration,
      ).postV4AppApiGroupAddForm(
        hidden,
        id,
        icpc_id,
        name,
        sortorder,
        color,
        cid,
        strict,
        options,
      );
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs: AxiosRequestConfig = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Add a new group
     * @param {TeamCategory} body
     * @param {string} cid The contest ID
     * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async postV4AppApiGroupAdd(
      body: TeamCategory,
      cid: string,
      strict?: boolean,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => Promise<AxiosResponse<TeamCategory>>
    > {
      const localVarAxiosArgs = await GroupsApiAxiosParamCreator(
        configuration,
      ).postV4AppApiGroupAdd(body, cid, strict, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs: AxiosRequestConfig = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
  };
};

/**
 * GroupsApi - factory interface
 * @export
 */
export const GroupsApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  return {
    /**
     *
     * @summary Get all the groups for this contest.
     * @param {string} cid The contest ID
     * @param {Array<string>} [ids] Filter the objects to get on this list of ID&#x27;s
     * @param {boolean} [_public] Only show public groups, even for users with more permissions
     * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getV4AppApiGroupList(
      cid: string,
      ids?: Array<string>,
      _public?: boolean,
      strict?: boolean,
      options?: AxiosRequestConfig,
    ): Promise<AxiosResponse<Array<TeamCategory>>> {
      return GroupsApiFp(configuration)
        .getV4AppApiGroupList(cid, ids, _public, strict, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get the given group for this contest
     * @param {string} id The ID of the entity
     * @param {string} cid The contest ID
     * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getV4AppApiGroupSingle(
      id: string,
      cid: string,
      strict?: boolean,
      options?: AxiosRequestConfig,
    ): Promise<AxiosResponse<TeamCategory>> {
      return GroupsApiFp(configuration)
        .getV4AppApiGroupSingle(id, cid, strict, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Add a new group
     * @param {boolean} hidden
     * @param {string} id
     * @param {string} icpc_id
     * @param {string} name
     * @param {number} sortorder
     * @param {string} color
     * @param {string} cid The contest ID
     * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async postV4AppApiGroupAddForm(
      hidden: boolean,
      id: string,
      icpc_id: string,
      name: string,
      sortorder: number,
      color: string,
      cid: string,
      strict?: boolean,
      options?: AxiosRequestConfig,
    ): Promise<AxiosResponse<TeamCategory>> {
      return GroupsApiFp(configuration)
        .postV4AppApiGroupAddForm(
          hidden,
          id,
          icpc_id,
          name,
          sortorder,
          color,
          cid,
          strict,
          options,
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Add a new group
     * @param {TeamCategory} body
     * @param {string} cid The contest ID
     * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async postV4AppApiGroupAdd(
      body: TeamCategory,
      cid: string,
      strict?: boolean,
      options?: AxiosRequestConfig,
    ): Promise<AxiosResponse<TeamCategory>> {
      return GroupsApiFp(configuration)
        .postV4AppApiGroupAdd(body, cid, strict, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * GroupsApi - object-oriented interface
 * @export
 * @class GroupsApi
 * @extends {BaseAPI}
 */
export class GroupsApi extends BaseAPI {
  /**
   *
   * @summary Get all the groups for this contest.
   * @param {string} cid The contest ID
   * @param {Array<string>} [ids] Filter the objects to get on this list of ID&#x27;s
   * @param {boolean} [_public] Only show public groups, even for users with more permissions
   * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GroupsApi
   */
  public async getV4AppApiGroupList(
    cid: string,
    ids?: Array<string>,
    _public?: boolean,
    strict?: boolean,
    options?: AxiosRequestConfig,
  ): Promise<AxiosResponse<Array<TeamCategory>>> {
    return GroupsApiFp(this.configuration)
      .getV4AppApiGroupList(cid, ids, _public, strict, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Get the given group for this contest
   * @param {string} id The ID of the entity
   * @param {string} cid The contest ID
   * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GroupsApi
   */
  public async getV4AppApiGroupSingle(
    id: string,
    cid: string,
    strict?: boolean,
    options?: AxiosRequestConfig,
  ): Promise<AxiosResponse<TeamCategory>> {
    return GroupsApiFp(this.configuration)
      .getV4AppApiGroupSingle(id, cid, strict, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Add a new group
   * @param {boolean} hidden
   * @param {string} id
   * @param {string} icpc_id
   * @param {string} name
   * @param {number} sortorder
   * @param {string} color
   * @param {string} cid The contest ID
   * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GroupsApi
   */
  public async postV4AppApiGroupAddForm(
    hidden: boolean,
    id: string,
    icpc_id: string,
    name: string,
    sortorder: number,
    color: string,
    cid: string,
    strict?: boolean,
    options?: AxiosRequestConfig,
  ): Promise<AxiosResponse<TeamCategory>> {
    return GroupsApiFp(this.configuration)
      .postV4AppApiGroupAddForm(
        hidden,
        id,
        icpc_id,
        name,
        sortorder,
        color,
        cid,
        strict,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Add a new group
   * @param {TeamCategory} body
   * @param {string} cid The contest ID
   * @param {boolean} [strict] Whether to only include CCS compliant properties in the response
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GroupsApi
   */
  public async postV4AppApiGroupAdd(
    body: TeamCategory,
    cid: string,
    strict?: boolean,
    options?: AxiosRequestConfig,
  ): Promise<AxiosResponse<TeamCategory>> {
    return GroupsApiFp(this.configuration)
      .postV4AppApiGroupAdd(body, cid, strict, options)
      .then((request) => request(this.axios, this.basePath));
  }
}
